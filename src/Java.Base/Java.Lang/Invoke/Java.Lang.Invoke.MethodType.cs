//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Linq;
using System.Collections.Generic;
using Java.Interop;

namespace Java.Lang.Invoke
{

	partial class MethodType
	{
		Java.Interop.JavaObjectArray<Object> ITypeDescriptor.IOfMethod.ParameterArray ()
		{
			throw new NotImplementedException ();
		}
	}

	// Metadata.xml XPath class reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']"
	[global::Java.Interop.JniTypeSignature ("java/lang/invoke/MethodType", GenerateJavaPeer = false)]
	public sealed partial class MethodType : global::Java.Lang.Object, global::Java.IO.ISerializable, global::Java.Lang.Constants.IConstable, global::Java.Lang.Invoke.ITypeDescriptor.IOfMethod
	{
		static readonly JniPeerMembers _members = new JniPeerMembers ("java/lang/invoke/MethodType", typeof (MethodType));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		internal MethodType (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		public unsafe bool HasPrimitives {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='hasPrimitives' and count(parameter)=0]"
			get {
				const string __id = "hasPrimitives.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public unsafe bool HasWrappers {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='hasWrappers' and count(parameter)=0]"
			get {
				const string __id = "hasWrappers.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='appendParameterTypes' and count(parameter)=1 and parameter[1][@type='java.lang.Class&lt;?&gt;...']]"
		[global::Java.Interop.JniMethodSignature ("appendParameterTypes", "([Ljava/lang/Class;)Ljava/lang/invoke/MethodType;")]
		public unsafe global::Java.Lang.Invoke.MethodType? AppendParameterTypes (params global::Java.Lang.Class []? ptypesToInsert)
		{
			const string __id = "appendParameterTypes.([Ljava/lang/Class;)Ljava/lang/invoke/MethodType;";
			var native_ptypesToInsert = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalObjectArray<global::Java.Lang.Class> (ptypesToInsert);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_ptypesToInsert);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_ptypesToInsert != null) {
					native_ptypesToInsert.CopyTo (ptypesToInsert!, 0);
					native_ptypesToInsert.Dispose ();
				}
				global::System.GC.KeepAlive (ptypesToInsert);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='appendParameterTypes' and count(parameter)=1 and parameter[1][@type='java.util.List&lt;java.lang.Class&lt;?&gt;&gt;']]"
		[global::Java.Interop.JniMethodSignature ("appendParameterTypes", "(Ljava/util/List;)Ljava/lang/invoke/MethodType;")]
		public unsafe global::Java.Lang.Invoke.MethodType? AppendParameterTypes (global::Java.Util.IList? ptypesToInsert)
		{
			const string __id = "appendParameterTypes.(Ljava/util/List;)Ljava/lang/invoke/MethodType;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (ptypesToInsert);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (ptypesToInsert);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='changeParameterType' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='java.lang.Class&lt;?&gt;']]"
		[global::Java.Interop.JniMethodSignature ("changeParameterType", "(ILjava/lang/Class;)Ljava/lang/invoke/MethodType;")]
		public unsafe global::Java.Lang.Invoke.MethodType? ChangeParameterType (int num, global::Java.Lang.Class? nptype)
		{
			const string __id = "changeParameterType.(ILjava/lang/Class;)Ljava/lang/invoke/MethodType;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (num);
				__args [1] = new JniArgumentValue (nptype);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (nptype);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='changeReturnType' and count(parameter)=1 and parameter[1][@type='java.lang.Class&lt;?&gt;']]"
		[global::Java.Interop.JniMethodSignature ("changeReturnType", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodType;")]
		public unsafe global::Java.Lang.Invoke.MethodType? ChangeReturnType (global::Java.Lang.Class? nrtype)
		{
			const string __id = "changeReturnType.(Ljava/lang/Class;)Ljava/lang/invoke/MethodType;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (nrtype);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (nrtype);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='describeConstable' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("describeConstable", "()Ljava/util/Optional;")]
		public unsafe global::Java.Util.Optional? DescribeConstable ()
		{
			const string __id = "describeConstable.()Ljava/util/Optional;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Optional> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='descriptorString' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("descriptorString", "()Ljava/lang/String;")]
		public unsafe string? DescriptorString ()
		{
			const string __id = "descriptorString.()Ljava/lang/String;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Strings.ToString (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='dropParameterTypes' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("dropParameterTypes", "(II)Ljava/lang/invoke/MethodType;")]
		public unsafe global::Java.Lang.Invoke.MethodType? DropParameterTypes (int start, int end)
		{
			const string __id = "dropParameterTypes.(II)Ljava/lang/invoke/MethodType;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (start);
				__args [1] = new JniArgumentValue (end);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='erase' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("erase", "()Ljava/lang/invoke/MethodType;")]
		public unsafe global::Java.Lang.Invoke.MethodType? Erase ()
		{
			const string __id = "erase.()Ljava/lang/invoke/MethodType;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='fromMethodDescriptorString' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.ClassLoader']]"
		[global::Java.Interop.JniMethodSignature ("fromMethodDescriptorString", "(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/lang/invoke/MethodType;")]
		public static unsafe global::Java.Lang.Invoke.MethodType? FromMethodDescriptorString (string? descriptor, global::Java.Lang.ClassLoader? loader)
		{
			const string __id = "fromMethodDescriptorString.(Ljava/lang/String;Ljava/lang/ClassLoader;)Ljava/lang/invoke/MethodType;";
			var native_descriptor = global::Java.Interop.JniEnvironment.Strings.NewString (descriptor);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_descriptor);
				__args [1] = new JniArgumentValue (loader);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_descriptor);
				global::System.GC.KeepAlive (loader);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='generic' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("generic", "()Ljava/lang/invoke/MethodType;")]
		public unsafe global::Java.Lang.Invoke.MethodType? Generic ()
		{
			const string __id = "generic.()Ljava/lang/invoke/MethodType;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='genericMethodType' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("genericMethodType", "(I)Ljava/lang/invoke/MethodType;")]
		public static unsafe global::Java.Lang.Invoke.MethodType? GenericMethodType (int objectArgCount)
		{
			const string __id = "genericMethodType.(I)Ljava/lang/invoke/MethodType;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (objectArgCount);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='genericMethodType' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='boolean']]"
		[global::Java.Interop.JniMethodSignature ("genericMethodType", "(IZ)Ljava/lang/invoke/MethodType;")]
		public static unsafe global::Java.Lang.Invoke.MethodType? GenericMethodType (int objectArgCount, bool finalArray)
		{
			const string __id = "genericMethodType.(IZ)Ljava/lang/invoke/MethodType;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (objectArgCount);
				__args [1] = new JniArgumentValue (finalArray ? (sbyte) 1 : (sbyte) 0);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='insertParameterTypes' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='java.lang.Class&lt;?&gt;...']]"
		[global::Java.Interop.JniMethodSignature ("insertParameterTypes", "(I[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;")]
		public unsafe global::Java.Lang.Invoke.MethodType? InsertParameterTypes (int num, params global::Java.Lang.Class []? ptypesToInsert)
		{
			const string __id = "insertParameterTypes.(I[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;";
			var native_ptypesToInsert = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalObjectArray<global::Java.Lang.Class> (ptypesToInsert);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (num);
				__args [1] = new JniArgumentValue (native_ptypesToInsert);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_ptypesToInsert != null) {
					native_ptypesToInsert.CopyTo (ptypesToInsert!, 0);
					native_ptypesToInsert.Dispose ();
				}
				global::System.GC.KeepAlive (ptypesToInsert);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='insertParameterTypes' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='java.util.List&lt;java.lang.Class&lt;?&gt;&gt;']]"
		[global::Java.Interop.JniMethodSignature ("insertParameterTypes", "(ILjava/util/List;)Ljava/lang/invoke/MethodType;")]
		public unsafe global::Java.Lang.Invoke.MethodType? InsertParameterTypes (int num, global::Java.Util.IList? ptypesToInsert)
		{
			const string __id = "insertParameterTypes.(ILjava/util/List;)Ljava/lang/invoke/MethodType;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (num);
				__args [1] = new JniArgumentValue (ptypesToInsert);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (ptypesToInsert);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='lastParameterType' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("lastParameterType", "()Ljava/lang/Class;")]
		public unsafe global::Java.Lang.Class? LastParameterType ()
		{
			const string __id = "lastParameterType.()Ljava/lang/Class;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Class> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='methodType' and count(parameter)=1 and parameter[1][@type='java.lang.Class&lt;?&gt;']]"
		[global::Java.Interop.JniMethodSignature ("methodType", "(Ljava/lang/Class;)Ljava/lang/invoke/MethodType;")]
		public static unsafe global::Java.Lang.Invoke.MethodType? InvokeMethodType (global::Java.Lang.Class? rtype)
		{
			const string __id = "methodType.(Ljava/lang/Class;)Ljava/lang/invoke/MethodType;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (rtype);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (rtype);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='methodType' and count(parameter)=2 and parameter[1][@type='java.lang.Class&lt;?&gt;'] and parameter[2][@type='java.lang.Class&lt;?&gt;']]"
		[global::Java.Interop.JniMethodSignature ("methodType", "(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/invoke/MethodType;")]
		public static unsafe global::Java.Lang.Invoke.MethodType? InvokeMethodType (global::Java.Lang.Class? rtype, global::Java.Lang.Class? ptype0)
		{
			const string __id = "methodType.(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/invoke/MethodType;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (rtype);
				__args [1] = new JniArgumentValue (ptype0);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (rtype);
				global::System.GC.KeepAlive (ptype0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='methodType' and count(parameter)=2 and parameter[1][@type='java.lang.Class&lt;?&gt;'] and parameter[2][@type='java.lang.Class&lt;?&gt;[]']]"
		[global::Java.Interop.JniMethodSignature ("methodType", "(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;")]
		public static unsafe global::Java.Lang.Invoke.MethodType? InvokeMethodType (global::Java.Lang.Class? rtype, global::Java.Interop.JavaObjectArray<global::Java.Lang.Class>? ptypes)
		{
			const string __id = "methodType.(Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;";
			var native_ptypes = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalObjectArray<global::Java.Lang.Class> (ptypes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (rtype);
				__args [1] = new JniArgumentValue (native_ptypes);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_ptypes != null) {
					native_ptypes.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (rtype);
				global::System.GC.KeepAlive (ptypes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='methodType' and count(parameter)=3 and parameter[1][@type='java.lang.Class&lt;?&gt;'] and parameter[2][@type='java.lang.Class&lt;?&gt;'] and parameter[3][@type='java.lang.Class&lt;?&gt;...']]"
		[global::Java.Interop.JniMethodSignature ("methodType", "(Ljava/lang/Class;Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;")]
		public static unsafe global::Java.Lang.Invoke.MethodType? InvokeMethodType (global::Java.Lang.Class? rtype, global::Java.Lang.Class? ptype0, params global::Java.Lang.Class []? ptypes)
		{
			const string __id = "methodType.(Ljava/lang/Class;Ljava/lang/Class;[Ljava/lang/Class;)Ljava/lang/invoke/MethodType;";
			var native_ptypes = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalObjectArray<global::Java.Lang.Class> (ptypes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (rtype);
				__args [1] = new JniArgumentValue (ptype0);
				__args [2] = new JniArgumentValue (native_ptypes);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_ptypes != null) {
					native_ptypes.CopyTo (ptypes!, 0);
					native_ptypes.Dispose ();
				}
				global::System.GC.KeepAlive (rtype);
				global::System.GC.KeepAlive (ptype0);
				global::System.GC.KeepAlive (ptypes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='methodType' and count(parameter)=2 and parameter[1][@type='java.lang.Class&lt;?&gt;'] and parameter[2][@type='java.lang.invoke.MethodType']]"
		[global::Java.Interop.JniMethodSignature ("methodType", "(Ljava/lang/Class;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodType;")]
		public static unsafe global::Java.Lang.Invoke.MethodType? InvokeMethodType (global::Java.Lang.Class? rtype, global::Java.Lang.Invoke.MethodType? ptypes)
		{
			const string __id = "methodType.(Ljava/lang/Class;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/MethodType;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (rtype);
				__args [1] = new JniArgumentValue (ptypes);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (rtype);
				global::System.GC.KeepAlive (ptypes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='methodType' and count(parameter)=2 and parameter[1][@type='java.lang.Class&lt;?&gt;'] and parameter[2][@type='java.util.List&lt;java.lang.Class&lt;?&gt;&gt;']]"
		[global::Java.Interop.JniMethodSignature ("methodType", "(Ljava/lang/Class;Ljava/util/List;)Ljava/lang/invoke/MethodType;")]
		public static unsafe global::Java.Lang.Invoke.MethodType? InvokeMethodType (global::Java.Lang.Class? rtype, global::Java.Util.IList? ptypes)
		{
			const string __id = "methodType.(Ljava/lang/Class;Ljava/util/List;)Ljava/lang/invoke/MethodType;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (rtype);
				__args [1] = new JniArgumentValue (ptypes);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (rtype);
				global::System.GC.KeepAlive (ptypes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='parameterArray' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("parameterArray", "()[Ljava/lang/Class;")]
		public unsafe global::Java.Interop.JavaObjectArray<global::Java.Lang.Class>? ParameterArray ()
		{
			const string __id = "parameterArray.()[Ljava/lang/Class;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Interop.JavaObjectArray<Java.Lang.Class>> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='parameterCount' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("parameterCount", "()I")]
		public unsafe int ParameterCount ()
		{
			const string __id = "parameterCount.()I";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='parameterList' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("parameterList", "()Ljava/util/List;")]
		public unsafe global::Java.Util.IList? ParameterList ()
		{
			const string __id = "parameterList.()Ljava/util/List;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.IList> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='parameterType' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("parameterType", "(I)Ljava/lang/Class;")]
		public unsafe global::Java.Lang.Class? ParameterType (int num)
		{
			const string __id = "parameterType.(I)Ljava/lang/Class;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (num);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Class> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='returnType' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("returnType", "()Ljava/lang/Class;")]
		public unsafe global::Java.Lang.Class? ReturnType ()
		{
			const string __id = "returnType.()Ljava/lang/Class;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Class> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='toMethodDescriptorString' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("toMethodDescriptorString", "()Ljava/lang/String;")]
		public unsafe string? ToMethodDescriptorString ()
		{
			const string __id = "toMethodDescriptorString.()Ljava/lang/String;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Strings.ToString (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='unwrap' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("unwrap", "()Ljava/lang/invoke/MethodType;")]
		public unsafe global::Java.Lang.Invoke.MethodType? Unwrap ()
		{
			const string __id = "unwrap.()Ljava/lang/invoke/MethodType;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.lang.invoke']/class[@name='MethodType']/method[@name='wrap' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("wrap", "()Ljava/lang/invoke/MethodType;")]
		public unsafe global::Java.Lang.Invoke.MethodType? Wrap ()
		{
			const string __id = "wrap.()Ljava/lang/invoke/MethodType;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Invoke.MethodType> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// This method is explicitly implemented as a member of an instantiated Java.Lang.Invoke.ITypeDescriptor.IOfMethod
		global::Java.Lang.Object? global::Java.Lang.Invoke.ITypeDescriptor.IOfMethod.ChangeParameterType (int p0, global::Java.Lang.Object? p1)
		{
			return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<Java.Lang.Object> ((ChangeParameterType (p0, global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Class> ((p1?.PeerReference ?? default).Handle))?.PeerReference ?? default).Handle);
		}

		// This method is explicitly implemented as a member of an instantiated Java.Lang.Invoke.ITypeDescriptor.IOfMethod
		global::Java.Lang.Object? global::Java.Lang.Invoke.ITypeDescriptor.IOfMethod.ChangeReturnType (global::Java.Lang.Object? p0)
		{
			return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<Java.Lang.Object> ((ChangeReturnType (global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Class> ((p0?.PeerReference ?? default).Handle))?.PeerReference ?? default).Handle);
		}

		// This method is explicitly implemented as a member of an instantiated Java.Lang.Invoke.ITypeDescriptor.IOfMethod
		global::Java.Lang.Object? global::Java.Lang.Invoke.ITypeDescriptor.IOfMethod.DropParameterTypes (int p0, int p1)
		{
			return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<Java.Lang.Object> ((DropParameterTypes (p0, p1)?.PeerReference ?? default).Handle);
		}

		// This method is explicitly implemented as a member of an instantiated Java.Lang.Invoke.ITypeDescriptor.IOfMethod
		global::Java.Lang.Object? global::Java.Lang.Invoke.ITypeDescriptor.IOfMethod.InsertParameterTypes (int p0, params global::Java.Lang.Object []? p1)
		{
			return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<Java.Lang.Object> ((InsertParameterTypes (p0, p1?.Cast<Class>().ToArray())?.PeerReference ?? default).Handle);
		}

		// This method is explicitly implemented as a member of an instantiated Java.Lang.Invoke.ITypeDescriptor.IOfMethod
		global::Java.Util.IList? global::Java.Lang.Invoke.ITypeDescriptor.IOfMethod.ParameterList ()
		{
			return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<Java.Util.IList> ((ParameterList ()?.PeerReference ?? default).Handle);
		}

		// This method is explicitly implemented as a member of an instantiated Java.Lang.Invoke.ITypeDescriptor.IOfMethod
		global::Java.Lang.Object? global::Java.Lang.Invoke.ITypeDescriptor.IOfMethod.ParameterType (int p0)
		{
			return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<Java.Lang.Object> ((ParameterType (p0)?.PeerReference ?? default).Handle);
		}

		// This method is explicitly implemented as a member of an instantiated Java.Lang.Invoke.ITypeDescriptor.IOfMethod
		global::Java.Lang.Object? global::Java.Lang.Invoke.ITypeDescriptor.IOfMethod.ReturnType ()
		{
			return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<Java.Lang.Object> ((ReturnType ()?.PeerReference ?? default).Handle);
		}

	}
}

