//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Java.Interop;

namespace Java.Text {

	// Metadata.xml XPath class reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']"
	[global::Java.Interop.JniTypeSignature ("java/text/MessageFormat", GenerateJavaPeer=false)]
	public partial class MessageFormat : global::Java.Text.Format {
		// Metadata.xml XPath class reference: path="/api/package[@name='java.text']/class[@name='MessageFormat.Field']"
		[global::Java.Interop.JniTypeSignature ("java/text/MessageFormat$Field", GenerateJavaPeer=false)]
		public new partial class Field : global::Java.Text.Format.Field {

			// Metadata.xml XPath field reference: path="/api/package[@name='java.text']/class[@name='MessageFormat.Field']/field[@name='ARGUMENT']"
			public static global::Java.Text.MessageFormat.Field? Argument {
				get {
					const string __id = "ARGUMENT.Ljava/text/MessageFormat$Field;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Text.MessageFormat.Field? >(ref __v, JniObjectReferenceOptions.Copy);
				}
			}

			static readonly JniPeerMembers _members = new JniPeerMembers ("java/text/MessageFormat$Field", typeof (Field));

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			protected Field (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
			{
			}

			// Metadata.xml XPath constructor reference: path="/api/package[@name='java.text']/class[@name='MessageFormat.Field']/constructor[@name='MessageFormat.Field' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[global::Java.Interop.JniConstructorSignature ("(Ljava/lang/String;)V")]
			protected unsafe Field (string? name) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
			{
				const string __id = "(Ljava/lang/String;)V";

				if (PeerReference.IsValid)
					return;

				var native_name = global::Java.Interop.JniEnvironment.Strings.NewString (name);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_name);
					var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
					Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
					_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
				} finally {
					global::Java.Interop.JniObjectReference.Dispose (ref native_name);
				}
			}

		}

		static readonly JniPeerMembers _members = new JniPeerMembers ("java/text/MessageFormat", typeof (MessageFormat));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		protected MessageFormat (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']/constructor[@name='MessageFormat' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/lang/String;)V")]
		public unsafe MessageFormat (string? pattern) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/lang/String;)V";

			if (PeerReference.IsValid)
				return;

			var native_pattern = global::Java.Interop.JniEnvironment.Strings.NewString (pattern);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_pattern);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_pattern);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']/constructor[@name='MessageFormat' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.util.Locale']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/lang/String;Ljava/util/Locale;)V")]
		public unsafe MessageFormat (string? pattern, global::Java.Util.Locale? locale) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/lang/String;Ljava/util/Locale;)V";

			if (PeerReference.IsValid)
				return;

			var native_pattern = global::Java.Interop.JniEnvironment.Strings.NewString (pattern);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_pattern);
				__args [1] = new JniArgumentValue (locale);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_pattern);
				global::System.GC.KeepAlive (locale);
			}
		}

		public virtual unsafe global::Java.Util.Locale? Locale {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']/method[@name='getLocale' and count(parameter)=0]"
			get {
				const string __id = "getLocale.()Ljava/util/Locale;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Locale> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']/method[@name='setLocale' and count(parameter)=1 and parameter[1][@type='java.util.Locale']]"
			set {
				const string __id = "setLocale.(Ljava/util/Locale;)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (value);
					_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
				} finally {
					global::System.GC.KeepAlive (value);
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']/method[@name='applyPattern' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::Java.Interop.JniMethodSignature ("applyPattern", "(Ljava/lang/String;)V")]
		public virtual unsafe void ApplyPattern (string? pattern)
		{
			const string __id = "applyPattern.(Ljava/lang/String;)V";
			var native_pattern = global::Java.Interop.JniEnvironment.Strings.NewString (pattern);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_pattern);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_pattern);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']/method[@name='format' and count(parameter)=3 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.StringBuffer'] and parameter[3][@type='java.text.FieldPosition']]"
		[global::Java.Interop.JniMethodSignature ("format", "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;")]
		public unsafe global::Java.Lang.StringBuffer? Format (global::Java.Lang.Object? arguments, global::Java.Lang.StringBuffer? result, global::Java.Text.FieldPosition? pos)
		{
			const string __id = "format.(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (arguments);
				__args [1] = new JniArgumentValue (result);
				__args [2] = new JniArgumentValue (pos);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.StringBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (arguments);
				global::System.GC.KeepAlive (result);
				global::System.GC.KeepAlive (pos);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']/method[@name='format' and count(parameter)=3 and parameter[1][@type='java.lang.Object[]'] and parameter[2][@type='java.lang.StringBuffer'] and parameter[3][@type='java.text.FieldPosition']]"
		[global::Java.Interop.JniMethodSignature ("format", "([Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;")]
		public unsafe global::Java.Lang.StringBuffer? Format (global::Java.Interop.JavaObjectArray<global::Java.Lang.Object>? arguments, global::Java.Lang.StringBuffer? result, global::Java.Text.FieldPosition? pos)
		{
			const string __id = "format.([Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;";
			var native_arguments = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalObjectArray<global::Java.Lang.Object> (arguments);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_arguments);
				__args [1] = new JniArgumentValue (result);
				__args [2] = new JniArgumentValue (pos);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.StringBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_arguments != null) {
					native_arguments.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (arguments);
				global::System.GC.KeepAlive (result);
				global::System.GC.KeepAlive (pos);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']/method[@name='format' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.Object...']]"
		[global::Java.Interop.JniMethodSignature ("format", "(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;")]
		public static unsafe string? Format (string? pattern, params global::Java.Lang.Object[]? arguments)
		{
			const string __id = "format.(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;";
			var native_pattern = global::Java.Interop.JniEnvironment.Strings.NewString (pattern);
			var native_arguments = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalObjectArray<global::Java.Lang.Object> (arguments);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_pattern);
				__args [1] = new JniArgumentValue (native_arguments);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Strings.ToString (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_pattern);
				if (native_arguments != null) {
					native_arguments.CopyTo (arguments!, 0);
					native_arguments.Dispose ();
				}
				global::System.GC.KeepAlive (arguments);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']/method[@name='getFormats' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("getFormats", "()[Ljava/text/Format;")]
		public virtual unsafe global::Java.Interop.JavaObjectArray<global::Java.Text.Format>? GetFormats ()
		{
			const string __id = "getFormats.()[Ljava/text/Format;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Interop.JavaObjectArray<Java.Text.Format>>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']/method[@name='getFormatsByArgumentIndex' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("getFormatsByArgumentIndex", "()[Ljava/text/Format;")]
		public virtual unsafe global::Java.Interop.JavaObjectArray<global::Java.Text.Format>? GetFormatsByArgumentIndex ()
		{
			const string __id = "getFormatsByArgumentIndex.()[Ljava/text/Format;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Interop.JavaObjectArray<Java.Text.Format>>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']/method[@name='parse' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::Java.Interop.JniMethodSignature ("parse", "(Ljava/lang/String;)[Ljava/lang/Object;")]
		public virtual unsafe global::Java.Interop.JavaObjectArray<global::Java.Lang.Object>? Parse (string? source)
		{
			const string __id = "parse.(Ljava/lang/String;)[Ljava/lang/Object;";
			var native_source = global::Java.Interop.JniEnvironment.Strings.NewString (source);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_source);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Interop.JavaObjectArray<Java.Lang.Object>>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_source);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']/method[@name='parse' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.text.ParsePosition']]"
		[global::Java.Interop.JniMethodSignature ("parse", "(Ljava/lang/String;Ljava/text/ParsePosition;)[Ljava/lang/Object;")]
		public virtual unsafe global::Java.Interop.JavaObjectArray<global::Java.Lang.Object>? Parse (string? source, global::Java.Text.ParsePosition? pos)
		{
			const string __id = "parse.(Ljava/lang/String;Ljava/text/ParsePosition;)[Ljava/lang/Object;";
			var native_source = global::Java.Interop.JniEnvironment.Strings.NewString (source);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_source);
				__args [1] = new JniArgumentValue (pos);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Interop.JavaObjectArray<Java.Lang.Object>>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_source);
				global::System.GC.KeepAlive (pos);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']/method[@name='parseObject' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.text.ParsePosition']]"
		[global::Java.Interop.JniMethodSignature ("parseObject", "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;")]
		public override unsafe global::Java.Lang.Object? ParseObject (string? source, global::Java.Text.ParsePosition? pos)
		{
			const string __id = "parseObject.(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;";
			var native_source = global::Java.Interop.JniEnvironment.Strings.NewString (source);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_source);
				__args [1] = new JniArgumentValue (pos);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_source);
				global::System.GC.KeepAlive (pos);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']/method[@name='setFormat' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='java.text.Format']]"
		[global::Java.Interop.JniMethodSignature ("setFormat", "(ILjava/text/Format;)V")]
		public virtual unsafe void SetFormat (int formatElementIndex, global::Java.Text.Format? newFormat)
		{
			const string __id = "setFormat.(ILjava/text/Format;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (formatElementIndex);
				__args [1] = new JniArgumentValue (newFormat);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (newFormat);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']/method[@name='setFormatByArgumentIndex' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='java.text.Format']]"
		[global::Java.Interop.JniMethodSignature ("setFormatByArgumentIndex", "(ILjava/text/Format;)V")]
		public virtual unsafe void SetFormatByArgumentIndex (int argumentIndex, global::Java.Text.Format? newFormat)
		{
			const string __id = "setFormatByArgumentIndex.(ILjava/text/Format;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (argumentIndex);
				__args [1] = new JniArgumentValue (newFormat);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (newFormat);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']/method[@name='setFormats' and count(parameter)=1 and parameter[1][@type='java.text.Format[]']]"
		[global::Java.Interop.JniMethodSignature ("setFormats", "([Ljava/text/Format;)V")]
		public virtual unsafe void SetFormats (global::Java.Interop.JavaObjectArray<global::Java.Text.Format>? newFormats)
		{
			const string __id = "setFormats.([Ljava/text/Format;)V";
			var native_newFormats = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalObjectArray<global::Java.Text.Format> (newFormats);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_newFormats);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (native_newFormats != null) {
					native_newFormats.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (newFormats);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']/method[@name='setFormatsByArgumentIndex' and count(parameter)=1 and parameter[1][@type='java.text.Format[]']]"
		[global::Java.Interop.JniMethodSignature ("setFormatsByArgumentIndex", "([Ljava/text/Format;)V")]
		public virtual unsafe void SetFormatsByArgumentIndex (global::Java.Interop.JavaObjectArray<global::Java.Text.Format>? newFormats)
		{
			const string __id = "setFormatsByArgumentIndex.([Ljava/text/Format;)V";
			var native_newFormats = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalObjectArray<global::Java.Text.Format> (newFormats);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_newFormats);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (native_newFormats != null) {
					native_newFormats.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (newFormats);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='MessageFormat']/method[@name='toPattern' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("toPattern", "()Ljava/lang/String;")]
		public virtual unsafe string? ToPattern ()
		{
			const string __id = "toPattern.()Ljava/lang/String;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Strings.ToString (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

	}
}
