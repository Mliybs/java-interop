//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Java.Interop;

namespace Java.Text {

	partial class Format
	{
		[global::Java.Interop.JniMethodSignature ("format", "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;")]
		public virtual unsafe global::Java.Lang.StringBuffer? InvokeFormat (global::Java.Lang.Object? p0, global::Java.Lang.StringBuffer? p1, global::Java.Text.FieldPosition? p2)
		{
			const string __id = "format.(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				__args [2] = new JniArgumentValue (p2);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.StringBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (p0);
				global::System.GC.KeepAlive (p1);
				global::System.GC.KeepAlive (p2);
			}
		}
	}

	// Metadata.xml XPath class reference: path="/api/package[@name='java.text']/class[@name='Format']"
	[global::Java.Interop.JniTypeSignature ("java/text/Format", GenerateJavaPeer=false, InvokerType=typeof (FormatInvoker))]
	public abstract partial class Format : global::Java.Lang.Object, global::Java.IO.ISerializable, global::Java.Lang.ICloneable {
		// Metadata.xml XPath class reference: path="/api/package[@name='java.text']/class[@name='Format.Field']"
		[global::Java.Interop.JniTypeSignature ("java/text/Format$Field", GenerateJavaPeer=false)]
		public partial class Field : global::Java.Text.IAttributedCharacterIterator.Attribute {
			static readonly JniPeerMembers _members = new JniPeerMembers ("java/text/Format$Field", typeof (Field));

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			protected Field (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
			{
			}

			// Metadata.xml XPath constructor reference: path="/api/package[@name='java.text']/class[@name='Format.Field']/constructor[@name='Format.Field' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[global::Java.Interop.JniConstructorSignature ("(Ljava/lang/String;)V")]
			protected unsafe Field (string? name) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
			{
				const string __id = "(Ljava/lang/String;)V";

				if (PeerReference.IsValid)
					return;

				var native_name = global::Java.Interop.JniEnvironment.Strings.NewString (name);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_name);
					var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
					Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
					_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
				} finally {
					global::Java.Interop.JniObjectReference.Dispose (ref native_name);
				}
			}

		}

		static readonly JniPeerMembers _members = new JniPeerMembers ("java/text/Format", typeof (Format));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		protected Format (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.text']/class[@name='Format']/constructor[@name='Format' and count(parameter)=0]"
		[global::Java.Interop.JniConstructorSignature ("()V")]
		protected unsafe Format () : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "()V";

			if (PeerReference.IsValid)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='Format']/method[@name='clone' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("clone", "()Ljava/lang/Object;")]
		public virtual unsafe global::Java.Lang.Object? Clone ()
		{
			const string __id = "clone.()Ljava/lang/Object;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='Format']/method[@name='format' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
		[global::Java.Interop.JniMethodSignature ("format", "(Ljava/lang/Object;)Ljava/lang/String;")]
		public unsafe string? InvokeFormat (global::Java.Lang.Object? obj)
		{
			const string __id = "format.(Ljava/lang/Object;)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (obj);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Strings.ToString (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (obj);
			}
		}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='Format']/method[@name='format' and count(parameter)=3 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.StringBuffer'] and parameter[3][@type='java.text.FieldPosition']]"
		//public abstract global::Java.Lang.StringBuffer? InvokeFormat (global::Java.Lang.Object? p0, global::Java.Lang.StringBuffer? p1, global::Java.Text.FieldPosition? p2);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='Format']/method[@name='formatToCharacterIterator' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
		[global::Java.Interop.JniMethodSignature ("formatToCharacterIterator", "(Ljava/lang/Object;)Ljava/text/AttributedCharacterIterator;")]
		public virtual unsafe global::Java.Text.IAttributedCharacterIterator? FormatToCharacterIterator (global::Java.Lang.Object? obj)
		{
			const string __id = "formatToCharacterIterator.(Ljava/lang/Object;)Ljava/text/AttributedCharacterIterator;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (obj);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Text.IAttributedCharacterIterator> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (obj);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='Format']/method[@name='parseObject' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::Java.Interop.JniMethodSignature ("parseObject", "(Ljava/lang/String;)Ljava/lang/Object;")]
		public virtual unsafe global::Java.Lang.Object? ParseObject (string? source)
		{
			const string __id = "parseObject.(Ljava/lang/String;)Ljava/lang/Object;";
			var native_source = global::Java.Interop.JniEnvironment.Strings.NewString (source);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_source);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_source);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='Format']/method[@name='parseObject' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.text.ParsePosition']]"
		public abstract global::Java.Lang.Object? ParseObject (string? p0, global::Java.Text.ParsePosition? p1);

	}

	[global::Java.Interop.JniTypeSignature ("java/text/Format", GenerateJavaPeer=false)]
	internal partial class FormatInvoker : Format {
		public FormatInvoker (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		static readonly JniPeerMembers _members = new JniPeerMembers ("java/text/Format", typeof (FormatInvoker));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='Format']/method[@name='format' and count(parameter)=3 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.StringBuffer'] and parameter[3][@type='java.text.FieldPosition']]"
		[global::Java.Interop.JniMethodSignature ("format", "(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;")]
		public override unsafe global::Java.Lang.StringBuffer? InvokeFormat (global::Java.Lang.Object? p0, global::Java.Lang.StringBuffer? p1, global::Java.Text.FieldPosition? p2)
		{
			const string __id = "format.(Ljava/lang/Object;Ljava/lang/StringBuffer;Ljava/text/FieldPosition;)Ljava/lang/StringBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				__args [2] = new JniArgumentValue (p2);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.StringBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (p0);
				global::System.GC.KeepAlive (p1);
				global::System.GC.KeepAlive (p2);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.text']/class[@name='Format']/method[@name='parseObject' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.text.ParsePosition']]"
		[global::Java.Interop.JniMethodSignature ("parseObject", "(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;")]
		public override unsafe global::Java.Lang.Object? ParseObject (string? p0, global::Java.Text.ParsePosition? p1)
		{
			const string __id = "parseObject.(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/lang/Object;";
			var native_p0 = global::Java.Interop.JniEnvironment.Strings.NewString (p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_p0);
				global::System.GC.KeepAlive (p1);
			}
		}

	}
}
