//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Java.Interop;

namespace Java.Util {

	// Metadata.xml XPath class reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']"
	[global::Java.Interop.JniTypeSignature ("java/util/ResourceBundle", GenerateJavaPeer=false, InvokerType=typeof (ResourceBundleInvoker))]
	public abstract partial class ResourceBundle : global::Java.Lang.Object {

		// Metadata.xml XPath field reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/field[@name='parent']"
		protected global::Java.Util.ResourceBundle? Parent {
			get {
				const string __id = "parent.Ljava/util/ResourceBundle;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.ResourceBundle? >(ref __v, JniObjectReferenceOptions.Copy);
			}
			set {
				const string __id = "parent.Ljava/util/ResourceBundle;";

				try {
					_members.InstanceFields.SetValue (__id, this, value?.PeerReference ?? default);
				} finally {
					GC.KeepAlive (value);
				}
			}
		}

		// Metadata.xml XPath class reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle.Control']"
		[global::Java.Interop.JniTypeSignature ("java/util/ResourceBundle$Control", GenerateJavaPeer=false)]
		public partial class Control : global::Java.Lang.Object {

			// Metadata.xml XPath field reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle.Control']/field[@name='FORMAT_CLASS']"
			public static global::Java.Util.IList? FormatClass {
				get {
					const string __id = "FORMAT_CLASS.Ljava/util/List;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.IList? >(ref __v, JniObjectReferenceOptions.Copy);
				}
			}


			// Metadata.xml XPath field reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle.Control']/field[@name='FORMAT_DEFAULT']"
			public static global::Java.Util.IList? FormatDefault {
				get {
					const string __id = "FORMAT_DEFAULT.Ljava/util/List;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.IList? >(ref __v, JniObjectReferenceOptions.Copy);
				}
			}


			// Metadata.xml XPath field reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle.Control']/field[@name='FORMAT_PROPERTIES']"
			public static global::Java.Util.IList? FormatProperties {
				get {
					const string __id = "FORMAT_PROPERTIES.Ljava/util/List;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.IList? >(ref __v, JniObjectReferenceOptions.Copy);
				}
			}

			// Metadata.xml XPath field reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle.Control']/field[@name='TTL_DONT_CACHE']"
			public const long TtlDontCache = (long) -1;

			// Metadata.xml XPath field reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle.Control']/field[@name='TTL_NO_EXPIRATION_CONTROL']"
			public const long TtlNoExpirationControl = (long) -2;

			static readonly JniPeerMembers _members = new JniPeerMembers ("java/util/ResourceBundle$Control", typeof (Control));

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			protected Control (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
			{
			}

			// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle.Control']/constructor[@name='ResourceBundle.Control' and count(parameter)=0]"
			[global::Java.Interop.JniConstructorSignature ("()V")]
			protected unsafe Control () : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
			{
				const string __id = "()V";

				if (PeerReference.IsValid)
					return;

				try {
					var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
					Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
					_members.InstanceMethods.FinishCreateInstance (__id, this, null);
				} finally {
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle.Control']/method[@name='getCandidateLocales' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.util.Locale']]"
			[global::Java.Interop.JniMethodSignature ("getCandidateLocales", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/List;")]
			public virtual unsafe global::Java.Util.IList? GetCandidateLocales (string? baseName, global::Java.Util.Locale? locale)
			{
				const string __id = "getCandidateLocales.(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/List;";
				var native_baseName = global::Java.Interop.JniEnvironment.Strings.NewString (baseName);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [2];
					__args [0] = new JniArgumentValue (native_baseName);
					__args [1] = new JniArgumentValue (locale);
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.IList> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
					global::Java.Interop.JniObjectReference.Dispose (ref native_baseName);
					global::System.GC.KeepAlive (locale);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle.Control']/method[@name='getControl' and count(parameter)=1 and parameter[1][@type='java.util.List&lt;java.lang.String&gt;']]"
			[global::Java.Interop.JniMethodSignature ("getControl", "(Ljava/util/List;)Ljava/util/ResourceBundle$Control;")]
			public static unsafe global::Java.Util.ResourceBundle.Control? GetControl (global::Java.Util.IList? formats)
			{
				const string __id = "getControl.(Ljava/util/List;)Ljava/util/ResourceBundle$Control;";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (formats);
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.ResourceBundle.Control> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
					global::System.GC.KeepAlive (formats);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle.Control']/method[@name='getFallbackLocale' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.util.Locale']]"
			[global::Java.Interop.JniMethodSignature ("getFallbackLocale", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/Locale;")]
			public virtual unsafe global::Java.Util.Locale? GetFallbackLocale (string? baseName, global::Java.Util.Locale? locale)
			{
				const string __id = "getFallbackLocale.(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/Locale;";
				var native_baseName = global::Java.Interop.JniEnvironment.Strings.NewString (baseName);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [2];
					__args [0] = new JniArgumentValue (native_baseName);
					__args [1] = new JniArgumentValue (locale);
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Locale> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
					global::Java.Interop.JniObjectReference.Dispose (ref native_baseName);
					global::System.GC.KeepAlive (locale);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle.Control']/method[@name='getFormats' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[global::Java.Interop.JniMethodSignature ("getFormats", "(Ljava/lang/String;)Ljava/util/List;")]
			public virtual unsafe global::Java.Util.IList? GetFormats (string? baseName)
			{
				const string __id = "getFormats.(Ljava/lang/String;)Ljava/util/List;";
				var native_baseName = global::Java.Interop.JniEnvironment.Strings.NewString (baseName);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_baseName);
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.IList> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
					global::Java.Interop.JniObjectReference.Dispose (ref native_baseName);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle.Control']/method[@name='getNoFallbackControl' and count(parameter)=1 and parameter[1][@type='java.util.List&lt;java.lang.String&gt;']]"
			[global::Java.Interop.JniMethodSignature ("getNoFallbackControl", "(Ljava/util/List;)Ljava/util/ResourceBundle$Control;")]
			public static unsafe global::Java.Util.ResourceBundle.Control? GetNoFallbackControl (global::Java.Util.IList? formats)
			{
				const string __id = "getNoFallbackControl.(Ljava/util/List;)Ljava/util/ResourceBundle$Control;";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (formats);
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.ResourceBundle.Control> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
					global::System.GC.KeepAlive (formats);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle.Control']/method[@name='getTimeToLive' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.util.Locale']]"
			[global::Java.Interop.JniMethodSignature ("getTimeToLive", "(Ljava/lang/String;Ljava/util/Locale;)J")]
			public virtual unsafe long GetTimeToLive (string? baseName, global::Java.Util.Locale? locale)
			{
				const string __id = "getTimeToLive.(Ljava/lang/String;Ljava/util/Locale;)J";
				var native_baseName = global::Java.Interop.JniEnvironment.Strings.NewString (baseName);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [2];
					__args [0] = new JniArgumentValue (native_baseName);
					__args [1] = new JniArgumentValue (locale);
					var __rm = _members.InstanceMethods.InvokeVirtualInt64Method (__id, this, __args);
					return __rm;
				} finally {
					global::Java.Interop.JniObjectReference.Dispose (ref native_baseName);
					global::System.GC.KeepAlive (locale);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle.Control']/method[@name='needsReload' and count(parameter)=6 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.util.Locale'] and parameter[3][@type='java.lang.String'] and parameter[4][@type='java.lang.ClassLoader'] and parameter[5][@type='java.util.ResourceBundle'] and parameter[6][@type='long']]"
			[global::Java.Interop.JniMethodSignature ("needsReload", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle;J)Z")]
			public virtual unsafe bool NeedsReload (string? baseName, global::Java.Util.Locale? locale, string? format, global::Java.Lang.ClassLoader? loader, global::Java.Util.ResourceBundle? bundle, long loadTime)
			{
				const string __id = "needsReload.(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle;J)Z";
				var native_baseName = global::Java.Interop.JniEnvironment.Strings.NewString (baseName);
				var native_format = global::Java.Interop.JniEnvironment.Strings.NewString (format);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [6];
					__args [0] = new JniArgumentValue (native_baseName);
					__args [1] = new JniArgumentValue (locale);
					__args [2] = new JniArgumentValue (native_format);
					__args [3] = new JniArgumentValue (loader);
					__args [4] = new JniArgumentValue (bundle);
					__args [5] = new JniArgumentValue (loadTime);
					var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
					return __rm;
				} finally {
					global::Java.Interop.JniObjectReference.Dispose (ref native_baseName);
					global::Java.Interop.JniObjectReference.Dispose (ref native_format);
					global::System.GC.KeepAlive (locale);
					global::System.GC.KeepAlive (loader);
					global::System.GC.KeepAlive (bundle);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle.Control']/method[@name='newBundle' and count(parameter)=5 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.util.Locale'] and parameter[3][@type='java.lang.String'] and parameter[4][@type='java.lang.ClassLoader'] and parameter[5][@type='boolean']]"
			[global::Java.Interop.JniMethodSignature ("newBundle", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Z)Ljava/util/ResourceBundle;")]
			public virtual unsafe global::Java.Util.ResourceBundle? NewBundle (string? baseName, global::Java.Util.Locale? locale, string? format, global::Java.Lang.ClassLoader? loader, bool reload)
			{
				const string __id = "newBundle.(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/String;Ljava/lang/ClassLoader;Z)Ljava/util/ResourceBundle;";
				var native_baseName = global::Java.Interop.JniEnvironment.Strings.NewString (baseName);
				var native_format = global::Java.Interop.JniEnvironment.Strings.NewString (format);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [5];
					__args [0] = new JniArgumentValue (native_baseName);
					__args [1] = new JniArgumentValue (locale);
					__args [2] = new JniArgumentValue (native_format);
					__args [3] = new JniArgumentValue (loader);
					__args [4] = new JniArgumentValue (reload ? (sbyte)1 : (sbyte)0);
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.ResourceBundle> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
					global::Java.Interop.JniObjectReference.Dispose (ref native_baseName);
					global::Java.Interop.JniObjectReference.Dispose (ref native_format);
					global::System.GC.KeepAlive (locale);
					global::System.GC.KeepAlive (loader);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle.Control']/method[@name='toBundleName' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.util.Locale']]"
			[global::Java.Interop.JniMethodSignature ("toBundleName", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;")]
			public virtual unsafe string? ToBundleName (string? baseName, global::Java.Util.Locale? locale)
			{
				const string __id = "toBundleName.(Ljava/lang/String;Ljava/util/Locale;)Ljava/lang/String;";
				var native_baseName = global::Java.Interop.JniEnvironment.Strings.NewString (baseName);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [2];
					__args [0] = new JniArgumentValue (native_baseName);
					__args [1] = new JniArgumentValue (locale);
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
					return global::Java.Interop.JniEnvironment.Strings.ToString (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
					global::Java.Interop.JniObjectReference.Dispose (ref native_baseName);
					global::System.GC.KeepAlive (locale);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle.Control']/method[@name='toResourceName' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
			[global::Java.Interop.JniMethodSignature ("toResourceName", "(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;")]
			public unsafe string? ToResourceName (string? bundleName, string? suffix)
			{
				const string __id = "toResourceName.(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
				var native_bundleName = global::Java.Interop.JniEnvironment.Strings.NewString (bundleName);
				var native_suffix = global::Java.Interop.JniEnvironment.Strings.NewString (suffix);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [2];
					__args [0] = new JniArgumentValue (native_bundleName);
					__args [1] = new JniArgumentValue (native_suffix);
					var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
					return global::Java.Interop.JniEnvironment.Strings.ToString (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
					global::Java.Interop.JniObjectReference.Dispose (ref native_bundleName);
					global::Java.Interop.JniObjectReference.Dispose (ref native_suffix);
				}
			}

		}

		static readonly JniPeerMembers _members = new JniPeerMembers ("java/util/ResourceBundle", typeof (ResourceBundle));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		protected ResourceBundle (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/constructor[@name='ResourceBundle' and count(parameter)=0]"
		[global::Java.Interop.JniConstructorSignature ("()V")]
		public unsafe ResourceBundle () : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "()V";

			if (PeerReference.IsValid)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		public virtual unsafe string? BaseBundleName {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='getBaseBundleName' and count(parameter)=0]"
			get {
				const string __id = "getBaseBundleName.()Ljava/lang/String;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Java.Interop.JniEnvironment.Strings.ToString (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
				}
			}
		}

		public abstract global::Java.Util.IEnumeration? Keys {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='getKeys' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("getKeys", "()Ljava/util/Enumeration;")]
			get; 
		}

		public virtual unsafe global::Java.Util.Locale? Locale {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='getLocale' and count(parameter)=0]"
			get {
				const string __id = "getLocale.()Ljava/util/Locale;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Locale> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='clearCache' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("clearCache", "()V")]
		public static unsafe void ClearCache ()
		{
			const string __id = "clearCache.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='clearCache' and count(parameter)=1 and parameter[1][@type='java.lang.ClassLoader']]"
		[global::Java.Interop.JniMethodSignature ("clearCache", "(Ljava/lang/ClassLoader;)V")]
		public static unsafe void ClearCache (global::Java.Lang.ClassLoader? loader)
		{
			const string __id = "clearCache.(Ljava/lang/ClassLoader;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (loader);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (loader);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='containsKey' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::Java.Interop.JniMethodSignature ("containsKey", "(Ljava/lang/String;)Z")]
		public virtual unsafe bool ContainsKey (string? key)
		{
			const string __id = "containsKey.(Ljava/lang/String;)Z";
			var native_key = global::Java.Interop.JniEnvironment.Strings.NewString (key);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_key);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_key);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='getBundle' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::Java.Interop.JniMethodSignature ("getBundle", "(Ljava/lang/String;)Ljava/util/ResourceBundle;")]
		public static unsafe global::Java.Util.ResourceBundle? GetBundle (string? baseName)
		{
			const string __id = "getBundle.(Ljava/lang/String;)Ljava/util/ResourceBundle;";
			var native_baseName = global::Java.Interop.JniEnvironment.Strings.NewString (baseName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_baseName);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.ResourceBundle> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_baseName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='getBundle' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.Module']]"
		[global::Java.Interop.JniMethodSignature ("getBundle", "(Ljava/lang/String;Ljava/lang/Module;)Ljava/util/ResourceBundle;")]
		public static unsafe global::Java.Util.ResourceBundle? GetBundle (string? baseName, global::Java.Lang.Module? module)
		{
			const string __id = "getBundle.(Ljava/lang/String;Ljava/lang/Module;)Ljava/util/ResourceBundle;";
			var native_baseName = global::Java.Interop.JniEnvironment.Strings.NewString (baseName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_baseName);
				__args [1] = new JniArgumentValue (module);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.ResourceBundle> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_baseName);
				global::System.GC.KeepAlive (module);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='getBundle' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.util.Locale']]"
		[global::Java.Interop.JniMethodSignature ("getBundle", "(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/ResourceBundle;")]
		public static unsafe global::Java.Util.ResourceBundle? GetBundle (string? baseName, global::Java.Util.Locale? locale)
		{
			const string __id = "getBundle.(Ljava/lang/String;Ljava/util/Locale;)Ljava/util/ResourceBundle;";
			var native_baseName = global::Java.Interop.JniEnvironment.Strings.NewString (baseName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_baseName);
				__args [1] = new JniArgumentValue (locale);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.ResourceBundle> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_baseName);
				global::System.GC.KeepAlive (locale);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='getBundle' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.util.Locale'] and parameter[3][@type='java.lang.ClassLoader']]"
		[global::Java.Interop.JniMethodSignature ("getBundle", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;")]
		public static unsafe global::Java.Util.ResourceBundle? GetBundle (string? baseName, global::Java.Util.Locale? locale, global::Java.Lang.ClassLoader? loader)
		{
			const string __id = "getBundle.(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;)Ljava/util/ResourceBundle;";
			var native_baseName = global::Java.Interop.JniEnvironment.Strings.NewString (baseName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_baseName);
				__args [1] = new JniArgumentValue (locale);
				__args [2] = new JniArgumentValue (loader);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.ResourceBundle> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_baseName);
				global::System.GC.KeepAlive (locale);
				global::System.GC.KeepAlive (loader);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='getBundle' and count(parameter)=4 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.util.Locale'] and parameter[3][@type='java.lang.ClassLoader'] and parameter[4][@type='java.util.ResourceBundle.Control']]"
		[global::Java.Interop.JniMethodSignature ("getBundle", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;")]
		public static unsafe global::Java.Util.ResourceBundle? GetBundle (string? baseName, global::Java.Util.Locale? targetLocale, global::Java.Lang.ClassLoader? loader, global::Java.Util.ResourceBundle.Control? control)
		{
			const string __id = "getBundle.(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/ClassLoader;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;";
			var native_baseName = global::Java.Interop.JniEnvironment.Strings.NewString (baseName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_baseName);
				__args [1] = new JniArgumentValue (targetLocale);
				__args [2] = new JniArgumentValue (loader);
				__args [3] = new JniArgumentValue (control);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.ResourceBundle> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_baseName);
				global::System.GC.KeepAlive (targetLocale);
				global::System.GC.KeepAlive (loader);
				global::System.GC.KeepAlive (control);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='getBundle' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.util.Locale'] and parameter[3][@type='java.lang.Module']]"
		[global::Java.Interop.JniMethodSignature ("getBundle", "(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/Module;)Ljava/util/ResourceBundle;")]
		public static unsafe global::Java.Util.ResourceBundle? GetBundle (string? baseName, global::Java.Util.Locale? targetLocale, global::Java.Lang.Module? module)
		{
			const string __id = "getBundle.(Ljava/lang/String;Ljava/util/Locale;Ljava/lang/Module;)Ljava/util/ResourceBundle;";
			var native_baseName = global::Java.Interop.JniEnvironment.Strings.NewString (baseName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_baseName);
				__args [1] = new JniArgumentValue (targetLocale);
				__args [2] = new JniArgumentValue (module);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.ResourceBundle> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_baseName);
				global::System.GC.KeepAlive (targetLocale);
				global::System.GC.KeepAlive (module);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='getBundle' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.util.Locale'] and parameter[3][@type='java.util.ResourceBundle.Control']]"
		[global::Java.Interop.JniMethodSignature ("getBundle", "(Ljava/lang/String;Ljava/util/Locale;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;")]
		public static unsafe global::Java.Util.ResourceBundle? GetBundle (string? baseName, global::Java.Util.Locale? targetLocale, global::Java.Util.ResourceBundle.Control? control)
		{
			const string __id = "getBundle.(Ljava/lang/String;Ljava/util/Locale;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;";
			var native_baseName = global::Java.Interop.JniEnvironment.Strings.NewString (baseName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_baseName);
				__args [1] = new JniArgumentValue (targetLocale);
				__args [2] = new JniArgumentValue (control);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.ResourceBundle> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_baseName);
				global::System.GC.KeepAlive (targetLocale);
				global::System.GC.KeepAlive (control);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='getBundle' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.util.ResourceBundle.Control']]"
		[global::Java.Interop.JniMethodSignature ("getBundle", "(Ljava/lang/String;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;")]
		public static unsafe global::Java.Util.ResourceBundle? GetBundle (string? baseName, global::Java.Util.ResourceBundle.Control? control)
		{
			const string __id = "getBundle.(Ljava/lang/String;Ljava/util/ResourceBundle$Control;)Ljava/util/ResourceBundle;";
			var native_baseName = global::Java.Interop.JniEnvironment.Strings.NewString (baseName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_baseName);
				__args [1] = new JniArgumentValue (control);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.ResourceBundle> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_baseName);
				global::System.GC.KeepAlive (control);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='getObject' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::Java.Interop.JniMethodSignature ("getObject", "(Ljava/lang/String;)Ljava/lang/Object;")]
		public unsafe global::Java.Lang.Object? GetObject (string? key)
		{
			const string __id = "getObject.(Ljava/lang/String;)Ljava/lang/Object;";
			var native_key = global::Java.Interop.JniEnvironment.Strings.NewString (key);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_key);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_key);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='getString' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::Java.Interop.JniMethodSignature ("getString", "(Ljava/lang/String;)Ljava/lang/String;")]
		public unsafe string? GetString (string? key)
		{
			const string __id = "getString.(Ljava/lang/String;)Ljava/lang/String;";
			var native_key = global::Java.Interop.JniEnvironment.Strings.NewString (key);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_key);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Strings.ToString (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_key);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='getStringArray' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::Java.Interop.JniMethodSignature ("getStringArray", "(Ljava/lang/String;)[Ljava/lang/String;")]
		public unsafe global::Java.Interop.JavaObjectArray<string>? GetStringArray (string? key)
		{
			const string __id = "getStringArray.(Ljava/lang/String;)[Ljava/lang/String;";
			var native_key = global::Java.Interop.JniEnvironment.Strings.NewString (key);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_key);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Interop.JavaObjectArray<string>>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_key);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='handleGetObject' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		protected abstract global::Java.Lang.Object? HandleGetObject (string? p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='handleKeySet' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("handleKeySet", "()Ljava/util/Set;")]
		protected virtual unsafe global::Java.Util.ISet? HandleKeySet ()
		{
			const string __id = "handleKeySet.()Ljava/util/Set;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.ISet> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='keySet' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("keySet", "()Ljava/util/Set;")]
		public virtual unsafe global::Java.Util.ISet? KeySet ()
		{
			const string __id = "keySet.()Ljava/util/Set;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.ISet> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='setParent' and count(parameter)=1 and parameter[1][@type='java.util.ResourceBundle']]"
		[global::Java.Interop.JniMethodSignature ("setParent", "(Ljava/util/ResourceBundle;)V")]
		protected virtual unsafe void SetParent (global::Java.Util.ResourceBundle? parent)
		{
			const string __id = "setParent.(Ljava/util/ResourceBundle;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (parent);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (parent);
			}
		}

	}

	[global::Java.Interop.JniTypeSignature ("java/util/ResourceBundle", GenerateJavaPeer=false)]
	internal partial class ResourceBundleInvoker : ResourceBundle {
		public ResourceBundleInvoker (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		static readonly JniPeerMembers _members = new JniPeerMembers ("java/util/ResourceBundle", typeof (ResourceBundleInvoker));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		public override unsafe global::Java.Util.IEnumeration? Keys {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='getKeys' and count(parameter)=0]"
			get {
				const string __id = "getKeys.()Ljava/util/Enumeration;";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.IEnumeration> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='ResourceBundle']/method[@name='handleGetObject' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::Java.Interop.JniMethodSignature ("handleGetObject", "(Ljava/lang/String;)Ljava/lang/Object;")]
		protected override unsafe global::Java.Lang.Object? HandleGetObject (string? p0)
		{
			const string __id = "handleGetObject.(Ljava/lang/String;)Ljava/lang/Object;";
			var native_p0 = global::Java.Interop.JniEnvironment.Strings.NewString (p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_p0);
			}
		}

	}
}
