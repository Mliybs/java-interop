//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Java.Interop;

namespace Java.Util.Concurrent {

	// Metadata.xml XPath class reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']"
	[global::Java.Interop.JniTypeSignature ("java/util/concurrent/ConcurrentHashMap", GenerateJavaPeer=false)]
	[global::Java.Interop.JavaTypeParameters (new string [] {"K", "V"})]
	public partial class ConcurrentHashMap : global::Java.Util.AbstractMap, global::Java.IO.ISerializable, global::Java.Util.Concurrent.IConcurrentMap {
		// Metadata.xml XPath class reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']"
		[global::Java.Interop.JniTypeSignature ("java/util/concurrent/ConcurrentHashMap$KeySetView", GenerateJavaPeer=false)]
		[global::Java.Interop.JavaTypeParameters (new string [] {"K", "V"})]
		public partial class KeySetView : global::Java.Lang.Object, global::Java.IO.ISerializable, global::Java.Util.ISet {
			static readonly JniPeerMembers _members = new JniPeerMembers ("java/util/concurrent/ConcurrentHashMap$KeySetView", typeof (KeySetView));

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			protected KeySetView (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
			{
			}

			public unsafe bool IsEmpty {
				// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='isEmpty' and count(parameter)=0]"
				get {
					const string __id = "isEmpty.()Z";
					try {
						var __rm = _members.InstanceMethods.InvokeNonvirtualBooleanMethod (__id, this, null);
						return __rm;
					} finally {
					}
				}
			}

			public virtual unsafe global::Java.Util.Concurrent.ConcurrentHashMap? Map {
				// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='getMap' and count(parameter)=0]"
				get {
					const string __id = "getMap.()Ljava/util/concurrent/ConcurrentHashMap;";
					try {
						var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
						return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Concurrent.ConcurrentHashMap> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
					} finally {
					}
				}
			}

			public virtual unsafe global::Java.Lang.Object? MappedValue {
				// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='getMappedValue' and count(parameter)=0]"
				get {
					const string __id = "getMappedValue.()Ljava/lang/Object;";
					try {
						var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
						return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
					} finally {
					}
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='add' and count(parameter)=1 and parameter[1][@type='K']]"
			[global::Java.Interop.JniMethodSignature ("add", "(Ljava/lang/Object;)Z")]
			public virtual unsafe bool Add (global::Java.Lang.Object? e)
			{
				const string __id = "add.(Ljava/lang/Object;)Z";
				var native_e = (e?.PeerReference ?? default);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_e);
					var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
					return __rm;
				} finally {
					global::System.GC.KeepAlive (e);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='addAll' and count(parameter)=1 and parameter[1][@type='java.util.Collection&lt;? extends K&gt;']]"
			[global::Java.Interop.JniMethodSignature ("addAll", "(Ljava/util/Collection;)Z")]
			public virtual unsafe bool AddAll (global::Java.Util.ICollection? c)
			{
				const string __id = "addAll.(Ljava/util/Collection;)Z";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (c);
					var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
					return __rm;
				} finally {
					global::System.GC.KeepAlive (c);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='contains' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
			[global::Java.Interop.JniMethodSignature ("contains", "(Ljava/lang/Object;)Z")]
			public virtual unsafe bool Contains (global::Java.Lang.Object? o)
			{
				const string __id = "contains.(Ljava/lang/Object;)Z";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (o);
					var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
					return __rm;
				} finally {
					global::System.GC.KeepAlive (o);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='forEach' and count(parameter)=1 and parameter[1][@type='java.util.function.Consumer&lt;? super K&gt;']]"
			[global::Java.Interop.JniMethodSignature ("forEach", "(Ljava/util/function/Consumer;)V")]
			public virtual unsafe void ForEach (global::Java.Util.Function.IConsumer? action)
			{
				const string __id = "forEach.(Ljava/util/function/Consumer;)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (action);
					_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
				} finally {
					global::System.GC.KeepAlive (action);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='iterator' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("iterator", "()Ljava/util/Iterator;")]
			public virtual unsafe global::Java.Util.IIterator? Iterator ()
			{
				const string __id = "iterator.()Ljava/util/Iterator;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.IIterator> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='remove' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
			[global::Java.Interop.JniMethodSignature ("remove", "(Ljava/lang/Object;)Z")]
			public virtual unsafe bool Remove (global::Java.Lang.Object? o)
			{
				const string __id = "remove.(Ljava/lang/Object;)Z";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (o);
					var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
					return __rm;
				} finally {
					global::System.GC.KeepAlive (o);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='removeAll' and count(parameter)=1 and parameter[1][@type='java.util.Collection']]"
			[global::Java.Interop.JniMethodSignature ("removeAll", "(Ljava/util/Collection;)Z")]
			public virtual unsafe bool RemoveAll (global::Java.Util.ICollection? p0)
			{
				const string __id = "removeAll.(Ljava/util/Collection;)Z";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (p0);
					var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
					return __rm;
				} finally {
					global::System.GC.KeepAlive (p0);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='clear' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("clear", "()V")]
			public unsafe void Clear ()
			{
				const string __id = "clear.()V";
				try {
					_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, null);
				} finally {
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='containsAll' and count(parameter)=1 and parameter[1][@type='java.util.Collection&lt;?&gt;']]"
			[global::Java.Interop.JniMethodSignature ("containsAll", "(Ljava/util/Collection;)Z")]
			public unsafe bool ContainsAll (global::Java.Util.ICollection? c)
			{
				const string __id = "containsAll.(Ljava/util/Collection;)Z";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (c);
					var __rm = _members.InstanceMethods.InvokeNonvirtualBooleanMethod (__id, this, __args);
					return __rm;
				} finally {
					global::System.GC.KeepAlive (c);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='getMap' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("getMap", "()Ljava/util/concurrent/ConcurrentHashMap;")]
			public virtual unsafe global::Java.Util.Concurrent.ConcurrentHashMap? GetMap ()
			{
				const string __id = "getMap.()Ljava/util/concurrent/ConcurrentHashMap;";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Concurrent.ConcurrentHashMap> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
				}
			}

			//// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='removeAll' and count(parameter)=1 and parameter[1][@type='java.util.Collection&lt;?&gt;']]"
			//[global::Java.Interop.JniMethodSignature ("removeAll", "(Ljava/util/Collection;)Z")]
			//public virtual unsafe bool RemoveAll (global::Java.Util.ICollection? c)
			//{
			//	const string __id = "removeAll.(Ljava/util/Collection;)Z";
			//	try {
			//		JniArgumentValue* __args = stackalloc JniArgumentValue [1];
			//		__args [0] = new JniArgumentValue (c);
			//		var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
			//		return __rm;
			//	} finally {
			//		global::System.GC.KeepAlive (c);
			//	}
			//}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='retainAll' and count(parameter)=1 and parameter[1][@type='java.util.Collection&lt;?&gt;']]"
			[global::Java.Interop.JniMethodSignature ("retainAll", "(Ljava/util/Collection;)Z")]
			public unsafe bool RetainAll (global::Java.Util.ICollection? c)
			{
				const string __id = "retainAll.(Ljava/util/Collection;)Z";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (c);
					var __rm = _members.InstanceMethods.InvokeNonvirtualBooleanMethod (__id, this, __args);
					return __rm;
				} finally {
					global::System.GC.KeepAlive (c);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='size' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("size", "()I")]
			public unsafe int Size ()
			{
				const string __id = "size.()I";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, null);
					return __rm;
				} finally {
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='toArray' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("toArray", "()[Ljava/lang/Object;")]
			public unsafe global::Java.Interop.JavaObjectArray<global::Java.Lang.Object>? ToArray ()
			{
				const string __id = "toArray.()[Ljava/lang/Object;";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Interop.JavaObjectArray<Java.Lang.Object>>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='toArray' and count(parameter)=1 and parameter[1][@type='T[]']]"
			[global::Java.Interop.JniMethodSignature ("toArray", "([Ljava/lang/Object;)[Ljava/lang/Object;")]
			[global::Java.Interop.JavaTypeParameters (new string [] {"T"})]
			public unsafe global::Java.Interop.JavaObjectArray<global::Java.Lang.Object>? ToArray (global::Java.Interop.JavaObjectArray<global::Java.Lang.Object>? a)
			{
				const string __id = "toArray.([Ljava/lang/Object;)[Ljava/lang/Object;";
				var native_a = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalObjectArray<global::Java.Lang.Object> (a);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_a);
					var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Interop.JavaObjectArray<Java.Lang.Object>>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
					if (native_a != null) {
						native_a.DisposeUnlessReferenced ();
					}
					global::System.GC.KeepAlive (a);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap.KeySetView']/method[@name='toString' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("toString", "()Ljava/lang/String;")]
			public override sealed unsafe string? ToString ()
			{
				const string __id = "toString.()Ljava/lang/String;";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
					return global::Java.Interop.JniEnvironment.Strings.ToString (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
				}
			}

		}

		static readonly JniPeerMembers _members = new JniPeerMembers ("java/util/concurrent/ConcurrentHashMap", typeof (ConcurrentHashMap));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		protected ConcurrentHashMap (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/constructor[@name='ConcurrentHashMap' and count(parameter)=0]"
		[global::Java.Interop.JniConstructorSignature ("()V")]
		public unsafe ConcurrentHashMap () : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "()V";

			if (PeerReference.IsValid)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/constructor[@name='ConcurrentHashMap' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniConstructorSignature ("(I)V")]
		public unsafe ConcurrentHashMap (int initialCapacity) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(I)V";

			if (PeerReference.IsValid)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (initialCapacity);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/constructor[@name='ConcurrentHashMap' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='float']]"
		[global::Java.Interop.JniConstructorSignature ("(IF)V")]
		public unsafe ConcurrentHashMap (int initialCapacity, float loadFactor) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(IF)V";

			if (PeerReference.IsValid)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (initialCapacity);
				__args [1] = new JniArgumentValue (loadFactor);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/constructor[@name='ConcurrentHashMap' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='float'] and parameter[3][@type='int']]"
		[global::Java.Interop.JniConstructorSignature ("(IFI)V")]
		public unsafe ConcurrentHashMap (int initialCapacity, float loadFactor, int concurrencyLevel) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(IFI)V";

			if (PeerReference.IsValid)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (initialCapacity);
				__args [1] = new JniArgumentValue (loadFactor);
				__args [2] = new JniArgumentValue (concurrencyLevel);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/constructor[@name='ConcurrentHashMap' and count(parameter)=1 and parameter[1][@type='java.util.Map&lt;? extends K, ? extends V&gt;']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/util/Map;)V")]
		public unsafe ConcurrentHashMap (global::Java.Util.IMap? m) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/util/Map;)V";

			if (PeerReference.IsValid)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (m);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (m);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='compute' and count(parameter)=2 and parameter[1][@type='K'] and parameter[2][@type='java.util.function.BiFunction&lt;? super K, ? super V, ? extends V&gt;']]"
		[global::Java.Interop.JniMethodSignature ("compute", "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;")]
		public virtual unsafe global::Java.Lang.Object? Compute (global::Java.Lang.Object? key, global::Java.Util.Function.IBiFunction? remappingFunction)
		{
			const string __id = "compute.(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;";
			var native_key = (key?.PeerReference ?? default);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_key);
				__args [1] = new JniArgumentValue (remappingFunction);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (key);
				global::System.GC.KeepAlive (remappingFunction);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='computeIfAbsent' and count(parameter)=2 and parameter[1][@type='K'] and parameter[2][@type='java.util.function.Function&lt;? super K, ? extends V&gt;']]"
		[global::Java.Interop.JniMethodSignature ("computeIfAbsent", "(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;")]
		public virtual unsafe global::Java.Lang.Object? ComputeIfAbsent (global::Java.Lang.Object? key, global::Java.Util.Function.IFunction? mappingFunction)
		{
			const string __id = "computeIfAbsent.(Ljava/lang/Object;Ljava/util/function/Function;)Ljava/lang/Object;";
			var native_key = (key?.PeerReference ?? default);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_key);
				__args [1] = new JniArgumentValue (mappingFunction);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (key);
				global::System.GC.KeepAlive (mappingFunction);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='computeIfPresent' and count(parameter)=2 and parameter[1][@type='K'] and parameter[2][@type='java.util.function.BiFunction&lt;? super K, ? super V, ? extends V&gt;']]"
		[global::Java.Interop.JniMethodSignature ("computeIfPresent", "(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;")]
		public virtual unsafe global::Java.Lang.Object? ComputeIfPresent (global::Java.Lang.Object? key, global::Java.Util.Function.IBiFunction? remappingFunction)
		{
			const string __id = "computeIfPresent.(Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;";
			var native_key = (key?.PeerReference ?? default);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_key);
				__args [1] = new JniArgumentValue (remappingFunction);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (key);
				global::System.GC.KeepAlive (remappingFunction);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='contains' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
		[global::Java.Interop.JniMethodSignature ("contains", "(Ljava/lang/Object;)Z")]
		public virtual unsafe bool Contains (global::Java.Lang.Object? value)
		{
			const string __id = "contains.(Ljava/lang/Object;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (value);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (value);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='elements' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("elements", "()Ljava/util/Enumeration;")]
		public virtual unsafe global::Java.Util.IEnumeration? Elements ()
		{
			const string __id = "elements.()Ljava/util/Enumeration;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.IEnumeration> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='entrySet' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("entrySet", "()Ljava/util/Set;")]
		public override unsafe global::Java.Util.ISet? EntrySet ()
		{
			const string __id = "entrySet.()Ljava/util/Set;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.ISet> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='forEach' and count(parameter)=1 and parameter[1][@type='java.util.function.BiConsumer&lt;? super K, ? super V&gt;']]"
		[global::Java.Interop.JniMethodSignature ("forEach", "(Ljava/util/function/BiConsumer;)V")]
		public virtual unsafe void ForEach (global::Java.Util.Function.IBiConsumer? action)
		{
			const string __id = "forEach.(Ljava/util/function/BiConsumer;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (action);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (action);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='forEach' and count(parameter)=2 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.BiConsumer&lt;? super K, ? super V&gt;']]"
		[global::Java.Interop.JniMethodSignature ("forEach", "(JLjava/util/function/BiConsumer;)V")]
		public virtual unsafe void ForEach (long parallelismThreshold, global::Java.Util.Function.IBiConsumer? action)
		{
			const string __id = "forEach.(JLjava/util/function/BiConsumer;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (action);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (action);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='forEach' and count(parameter)=3 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.BiFunction&lt;? super K, ? super V, ? extends U&gt;'] and parameter[3][@type='java.util.function.Consumer&lt;? super U&gt;']]"
		[global::Java.Interop.JniMethodSignature ("forEach", "(JLjava/util/function/BiFunction;Ljava/util/function/Consumer;)V")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"U"})]
		public virtual unsafe void ForEach (long parallelismThreshold, global::Java.Util.Function.IBiFunction? transformer, global::Java.Util.Function.IConsumer? action)
		{
			const string __id = "forEach.(JLjava/util/function/BiFunction;Ljava/util/function/Consumer;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (action);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (action);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='forEachEntry' and count(parameter)=2 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.Consumer&lt;? super java.util.Map.Entry&lt;K, V&gt;&gt;']]"
		[global::Java.Interop.JniMethodSignature ("forEachEntry", "(JLjava/util/function/Consumer;)V")]
		public virtual unsafe void ForEachEntry (long parallelismThreshold, global::Java.Util.Function.IConsumer? action)
		{
			const string __id = "forEachEntry.(JLjava/util/function/Consumer;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (action);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (action);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='forEachEntry' and count(parameter)=3 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.Function&lt;java.util.Map.Entry&lt;K, V&gt;, ? extends U&gt;'] and parameter[3][@type='java.util.function.Consumer&lt;? super U&gt;']]"
		[global::Java.Interop.JniMethodSignature ("forEachEntry", "(JLjava/util/function/Function;Ljava/util/function/Consumer;)V")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"U"})]
		public virtual unsafe void ForEachEntry (long parallelismThreshold, global::Java.Util.Function.IFunction? transformer, global::Java.Util.Function.IConsumer? action)
		{
			const string __id = "forEachEntry.(JLjava/util/function/Function;Ljava/util/function/Consumer;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (action);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (action);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='forEachKey' and count(parameter)=2 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.Consumer&lt;? super K&gt;']]"
		[global::Java.Interop.JniMethodSignature ("forEachKey", "(JLjava/util/function/Consumer;)V")]
		public virtual unsafe void ForEachKey (long parallelismThreshold, global::Java.Util.Function.IConsumer? action)
		{
			const string __id = "forEachKey.(JLjava/util/function/Consumer;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (action);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (action);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='forEachKey' and count(parameter)=3 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.Function&lt;? super K, ? extends U&gt;'] and parameter[3][@type='java.util.function.Consumer&lt;? super U&gt;']]"
		[global::Java.Interop.JniMethodSignature ("forEachKey", "(JLjava/util/function/Function;Ljava/util/function/Consumer;)V")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"U"})]
		public virtual unsafe void ForEachKey (long parallelismThreshold, global::Java.Util.Function.IFunction? transformer, global::Java.Util.Function.IConsumer? action)
		{
			const string __id = "forEachKey.(JLjava/util/function/Function;Ljava/util/function/Consumer;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (action);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (action);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='forEachValue' and count(parameter)=2 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.Consumer&lt;? super V&gt;']]"
		[global::Java.Interop.JniMethodSignature ("forEachValue", "(JLjava/util/function/Consumer;)V")]
		public virtual unsafe void ForEachValue (long parallelismThreshold, global::Java.Util.Function.IConsumer? action)
		{
			const string __id = "forEachValue.(JLjava/util/function/Consumer;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (action);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (action);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='forEachValue' and count(parameter)=3 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.Function&lt;? super V, ? extends U&gt;'] and parameter[3][@type='java.util.function.Consumer&lt;? super U&gt;']]"
		[global::Java.Interop.JniMethodSignature ("forEachValue", "(JLjava/util/function/Function;Ljava/util/function/Consumer;)V")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"U"})]
		public virtual unsafe void ForEachValue (long parallelismThreshold, global::Java.Util.Function.IFunction? transformer, global::Java.Util.Function.IConsumer? action)
		{
			const string __id = "forEachValue.(JLjava/util/function/Function;Ljava/util/function/Consumer;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (action);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (action);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='getOrDefault' and count(parameter)=2 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='V']]"
		[global::Java.Interop.JniMethodSignature ("getOrDefault", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")]
		public virtual unsafe global::Java.Lang.Object? GetOrDefault (global::Java.Lang.Object? key, global::Java.Lang.Object? defaultValue)
		{
			const string __id = "getOrDefault.(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;";
			var native_defaultValue = (defaultValue?.PeerReference ?? default);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (key);
				__args [1] = new JniArgumentValue (native_defaultValue);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (key);
				global::System.GC.KeepAlive (defaultValue);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='keySet' and count(parameter)=1 and parameter[1][@type='V']]"
		[global::Java.Interop.JniMethodSignature ("keySet", "(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentHashMap$KeySetView;")]
		public virtual unsafe global::Java.Util.Concurrent.ConcurrentHashMap.KeySetView? KeySet (global::Java.Lang.Object? mappedValue)
		{
			const string __id = "keySet.(Ljava/lang/Object;)Ljava/util/concurrent/ConcurrentHashMap$KeySetView;";
			var native_mappedValue = (mappedValue?.PeerReference ?? default);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_mappedValue);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Concurrent.ConcurrentHashMap.KeySetView> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (mappedValue);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='keys' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("keys", "()Ljava/util/Enumeration;")]
		public virtual unsafe global::Java.Util.IEnumeration? Keys ()
		{
			const string __id = "keys.()Ljava/util/Enumeration;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.IEnumeration> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='mappingCount' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("mappingCount", "()J")]
		public virtual unsafe long MappingCount ()
		{
			const string __id = "mappingCount.()J";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualInt64Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='merge' and count(parameter)=3 and parameter[1][@type='K'] and parameter[2][@type='V'] and parameter[3][@type='java.util.function.BiFunction&lt;? super V, ? super V, ? extends V&gt;']]"
		[global::Java.Interop.JniMethodSignature ("merge", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;")]
		public virtual unsafe global::Java.Lang.Object? Merge (global::Java.Lang.Object? key, global::Java.Lang.Object? value, global::Java.Util.Function.IBiFunction? remappingFunction)
		{
			const string __id = "merge.(Ljava/lang/Object;Ljava/lang/Object;Ljava/util/function/BiFunction;)Ljava/lang/Object;";
			var native_key = (key?.PeerReference ?? default);
			var native_value = (value?.PeerReference ?? default);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_key);
				__args [1] = new JniArgumentValue (native_value);
				__args [2] = new JniArgumentValue (remappingFunction);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (key);
				global::System.GC.KeepAlive (value);
				global::System.GC.KeepAlive (remappingFunction);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='newKeySet' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("newKeySet", "()Ljava/util/concurrent/ConcurrentHashMap$KeySetView;")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"K"})]
		public static unsafe global::Java.Util.Concurrent.ConcurrentHashMap.KeySetView? NewKeySet ()
		{
			const string __id = "newKeySet.()Ljava/util/concurrent/ConcurrentHashMap$KeySetView;";
			try {
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Concurrent.ConcurrentHashMap.KeySetView> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='newKeySet' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("newKeySet", "(I)Ljava/util/concurrent/ConcurrentHashMap$KeySetView;")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"K"})]
		public static unsafe global::Java.Util.Concurrent.ConcurrentHashMap.KeySetView? NewKeySet (int initialCapacity)
		{
			const string __id = "newKeySet.(I)Ljava/util/concurrent/ConcurrentHashMap$KeySetView;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (initialCapacity);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Concurrent.ConcurrentHashMap.KeySetView> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='putIfAbsent' and count(parameter)=2 and parameter[1][@type='K'] and parameter[2][@type='V']]"
		[global::Java.Interop.JniMethodSignature ("putIfAbsent", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")]
		public virtual unsafe global::Java.Lang.Object? PutIfAbsent (global::Java.Lang.Object? key, global::Java.Lang.Object? value)
		{
			const string __id = "putIfAbsent.(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;";
			var native_key = (key?.PeerReference ?? default);
			var native_value = (value?.PeerReference ?? default);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_key);
				__args [1] = new JniArgumentValue (native_value);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (key);
				global::System.GC.KeepAlive (value);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduce' and count(parameter)=3 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.BiFunction&lt;? super K, ? super V, ? extends U&gt;'] and parameter[3][@type='java.util.function.BiFunction&lt;? super U, ? super U, ? extends U&gt;']]"
		[global::Java.Interop.JniMethodSignature ("reduce", "(JLjava/util/function/BiFunction;Ljava/util/function/BiFunction;)Ljava/lang/Object;")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"U"})]
		public virtual unsafe global::Java.Lang.Object? Reduce (long parallelismThreshold, global::Java.Util.Function.IBiFunction? transformer, global::Java.Util.Function.IBiFunction? reducer)
		{
			const string __id = "reduce.(JLjava/util/function/BiFunction;Ljava/util/function/BiFunction;)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduceEntries' and count(parameter)=2 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.BiFunction&lt;java.util.Map.Entry&lt;K, V&gt;, java.util.Map.Entry&lt;K, V&gt;, ? extends java.util.Map.Entry&lt;K, V&gt;&gt;']]"
		[global::Java.Interop.JniMethodSignature ("reduceEntries", "(JLjava/util/function/BiFunction;)Ljava/util/Map$Entry;")]
		public virtual unsafe global::Java.Util.IMap.IEntry? ReduceEntries (long parallelismThreshold, global::Java.Util.Function.IBiFunction? reducer)
		{
			const string __id = "reduceEntries.(JLjava/util/function/BiFunction;)Ljava/util/Map$Entry;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.IMap.IEntry> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduceEntries' and count(parameter)=3 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.Function&lt;java.util.Map.Entry&lt;K, V&gt;, ? extends U&gt;'] and parameter[3][@type='java.util.function.BiFunction&lt;? super U, ? super U, ? extends U&gt;']]"
		[global::Java.Interop.JniMethodSignature ("reduceEntries", "(JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object;")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"U"})]
		public virtual unsafe global::Java.Lang.Object? ReduceEntries (long parallelismThreshold, global::Java.Util.Function.IFunction? transformer, global::Java.Util.Function.IBiFunction? reducer)
		{
			const string __id = "reduceEntries.(JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduceEntriesToDouble' and count(parameter)=4 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.ToDoubleFunction&lt;java.util.Map.Entry&lt;K, V&gt;&gt;'] and parameter[3][@type='double'] and parameter[4][@type='java.util.function.DoubleBinaryOperator']]"
		[global::Java.Interop.JniMethodSignature ("reduceEntriesToDouble", "(JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D")]
		public virtual unsafe double ReduceEntriesToDouble (long parallelismThreshold, global::Java.Util.Function.IToDoubleFunction? transformer, double basis, global::Java.Util.Function.IDoubleBinaryOperator? reducer)
		{
			const string __id = "reduceEntriesToDouble.(JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (basis);
				__args [3] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualDoubleMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduceEntriesToInt' and count(parameter)=4 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.ToIntFunction&lt;java.util.Map.Entry&lt;K, V&gt;&gt;'] and parameter[3][@type='int'] and parameter[4][@type='java.util.function.IntBinaryOperator']]"
		[global::Java.Interop.JniMethodSignature ("reduceEntriesToInt", "(JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I")]
		public virtual unsafe int ReduceEntriesToInt (long parallelismThreshold, global::Java.Util.Function.IToIntFunction? transformer, int basis, global::Java.Util.Function.IIntBinaryOperator? reducer)
		{
			const string __id = "reduceEntriesToInt.(JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (basis);
				__args [3] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduceEntriesToLong' and count(parameter)=4 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.ToLongFunction&lt;java.util.Map.Entry&lt;K, V&gt;&gt;'] and parameter[3][@type='long'] and parameter[4][@type='java.util.function.LongBinaryOperator']]"
		[global::Java.Interop.JniMethodSignature ("reduceEntriesToLong", "(JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J")]
		public virtual unsafe long ReduceEntriesToLong (long parallelismThreshold, global::Java.Util.Function.IToLongFunction? transformer, long basis, global::Java.Util.Function.ILongBinaryOperator? reducer)
		{
			const string __id = "reduceEntriesToLong.(JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (basis);
				__args [3] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualInt64Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduceKeys' and count(parameter)=2 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.BiFunction&lt;? super K, ? super K, ? extends K&gt;']]"
		[global::Java.Interop.JniMethodSignature ("reduceKeys", "(JLjava/util/function/BiFunction;)Ljava/lang/Object;")]
		public virtual unsafe global::Java.Lang.Object? ReduceKeys (long parallelismThreshold, global::Java.Util.Function.IBiFunction? reducer)
		{
			const string __id = "reduceKeys.(JLjava/util/function/BiFunction;)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduceKeys' and count(parameter)=3 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.Function&lt;? super K, ? extends U&gt;'] and parameter[3][@type='java.util.function.BiFunction&lt;? super U, ? super U, ? extends U&gt;']]"
		[global::Java.Interop.JniMethodSignature ("reduceKeys", "(JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object;")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"U"})]
		public virtual unsafe global::Java.Lang.Object? ReduceKeys (long parallelismThreshold, global::Java.Util.Function.IFunction? transformer, global::Java.Util.Function.IBiFunction? reducer)
		{
			const string __id = "reduceKeys.(JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduceKeysToDouble' and count(parameter)=4 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.ToDoubleFunction&lt;? super K&gt;'] and parameter[3][@type='double'] and parameter[4][@type='java.util.function.DoubleBinaryOperator']]"
		[global::Java.Interop.JniMethodSignature ("reduceKeysToDouble", "(JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D")]
		public virtual unsafe double ReduceKeysToDouble (long parallelismThreshold, global::Java.Util.Function.IToDoubleFunction? transformer, double basis, global::Java.Util.Function.IDoubleBinaryOperator? reducer)
		{
			const string __id = "reduceKeysToDouble.(JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (basis);
				__args [3] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualDoubleMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduceKeysToInt' and count(parameter)=4 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.ToIntFunction&lt;? super K&gt;'] and parameter[3][@type='int'] and parameter[4][@type='java.util.function.IntBinaryOperator']]"
		[global::Java.Interop.JniMethodSignature ("reduceKeysToInt", "(JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I")]
		public virtual unsafe int ReduceKeysToInt (long parallelismThreshold, global::Java.Util.Function.IToIntFunction? transformer, int basis, global::Java.Util.Function.IIntBinaryOperator? reducer)
		{
			const string __id = "reduceKeysToInt.(JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (basis);
				__args [3] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduceKeysToLong' and count(parameter)=4 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.ToLongFunction&lt;? super K&gt;'] and parameter[3][@type='long'] and parameter[4][@type='java.util.function.LongBinaryOperator']]"
		[global::Java.Interop.JniMethodSignature ("reduceKeysToLong", "(JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J")]
		public virtual unsafe long ReduceKeysToLong (long parallelismThreshold, global::Java.Util.Function.IToLongFunction? transformer, long basis, global::Java.Util.Function.ILongBinaryOperator? reducer)
		{
			const string __id = "reduceKeysToLong.(JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (basis);
				__args [3] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualInt64Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduceToDouble' and count(parameter)=4 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.ToDoubleBiFunction&lt;? super K, ? super V&gt;'] and parameter[3][@type='double'] and parameter[4][@type='java.util.function.DoubleBinaryOperator']]"
		[global::Java.Interop.JniMethodSignature ("reduceToDouble", "(JLjava/util/function/ToDoubleBiFunction;DLjava/util/function/DoubleBinaryOperator;)D")]
		public virtual unsafe double ReduceToDouble (long parallelismThreshold, global::Java.Util.Function.IToDoubleBiFunction? transformer, double basis, global::Java.Util.Function.IDoubleBinaryOperator? reducer)
		{
			const string __id = "reduceToDouble.(JLjava/util/function/ToDoubleBiFunction;DLjava/util/function/DoubleBinaryOperator;)D";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (basis);
				__args [3] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualDoubleMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduceToInt' and count(parameter)=4 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.ToIntBiFunction&lt;? super K, ? super V&gt;'] and parameter[3][@type='int'] and parameter[4][@type='java.util.function.IntBinaryOperator']]"
		[global::Java.Interop.JniMethodSignature ("reduceToInt", "(JLjava/util/function/ToIntBiFunction;ILjava/util/function/IntBinaryOperator;)I")]
		public virtual unsafe int ReduceToInt (long parallelismThreshold, global::Java.Util.Function.IToIntBiFunction? transformer, int basis, global::Java.Util.Function.IIntBinaryOperator? reducer)
		{
			const string __id = "reduceToInt.(JLjava/util/function/ToIntBiFunction;ILjava/util/function/IntBinaryOperator;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (basis);
				__args [3] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduceToLong' and count(parameter)=4 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.ToLongBiFunction&lt;? super K, ? super V&gt;'] and parameter[3][@type='long'] and parameter[4][@type='java.util.function.LongBinaryOperator']]"
		[global::Java.Interop.JniMethodSignature ("reduceToLong", "(JLjava/util/function/ToLongBiFunction;JLjava/util/function/LongBinaryOperator;)J")]
		public virtual unsafe long ReduceToLong (long parallelismThreshold, global::Java.Util.Function.IToLongBiFunction? transformer, long basis, global::Java.Util.Function.ILongBinaryOperator? reducer)
		{
			const string __id = "reduceToLong.(JLjava/util/function/ToLongBiFunction;JLjava/util/function/LongBinaryOperator;)J";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (basis);
				__args [3] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualInt64Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduceValues' and count(parameter)=2 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.BiFunction&lt;? super V, ? super V, ? extends V&gt;']]"
		[global::Java.Interop.JniMethodSignature ("reduceValues", "(JLjava/util/function/BiFunction;)Ljava/lang/Object;")]
		public virtual unsafe global::Java.Lang.Object? ReduceValues (long parallelismThreshold, global::Java.Util.Function.IBiFunction? reducer)
		{
			const string __id = "reduceValues.(JLjava/util/function/BiFunction;)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduceValues' and count(parameter)=3 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.Function&lt;? super V, ? extends U&gt;'] and parameter[3][@type='java.util.function.BiFunction&lt;? super U, ? super U, ? extends U&gt;']]"
		[global::Java.Interop.JniMethodSignature ("reduceValues", "(JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object;")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"U"})]
		public virtual unsafe global::Java.Lang.Object? ReduceValues (long parallelismThreshold, global::Java.Util.Function.IFunction? transformer, global::Java.Util.Function.IBiFunction? reducer)
		{
			const string __id = "reduceValues.(JLjava/util/function/Function;Ljava/util/function/BiFunction;)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduceValuesToDouble' and count(parameter)=4 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.ToDoubleFunction&lt;? super V&gt;'] and parameter[3][@type='double'] and parameter[4][@type='java.util.function.DoubleBinaryOperator']]"
		[global::Java.Interop.JniMethodSignature ("reduceValuesToDouble", "(JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D")]
		public virtual unsafe double ReduceValuesToDouble (long parallelismThreshold, global::Java.Util.Function.IToDoubleFunction? transformer, double basis, global::Java.Util.Function.IDoubleBinaryOperator? reducer)
		{
			const string __id = "reduceValuesToDouble.(JLjava/util/function/ToDoubleFunction;DLjava/util/function/DoubleBinaryOperator;)D";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (basis);
				__args [3] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualDoubleMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduceValuesToInt' and count(parameter)=4 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.ToIntFunction&lt;? super V&gt;'] and parameter[3][@type='int'] and parameter[4][@type='java.util.function.IntBinaryOperator']]"
		[global::Java.Interop.JniMethodSignature ("reduceValuesToInt", "(JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I")]
		public virtual unsafe int ReduceValuesToInt (long parallelismThreshold, global::Java.Util.Function.IToIntFunction? transformer, int basis, global::Java.Util.Function.IIntBinaryOperator? reducer)
		{
			const string __id = "reduceValuesToInt.(JLjava/util/function/ToIntFunction;ILjava/util/function/IntBinaryOperator;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (basis);
				__args [3] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='reduceValuesToLong' and count(parameter)=4 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.ToLongFunction&lt;? super V&gt;'] and parameter[3][@type='long'] and parameter[4][@type='java.util.function.LongBinaryOperator']]"
		[global::Java.Interop.JniMethodSignature ("reduceValuesToLong", "(JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J")]
		public virtual unsafe long ReduceValuesToLong (long parallelismThreshold, global::Java.Util.Function.IToLongFunction? transformer, long basis, global::Java.Util.Function.ILongBinaryOperator? reducer)
		{
			const string __id = "reduceValuesToLong.(JLjava/util/function/ToLongFunction;JLjava/util/function/LongBinaryOperator;)J";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (transformer);
				__args [2] = new JniArgumentValue (basis);
				__args [3] = new JniArgumentValue (reducer);
				var __rm = _members.InstanceMethods.InvokeVirtualInt64Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (transformer);
				global::System.GC.KeepAlive (reducer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='remove' and count(parameter)=2 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.Object']]"
		[global::Java.Interop.JniMethodSignature ("remove", "(Ljava/lang/Object;Ljava/lang/Object;)Z")]
		public virtual unsafe bool Remove (global::Java.Lang.Object? key, global::Java.Lang.Object? value)
		{
			const string __id = "remove.(Ljava/lang/Object;Ljava/lang/Object;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (key);
				__args [1] = new JniArgumentValue (value);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (key);
				global::System.GC.KeepAlive (value);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='replace' and count(parameter)=2 and parameter[1][@type='K'] and parameter[2][@type='V']]"
		[global::Java.Interop.JniMethodSignature ("replace", "(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;")]
		public virtual unsafe global::Java.Lang.Object? Replace (global::Java.Lang.Object? key, global::Java.Lang.Object? value)
		{
			const string __id = "replace.(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;";
			var native_key = (key?.PeerReference ?? default);
			var native_value = (value?.PeerReference ?? default);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_key);
				__args [1] = new JniArgumentValue (native_value);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (key);
				global::System.GC.KeepAlive (value);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='replace' and count(parameter)=3 and parameter[1][@type='K'] and parameter[2][@type='V'] and parameter[3][@type='V']]"
		[global::Java.Interop.JniMethodSignature ("replace", "(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z")]
		public virtual unsafe bool Replace (global::Java.Lang.Object? key, global::Java.Lang.Object? oldValue, global::Java.Lang.Object? newValue)
		{
			const string __id = "replace.(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z";
			var native_key = (key?.PeerReference ?? default);
			var native_oldValue = (oldValue?.PeerReference ?? default);
			var native_newValue = (newValue?.PeerReference ?? default);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_key);
				__args [1] = new JniArgumentValue (native_oldValue);
				__args [2] = new JniArgumentValue (native_newValue);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (key);
				global::System.GC.KeepAlive (oldValue);
				global::System.GC.KeepAlive (newValue);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='replaceAll' and count(parameter)=1 and parameter[1][@type='java.util.function.BiFunction&lt;? super K, ? super V, ? extends V&gt;']]"
		[global::Java.Interop.JniMethodSignature ("replaceAll", "(Ljava/util/function/BiFunction;)V")]
		public virtual unsafe void ReplaceAll (global::Java.Util.Function.IBiFunction? function)
		{
			const string __id = "replaceAll.(Ljava/util/function/BiFunction;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (function);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (function);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='search' and count(parameter)=2 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.BiFunction&lt;? super K, ? super V, ? extends U&gt;']]"
		[global::Java.Interop.JniMethodSignature ("search", "(JLjava/util/function/BiFunction;)Ljava/lang/Object;")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"U"})]
		public virtual unsafe global::Java.Lang.Object? Search (long parallelismThreshold, global::Java.Util.Function.IBiFunction? searchFunction)
		{
			const string __id = "search.(JLjava/util/function/BiFunction;)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (searchFunction);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (searchFunction);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='searchEntries' and count(parameter)=2 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.Function&lt;java.util.Map.Entry&lt;K, V&gt;, ? extends U&gt;']]"
		[global::Java.Interop.JniMethodSignature ("searchEntries", "(JLjava/util/function/Function;)Ljava/lang/Object;")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"U"})]
		public virtual unsafe global::Java.Lang.Object? SearchEntries (long parallelismThreshold, global::Java.Util.Function.IFunction? searchFunction)
		{
			const string __id = "searchEntries.(JLjava/util/function/Function;)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (searchFunction);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (searchFunction);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='searchKeys' and count(parameter)=2 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.Function&lt;? super K, ? extends U&gt;']]"
		[global::Java.Interop.JniMethodSignature ("searchKeys", "(JLjava/util/function/Function;)Ljava/lang/Object;")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"U"})]
		public virtual unsafe global::Java.Lang.Object? SearchKeys (long parallelismThreshold, global::Java.Util.Function.IFunction? searchFunction)
		{
			const string __id = "searchKeys.(JLjava/util/function/Function;)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (searchFunction);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (searchFunction);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util.concurrent']/class[@name='ConcurrentHashMap']/method[@name='searchValues' and count(parameter)=2 and parameter[1][@type='long'] and parameter[2][@type='java.util.function.Function&lt;? super V, ? extends U&gt;']]"
		[global::Java.Interop.JniMethodSignature ("searchValues", "(JLjava/util/function/Function;)Ljava/lang/Object;")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"U"})]
		public virtual unsafe global::Java.Lang.Object? SearchValues (long parallelismThreshold, global::Java.Util.Function.IFunction? searchFunction)
		{
			const string __id = "searchValues.(JLjava/util/function/Function;)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (parallelismThreshold);
				__args [1] = new JniArgumentValue (searchFunction);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (searchFunction);
			}
		}

	}
}
