//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Java.Interop;

namespace Java.Util {

	// Metadata.xml XPath class reference: path="/api/package[@name='java.util']/class[@name='Scanner']"
	[global::Java.Interop.JniTypeSignature ("java/util/Scanner", GenerateJavaPeer=false)]
	public sealed partial class Scanner : global::Java.Lang.Object, global::Java.IO.ICloseable, global::Java.Util.IIterator {
		static readonly JniPeerMembers _members = new JniPeerMembers ("java/util/Scanner", typeof (Scanner));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		internal Scanner (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util']/class[@name='Scanner']/constructor[@name='Scanner' and count(parameter)=1 and parameter[1][@type='java.io.File']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/io/File;)V")]
		public unsafe Scanner (global::Java.IO.File? source) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/io/File;)V";

			if (PeerReference.IsValid)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (source);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (source);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util']/class[@name='Scanner']/constructor[@name='Scanner' and count(parameter)=2 and parameter[1][@type='java.io.File'] and parameter[2][@type='java.lang.String']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/io/File;Ljava/lang/String;)V")]
		public unsafe Scanner (global::Java.IO.File? source, string? charsetName) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/io/File;Ljava/lang/String;)V";

			if (PeerReference.IsValid)
				return;

			var native_charsetName = global::Java.Interop.JniEnvironment.Strings.NewString (charsetName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (source);
				__args [1] = new JniArgumentValue (native_charsetName);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_charsetName);
				global::System.GC.KeepAlive (source);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util']/class[@name='Scanner']/constructor[@name='Scanner' and count(parameter)=2 and parameter[1][@type='java.io.File'] and parameter[2][@type='java.nio.charset.Charset']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/io/File;Ljava/nio/charset/Charset;)V")]
		public unsafe Scanner (global::Java.IO.File? source, global::Java.Nio.Charset.Charset? charset) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/io/File;Ljava/nio/charset/Charset;)V";

			if (PeerReference.IsValid)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (source);
				__args [1] = new JniArgumentValue (charset);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (source);
				global::System.GC.KeepAlive (charset);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util']/class[@name='Scanner']/constructor[@name='Scanner' and count(parameter)=1 and parameter[1][@type='java.io.InputStream']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/io/InputStream;)V")]
		public unsafe Scanner (global::Java.IO.InputStream? source) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/io/InputStream;)V";

			if (PeerReference.IsValid)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (source);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (source);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util']/class[@name='Scanner']/constructor[@name='Scanner' and count(parameter)=2 and parameter[1][@type='java.io.InputStream'] and parameter[2][@type='java.lang.String']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/io/InputStream;Ljava/lang/String;)V")]
		public unsafe Scanner (global::Java.IO.InputStream? source, string? charsetName) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/io/InputStream;Ljava/lang/String;)V";

			if (PeerReference.IsValid)
				return;

			var native_charsetName = global::Java.Interop.JniEnvironment.Strings.NewString (charsetName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (source);
				__args [1] = new JniArgumentValue (native_charsetName);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_charsetName);
				global::System.GC.KeepAlive (source);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util']/class[@name='Scanner']/constructor[@name='Scanner' and count(parameter)=2 and parameter[1][@type='java.io.InputStream'] and parameter[2][@type='java.nio.charset.Charset']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V")]
		public unsafe Scanner (global::Java.IO.InputStream? source, global::Java.Nio.Charset.Charset? charset) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/io/InputStream;Ljava/nio/charset/Charset;)V";

			if (PeerReference.IsValid)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (source);
				__args [1] = new JniArgumentValue (charset);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (source);
				global::System.GC.KeepAlive (charset);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util']/class[@name='Scanner']/constructor[@name='Scanner' and count(parameter)=1 and parameter[1][@type='java.lang.Readable']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/lang/Readable;)V")]
		public unsafe Scanner (global::Java.Lang.IReadable? source) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/lang/Readable;)V";

			if (PeerReference.IsValid)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (source);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (source);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util']/class[@name='Scanner']/constructor[@name='Scanner' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/lang/String;)V")]
		public unsafe Scanner (string? source) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/lang/String;)V";

			if (PeerReference.IsValid)
				return;

			var native_source = global::Java.Interop.JniEnvironment.Strings.NewString (source);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_source);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_source);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util']/class[@name='Scanner']/constructor[@name='Scanner' and count(parameter)=1 and parameter[1][@type='java.nio.channels.ReadableByteChannel']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/nio/channels/ReadableByteChannel;)V")]
		public unsafe Scanner (global::Java.Nio.Channels.IReadableByteChannel? source) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/nio/channels/ReadableByteChannel;)V";

			if (PeerReference.IsValid)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (source);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (source);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util']/class[@name='Scanner']/constructor[@name='Scanner' and count(parameter)=2 and parameter[1][@type='java.nio.channels.ReadableByteChannel'] and parameter[2][@type='java.lang.String']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/nio/channels/ReadableByteChannel;Ljava/lang/String;)V")]
		public unsafe Scanner (global::Java.Nio.Channels.IReadableByteChannel? source, string? charsetName) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/nio/channels/ReadableByteChannel;Ljava/lang/String;)V";

			if (PeerReference.IsValid)
				return;

			var native_charsetName = global::Java.Interop.JniEnvironment.Strings.NewString (charsetName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (source);
				__args [1] = new JniArgumentValue (native_charsetName);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_charsetName);
				global::System.GC.KeepAlive (source);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util']/class[@name='Scanner']/constructor[@name='Scanner' and count(parameter)=2 and parameter[1][@type='java.nio.channels.ReadableByteChannel'] and parameter[2][@type='java.nio.charset.Charset']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/charset/Charset;)V")]
		public unsafe Scanner (global::Java.Nio.Channels.IReadableByteChannel? source, global::Java.Nio.Charset.Charset? charset) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/nio/channels/ReadableByteChannel;Ljava/nio/charset/Charset;)V";

			if (PeerReference.IsValid)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (source);
				__args [1] = new JniArgumentValue (charset);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (source);
				global::System.GC.KeepAlive (charset);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util']/class[@name='Scanner']/constructor[@name='Scanner' and count(parameter)=1 and parameter[1][@type='java.nio.file.Path']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/nio/file/Path;)V")]
		public unsafe Scanner (global::Java.Nio.File.IPath? source) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/nio/file/Path;)V";

			if (PeerReference.IsValid)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (source);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (source);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util']/class[@name='Scanner']/constructor[@name='Scanner' and count(parameter)=2 and parameter[1][@type='java.nio.file.Path'] and parameter[2][@type='java.lang.String']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/nio/file/Path;Ljava/lang/String;)V")]
		public unsafe Scanner (global::Java.Nio.File.IPath? source, string? charsetName) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/nio/file/Path;Ljava/lang/String;)V";

			if (PeerReference.IsValid)
				return;

			var native_charsetName = global::Java.Interop.JniEnvironment.Strings.NewString (charsetName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (source);
				__args [1] = new JniArgumentValue (native_charsetName);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_charsetName);
				global::System.GC.KeepAlive (source);
			}
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.util']/class[@name='Scanner']/constructor[@name='Scanner' and count(parameter)=2 and parameter[1][@type='java.nio.file.Path'] and parameter[2][@type='java.nio.charset.Charset']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/nio/file/Path;Ljava/nio/charset/Charset;)V")]
		public unsafe Scanner (global::Java.Nio.File.IPath? source, global::Java.Nio.Charset.Charset? charset) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/nio/file/Path;Ljava/nio/charset/Charset;)V";

			if (PeerReference.IsValid)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (source);
				__args [1] = new JniArgumentValue (charset);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (source);
				global::System.GC.KeepAlive (charset);
			}
		}

		public unsafe bool HasNext {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='hasNext' and count(parameter)=0]"
			get {
				const string __id = "hasNext.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public unsafe bool HasNextBigDecimal {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='hasNextBigDecimal' and count(parameter)=0]"
			get {
				const string __id = "hasNextBigDecimal.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public unsafe bool HasNextBigInteger {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='hasNextBigInteger' and count(parameter)=0]"
			get {
				const string __id = "hasNextBigInteger.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public unsafe bool HasNextBoolean {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='hasNextBoolean' and count(parameter)=0]"
			get {
				const string __id = "hasNextBoolean.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public unsafe bool HasNextByte {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='hasNextByte' and count(parameter)=0]"
			get {
				const string __id = "hasNextByte.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public unsafe bool HasNextDouble {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='hasNextDouble' and count(parameter)=0]"
			get {
				const string __id = "hasNextDouble.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public unsafe bool HasNextFloat {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='hasNextFloat' and count(parameter)=0]"
			get {
				const string __id = "hasNextFloat.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public unsafe bool HasNextInt {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='hasNextInt' and count(parameter)=0]"
			get {
				const string __id = "hasNextInt.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public unsafe bool HasNextLine {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='hasNextLine' and count(parameter)=0]"
			get {
				const string __id = "hasNextLine.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public unsafe bool HasNextLong {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='hasNextLong' and count(parameter)=0]"
			get {
				const string __id = "hasNextLong.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public unsafe bool HasNextShort {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='hasNextShort' and count(parameter)=0]"
			get {
				const string __id = "hasNextShort.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='close' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("close", "()V")]
		public unsafe void Close ()
		{
			const string __id = "close.()V";
			try {
				_members.InstanceMethods.InvokeAbstractVoidMethod (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='delimiter' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("delimiter", "()Ljava/util/regex/Pattern;")]
		public unsafe global::Java.Util.Regex.Pattern? Delimiter ()
		{
			const string __id = "delimiter.()Ljava/util/regex/Pattern;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Regex.Pattern> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='findInLine' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::Java.Interop.JniMethodSignature ("findInLine", "(Ljava/lang/String;)Ljava/lang/String;")]
		public unsafe string? FindInLine (string? pattern)
		{
			const string __id = "findInLine.(Ljava/lang/String;)Ljava/lang/String;";
			var native_pattern = global::Java.Interop.JniEnvironment.Strings.NewString (pattern);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_pattern);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Strings.ToString (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_pattern);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='findInLine' and count(parameter)=1 and parameter[1][@type='java.util.regex.Pattern']]"
		[global::Java.Interop.JniMethodSignature ("findInLine", "(Ljava/util/regex/Pattern;)Ljava/lang/String;")]
		public unsafe string? FindInLine (global::Java.Util.Regex.Pattern? pattern)
		{
			const string __id = "findInLine.(Ljava/util/regex/Pattern;)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (pattern);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Strings.ToString (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (pattern);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='findWithinHorizon' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("findWithinHorizon", "(Ljava/lang/String;I)Ljava/lang/String;")]
		public unsafe string? FindWithinHorizon (string? pattern, int horizon)
		{
			const string __id = "findWithinHorizon.(Ljava/lang/String;I)Ljava/lang/String;";
			var native_pattern = global::Java.Interop.JniEnvironment.Strings.NewString (pattern);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_pattern);
				__args [1] = new JniArgumentValue (horizon);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Strings.ToString (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_pattern);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='findWithinHorizon' and count(parameter)=2 and parameter[1][@type='java.util.regex.Pattern'] and parameter[2][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("findWithinHorizon", "(Ljava/util/regex/Pattern;I)Ljava/lang/String;")]
		public unsafe string? FindWithinHorizon (global::Java.Util.Regex.Pattern? pattern, int horizon)
		{
			const string __id = "findWithinHorizon.(Ljava/util/regex/Pattern;I)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (pattern);
				__args [1] = new JniArgumentValue (horizon);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Strings.ToString (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (pattern);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='hasNext' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::Java.Interop.JniMethodSignature ("hasNext", "(Ljava/lang/String;)Z")]
		public unsafe bool InvokeHasNext (string? pattern)
		{
			const string __id = "hasNext.(Ljava/lang/String;)Z";
			var native_pattern = global::Java.Interop.JniEnvironment.Strings.NewString (pattern);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_pattern);
				var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_pattern);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='hasNext' and count(parameter)=1 and parameter[1][@type='java.util.regex.Pattern']]"
		[global::Java.Interop.JniMethodSignature ("hasNext", "(Ljava/util/regex/Pattern;)Z")]
		public unsafe bool InvokeHasNext (global::Java.Util.Regex.Pattern? pattern)
		{
			const string __id = "hasNext.(Ljava/util/regex/Pattern;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (pattern);
				var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (pattern);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='hasNextBigInteger' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("hasNextBigInteger", "(I)Z")]
		public unsafe bool InvokeHasNextBigInteger (int radix)
		{
			const string __id = "hasNextBigInteger.(I)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (radix);
				var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='hasNextByte' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("hasNextByte", "(I)Z")]
		public unsafe bool InvokeHasNextByte (int radix)
		{
			const string __id = "hasNextByte.(I)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (radix);
				var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='hasNextInt' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("hasNextInt", "(I)Z")]
		public unsafe bool InvokeHasNextInt (int radix)
		{
			const string __id = "hasNextInt.(I)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (radix);
				var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='hasNextLong' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("hasNextLong", "(I)Z")]
		public unsafe bool InvokeHasNextLong (int radix)
		{
			const string __id = "hasNextLong.(I)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (radix);
				var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='hasNextShort' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("hasNextShort", "(I)Z")]
		public unsafe bool InvokeHasNextShort (int radix)
		{
			const string __id = "hasNextShort.(I)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (radix);
				var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='ioException' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("ioException", "()Ljava/io/IOException;")]
		public unsafe global::Java.IO.IOException? IoException ()
		{
			const string __id = "ioException.()Ljava/io/IOException;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.IO.IOException> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='locale' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("locale", "()Ljava/util/Locale;")]
		public unsafe global::Java.Util.Locale? Locale ()
		{
			const string __id = "locale.()Ljava/util/Locale;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Locale> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='match' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("match", "()Ljava/util/regex/MatchResult;")]
		public unsafe global::Java.Util.Regex.IMatchResult? Match ()
		{
			const string __id = "match.()Ljava/util/regex/MatchResult;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Regex.IMatchResult> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='next' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("next", "()Ljava/lang/String;")]
		public unsafe string? Next ()
		{
			const string __id = "next.()Ljava/lang/String;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Strings.ToString (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='next' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::Java.Interop.JniMethodSignature ("next", "(Ljava/lang/String;)Ljava/lang/String;")]
		public unsafe string? Next (string? pattern)
		{
			const string __id = "next.(Ljava/lang/String;)Ljava/lang/String;";
			var native_pattern = global::Java.Interop.JniEnvironment.Strings.NewString (pattern);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_pattern);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Strings.ToString (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_pattern);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='next' and count(parameter)=1 and parameter[1][@type='java.util.regex.Pattern']]"
		[global::Java.Interop.JniMethodSignature ("next", "(Ljava/util/regex/Pattern;)Ljava/lang/String;")]
		public unsafe string? Next (global::Java.Util.Regex.Pattern? pattern)
		{
			const string __id = "next.(Ljava/util/regex/Pattern;)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (pattern);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Strings.ToString (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (pattern);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='nextBigDecimal' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("nextBigDecimal", "()Ljava/math/BigDecimal;")]
		public unsafe global::Java.Math.BigDecimal? NextBigDecimal ()
		{
			const string __id = "nextBigDecimal.()Ljava/math/BigDecimal;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Math.BigDecimal> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='nextBigInteger' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("nextBigInteger", "()Ljava/math/BigInteger;")]
		public unsafe global::Java.Math.BigInteger? NextBigInteger ()
		{
			const string __id = "nextBigInteger.()Ljava/math/BigInteger;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Math.BigInteger> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='nextBigInteger' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("nextBigInteger", "(I)Ljava/math/BigInteger;")]
		public unsafe global::Java.Math.BigInteger? NextBigInteger (int radix)
		{
			const string __id = "nextBigInteger.(I)Ljava/math/BigInteger;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (radix);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Math.BigInteger> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='nextBoolean' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("nextBoolean", "()Z")]
		public unsafe bool NextBoolean ()
		{
			const string __id = "nextBoolean.()Z";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='nextByte' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("nextByte", "()B")]
		public unsafe sbyte NextByte ()
		{
			const string __id = "nextByte.()B";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractSByteMethod (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='nextByte' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("nextByte", "(I)B")]
		public unsafe sbyte NextByte (int radix)
		{
			const string __id = "nextByte.(I)B";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (radix);
				var __rm = _members.InstanceMethods.InvokeAbstractSByteMethod (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='nextDouble' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("nextDouble", "()D")]
		public unsafe double NextDouble ()
		{
			const string __id = "nextDouble.()D";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractDoubleMethod (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='nextFloat' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("nextFloat", "()F")]
		public unsafe float NextFloat ()
		{
			const string __id = "nextFloat.()F";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractSingleMethod (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='nextInt' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("nextInt", "()I")]
		public unsafe int NextInt ()
		{
			const string __id = "nextInt.()I";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='nextInt' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("nextInt", "(I)I")]
		public unsafe int NextInt (int radix)
		{
			const string __id = "nextInt.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (radix);
				var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='nextLine' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("nextLine", "()Ljava/lang/String;")]
		public unsafe string? NextLine ()
		{
			const string __id = "nextLine.()Ljava/lang/String;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Strings.ToString (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='nextLong' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("nextLong", "()J")]
		public unsafe long NextLong ()
		{
			const string __id = "nextLong.()J";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractInt64Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='nextLong' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("nextLong", "(I)J")]
		public unsafe long NextLong (int radix)
		{
			const string __id = "nextLong.(I)J";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (radix);
				var __rm = _members.InstanceMethods.InvokeAbstractInt64Method (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='nextShort' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("nextShort", "()S")]
		public unsafe short NextShort ()
		{
			const string __id = "nextShort.()S";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractInt16Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='nextShort' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("nextShort", "(I)S")]
		public unsafe short NextShort (int radix)
		{
			const string __id = "nextShort.(I)S";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (radix);
				var __rm = _members.InstanceMethods.InvokeAbstractInt16Method (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='radix' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("radix", "()I")]
		public unsafe int Radix ()
		{
			const string __id = "radix.()I";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='remove' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("remove", "()V")]
		public unsafe void Remove ()
		{
			const string __id = "remove.()V";
			try {
				_members.InstanceMethods.InvokeAbstractVoidMethod (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='reset' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("reset", "()Ljava/util/Scanner;")]
		public unsafe global::Java.Util.Scanner? Reset ()
		{
			const string __id = "reset.()Ljava/util/Scanner;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Scanner> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='skip' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::Java.Interop.JniMethodSignature ("skip", "(Ljava/lang/String;)Ljava/util/Scanner;")]
		public unsafe global::Java.Util.Scanner? Skip (string? pattern)
		{
			const string __id = "skip.(Ljava/lang/String;)Ljava/util/Scanner;";
			var native_pattern = global::Java.Interop.JniEnvironment.Strings.NewString (pattern);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_pattern);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Scanner> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_pattern);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='skip' and count(parameter)=1 and parameter[1][@type='java.util.regex.Pattern']]"
		[global::Java.Interop.JniMethodSignature ("skip", "(Ljava/util/regex/Pattern;)Ljava/util/Scanner;")]
		public unsafe global::Java.Util.Scanner? Skip (global::Java.Util.Regex.Pattern? pattern)
		{
			const string __id = "skip.(Ljava/util/regex/Pattern;)Ljava/util/Scanner;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (pattern);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Scanner> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (pattern);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='useDelimiter' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::Java.Interop.JniMethodSignature ("useDelimiter", "(Ljava/lang/String;)Ljava/util/Scanner;")]
		public unsafe global::Java.Util.Scanner? UseDelimiter (string? pattern)
		{
			const string __id = "useDelimiter.(Ljava/lang/String;)Ljava/util/Scanner;";
			var native_pattern = global::Java.Interop.JniEnvironment.Strings.NewString (pattern);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_pattern);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Scanner> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_pattern);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='useDelimiter' and count(parameter)=1 and parameter[1][@type='java.util.regex.Pattern']]"
		[global::Java.Interop.JniMethodSignature ("useDelimiter", "(Ljava/util/regex/Pattern;)Ljava/util/Scanner;")]
		public unsafe global::Java.Util.Scanner? UseDelimiter (global::Java.Util.Regex.Pattern? pattern)
		{
			const string __id = "useDelimiter.(Ljava/util/regex/Pattern;)Ljava/util/Scanner;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (pattern);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Scanner> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (pattern);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='useLocale' and count(parameter)=1 and parameter[1][@type='java.util.Locale']]"
		[global::Java.Interop.JniMethodSignature ("useLocale", "(Ljava/util/Locale;)Ljava/util/Scanner;")]
		public unsafe global::Java.Util.Scanner? UseLocale (global::Java.Util.Locale? locale)
		{
			const string __id = "useLocale.(Ljava/util/Locale;)Ljava/util/Scanner;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (locale);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Scanner> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (locale);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.util']/class[@name='Scanner']/method[@name='useRadix' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("useRadix", "(I)Ljava/util/Scanner;")]
		public unsafe global::Java.Util.Scanner? UseRadix (int radix)
		{
			const string __id = "useRadix.(I)Ljava/util/Scanner;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (radix);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.Scanner> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// This method is explicitly implemented as a member of an instantiated Java.Util.IIterator
		global::Java.Lang.Object? global::Java.Util.IIterator.Next ()
		{
			var value = Next ();
			return value == null ? null : new Lang.String(value);
		}

	}
}
