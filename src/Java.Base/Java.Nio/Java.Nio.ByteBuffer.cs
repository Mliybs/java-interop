//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Java.Interop;

namespace Java.Nio {

	// Metadata.xml XPath class reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']"
	[global::Java.Interop.JniTypeSignature ("java/nio/ByteBuffer", GenerateJavaPeer=false, InvokerType=typeof (ByteBufferInvoker))]
	public abstract partial class ByteBuffer : global::Java.Nio.Buffer, global::Java.Lang.IComparable {
		static readonly JniPeerMembers _members = new JniPeerMembers ("java/nio/ByteBuffer", typeof (ByteBuffer));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		protected ByteBuffer (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		public abstract char Char {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getChar' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("getChar", "()C")]
			get; 
		}

		public abstract double Double {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getDouble' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("getDouble", "()D")]
			get; 
		}

		public abstract float Float {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getFloat' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("getFloat", "()F")]
			get; 
		}

		public override unsafe bool HasArray {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='hasArray' and count(parameter)=0]"
			get {
				const string __id = "hasArray.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public abstract int Int {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getInt' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("getInt", "()I")]
			get; 
		}

		// skipped generating property IsDirect because its Java method declaration is variant that we cannot represent in C#

		public abstract long Long {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getLong' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("getLong", "()J")]
			get; 
		}

		public abstract short Short {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getShort' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("getShort", "()S")]
			get; 
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='alignedSlice' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("alignedSlice", "(I)Ljava/nio/ByteBuffer;")]
		public unsafe global::Java.Nio.ByteBuffer? AlignedSlice (int unitSize)
		{
			const string __id = "alignedSlice.(I)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (unitSize);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='alignmentOffset' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("alignmentOffset", "(II)I")]
		public unsafe int AlignmentOffset (int index, int unitSize)
		{
			const string __id = "alignmentOffset.(II)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (unitSize);
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='allocate' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("allocate", "(I)Ljava/nio/ByteBuffer;")]
		public static unsafe global::Java.Nio.ByteBuffer? Allocate (int capacity)
		{
			const string __id = "allocate.(I)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (capacity);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='allocateDirect' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("allocateDirect", "(I)Ljava/nio/ByteBuffer;")]
		public static unsafe global::Java.Nio.ByteBuffer? AllocateDirect (int capacity)
		{
			const string __id = "allocateDirect.(I)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (capacity);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='array' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("array", "()[B")]
		public unsafe global::Java.Interop.JavaSByteArray? Array ()
		{
			const string __id = "array.()[B";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Interop.JavaSByteArray>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='arrayOffset' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("arrayOffset", "()I")]
		public override sealed unsafe int ArrayOffset ()
		{
			const string __id = "arrayOffset.()I";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asCharBuffer' and count(parameter)=0]"
		public abstract global::Java.Nio.CharBuffer? AsCharBuffer ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asDoubleBuffer' and count(parameter)=0]"
		public abstract global::Java.Nio.DoubleBuffer? AsDoubleBuffer ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asFloatBuffer' and count(parameter)=0]"
		public abstract global::Java.Nio.FloatBuffer? AsFloatBuffer ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asIntBuffer' and count(parameter)=0]"
		public abstract global::Java.Nio.IntBuffer? AsIntBuffer ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asLongBuffer' and count(parameter)=0]"
		public abstract global::Java.Nio.LongBuffer? AsLongBuffer ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asReadOnlyBuffer' and count(parameter)=0]"
		public abstract global::Java.Nio.ByteBuffer? AsReadOnlyBuffer ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asShortBuffer' and count(parameter)=0]"
		public abstract global::Java.Nio.ShortBuffer? AsShortBuffer ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='compact' and count(parameter)=0]"
		public abstract global::Java.Nio.ByteBuffer? Compact ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='compareTo' and count(parameter)=1 and parameter[1][@type='java.nio.ByteBuffer']]"
		[global::Java.Interop.JniMethodSignature ("compareTo", "(Ljava/nio/ByteBuffer;)I")]
		public virtual unsafe int CompareTo (global::Java.Nio.ByteBuffer? that)
		{
			const string __id = "compareTo.(Ljava/nio/ByteBuffer;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (that);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (that);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='duplicate' and count(parameter)=0]"
		public abstract global::Java.Nio.ByteBuffer? Duplicate ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='get' and count(parameter)=0]"
		public abstract sbyte Get ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='get' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[global::Java.Interop.JniMethodSignature ("get", "([B)Ljava/nio/ByteBuffer;")]
		public virtual unsafe global::Java.Nio.ByteBuffer? Get (global::Java.Interop.JavaSByteArray? dst)
		{
			const string __id = "get.([B)Ljava/nio/ByteBuffer;";
			var native_dst = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalSByteArray (dst);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_dst);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_dst != null) {
					native_dst.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (dst);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='get' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("get", "([BII)Ljava/nio/ByteBuffer;")]
		public virtual unsafe global::Java.Nio.ByteBuffer? Get (global::Java.Interop.JavaSByteArray? dst, int offset, int length)
		{
			const string __id = "get.([BII)Ljava/nio/ByteBuffer;";
			var native_dst = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalSByteArray (dst);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_dst);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (length);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_dst != null) {
					native_dst.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (dst);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='get' and count(parameter)=1 and parameter[1][@type='int']]"
		public abstract sbyte Get (int p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='get' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte[]']]"
		[global::Java.Interop.JniMethodSignature ("get", "(I[B)Ljava/nio/ByteBuffer;")]
		public virtual unsafe global::Java.Nio.ByteBuffer? Get (int index, global::Java.Interop.JavaSByteArray? dst)
		{
			const string __id = "get.(I[B)Ljava/nio/ByteBuffer;";
			var native_dst = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalSByteArray (dst);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (native_dst);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_dst != null) {
					native_dst.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (dst);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='get' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("get", "(I[BII)Ljava/nio/ByteBuffer;")]
		public virtual unsafe global::Java.Nio.ByteBuffer? Get (int index, global::Java.Interop.JavaSByteArray? dst, int offset, int length)
		{
			const string __id = "get.(I[BII)Ljava/nio/ByteBuffer;";
			var native_dst = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalSByteArray (dst);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (native_dst);
				__args [2] = new JniArgumentValue (offset);
				__args [3] = new JniArgumentValue (length);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_dst != null) {
					native_dst.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (dst);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getChar' and count(parameter)=1 and parameter[1][@type='int']]"
		public abstract char GetChar (int p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getDouble' and count(parameter)=1 and parameter[1][@type='int']]"
		public abstract double GetDouble (int p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getFloat' and count(parameter)=1 and parameter[1][@type='int']]"
		public abstract float GetFloat (int p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getInt' and count(parameter)=1 and parameter[1][@type='int']]"
		public abstract int GetInt (int p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getLong' and count(parameter)=1 and parameter[1][@type='int']]"
		public abstract long GetLong (int p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getShort' and count(parameter)=1 and parameter[1][@type='int']]"
		public abstract short GetShort (int p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='mismatch' and count(parameter)=1 and parameter[1][@type='java.nio.ByteBuffer']]"
		[global::Java.Interop.JniMethodSignature ("mismatch", "(Ljava/nio/ByteBuffer;)I")]
		public virtual unsafe int Mismatch (global::Java.Nio.ByteBuffer? that)
		{
			const string __id = "mismatch.(Ljava/nio/ByteBuffer;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (that);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (that);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='order' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("order", "()Ljava/nio/ByteOrder;")]
		public unsafe global::Java.Nio.ByteOrder? Order ()
		{
			const string __id = "order.()Ljava/nio/ByteOrder;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteOrder> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='order' and count(parameter)=1 and parameter[1][@type='java.nio.ByteOrder']]"
		[global::Java.Interop.JniMethodSignature ("order", "(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;")]
		public unsafe global::Java.Nio.ByteBuffer? Order (global::Java.Nio.ByteOrder? bo)
		{
			const string __id = "order.(Ljava/nio/ByteOrder;)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (bo);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (bo);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='put' and count(parameter)=1 and parameter[1][@type='byte']]"
		public abstract global::Java.Nio.ByteBuffer? Put (sbyte p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='put' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[global::Java.Interop.JniMethodSignature ("put", "([B)Ljava/nio/ByteBuffer;")]
		public unsafe global::Java.Nio.ByteBuffer? Put (global::Java.Interop.JavaSByteArray? src)
		{
			const string __id = "put.([B)Ljava/nio/ByteBuffer;";
			var native_src = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalSByteArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_src);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_src != null) {
					native_src.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='put' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("put", "([BII)Ljava/nio/ByteBuffer;")]
		public virtual unsafe global::Java.Nio.ByteBuffer? Put (global::Java.Interop.JavaSByteArray? src, int offset, int length)
		{
			const string __id = "put.([BII)Ljava/nio/ByteBuffer;";
			var native_src = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalSByteArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_src);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (length);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_src != null) {
					native_src.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='put' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte']]"
		public abstract global::Java.Nio.ByteBuffer? Put (int p0, sbyte p1);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='put' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte[]']]"
		[global::Java.Interop.JniMethodSignature ("put", "(I[B)Ljava/nio/ByteBuffer;")]
		public virtual unsafe global::Java.Nio.ByteBuffer? Put (int index, global::Java.Interop.JavaSByteArray? src)
		{
			const string __id = "put.(I[B)Ljava/nio/ByteBuffer;";
			var native_src = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalSByteArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (native_src);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_src != null) {
					native_src.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='put' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("put", "(I[BII)Ljava/nio/ByteBuffer;")]
		public virtual unsafe global::Java.Nio.ByteBuffer? Put (int index, global::Java.Interop.JavaSByteArray? src, int offset, int length)
		{
			const string __id = "put.(I[BII)Ljava/nio/ByteBuffer;";
			var native_src = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalSByteArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (native_src);
				__args [2] = new JniArgumentValue (offset);
				__args [3] = new JniArgumentValue (length);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_src != null) {
					native_src.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='put' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='java.nio.ByteBuffer'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("put", "(ILjava/nio/ByteBuffer;II)Ljava/nio/ByteBuffer;")]
		public virtual unsafe global::Java.Nio.ByteBuffer? Put (int index, global::Java.Nio.ByteBuffer? src, int offset, int length)
		{
			const string __id = "put.(ILjava/nio/ByteBuffer;II)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (src);
				__args [2] = new JniArgumentValue (offset);
				__args [3] = new JniArgumentValue (length);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='put' and count(parameter)=1 and parameter[1][@type='java.nio.ByteBuffer']]"
		[global::Java.Interop.JniMethodSignature ("put", "(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;")]
		public virtual unsafe global::Java.Nio.ByteBuffer? Put (global::Java.Nio.ByteBuffer? src)
		{
			const string __id = "put.(Ljava/nio/ByteBuffer;)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (src);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putChar' and count(parameter)=1 and parameter[1][@type='char']]"
		public abstract global::Java.Nio.ByteBuffer? PutChar (char p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putChar' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='char']]"
		public abstract global::Java.Nio.ByteBuffer? PutChar (int p0, char p1);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putDouble' and count(parameter)=1 and parameter[1][@type='double']]"
		public abstract global::Java.Nio.ByteBuffer? PutDouble (double p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putDouble' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='double']]"
		public abstract global::Java.Nio.ByteBuffer? PutDouble (int p0, double p1);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putFloat' and count(parameter)=1 and parameter[1][@type='float']]"
		public abstract global::Java.Nio.ByteBuffer? PutFloat (float p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putFloat' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='float']]"
		public abstract global::Java.Nio.ByteBuffer? PutFloat (int p0, float p1);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putInt' and count(parameter)=1 and parameter[1][@type='int']]"
		public abstract global::Java.Nio.ByteBuffer? PutInt (int p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putInt' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		public abstract global::Java.Nio.ByteBuffer? PutInt (int p0, int p1);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putLong' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='long']]"
		public abstract global::Java.Nio.ByteBuffer? PutLong (int p0, long p1);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putLong' and count(parameter)=1 and parameter[1][@type='long']]"
		public abstract global::Java.Nio.ByteBuffer? PutLong (long p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putShort' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='short']]"
		public abstract global::Java.Nio.ByteBuffer? PutShort (int p0, short p1);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putShort' and count(parameter)=1 and parameter[1][@type='short']]"
		public abstract global::Java.Nio.ByteBuffer? PutShort (short p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='slice' and count(parameter)=0]"
		public abstract global::Java.Nio.ByteBuffer? Slice ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='slice' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		public abstract global::Java.Nio.ByteBuffer? Slice (int p0, int p1);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='wrap' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[global::Java.Interop.JniMethodSignature ("wrap", "([B)Ljava/nio/ByteBuffer;")]
		public static unsafe global::Java.Nio.ByteBuffer? Wrap (global::Java.Interop.JavaSByteArray? array)
		{
			const string __id = "wrap.([B)Ljava/nio/ByteBuffer;";
			var native_array = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalSByteArray (array);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_array);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_array != null) {
					native_array.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (array);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='wrap' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("wrap", "([BII)Ljava/nio/ByteBuffer;")]
		public static unsafe global::Java.Nio.ByteBuffer? Wrap (global::Java.Interop.JavaSByteArray? array, int offset, int length)
		{
			const string __id = "wrap.([BII)Ljava/nio/ByteBuffer;";
			var native_array = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalSByteArray (array);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_array);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (length);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_array != null) {
					native_array.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (array);
			}
		}

		// This method is explicitly implemented as a member of an instantiated Java.Lang.IComparable
		int global::Java.Lang.IComparable.CompareTo (global::Java.Lang.Object? p0)
		{
			return CompareTo (global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer>((p0?.PeerReference ?? default).Handle));
		}

	}

	[global::Java.Interop.JniTypeSignature ("java/nio/ByteBuffer", GenerateJavaPeer=false)]
	internal partial class ByteBufferInvoker : ByteBuffer, global::Java.Lang.IComparable {
		public ByteBufferInvoker (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		static readonly JniPeerMembers _members = new JniPeerMembers ("java/nio/ByteBuffer", typeof (ByteBufferInvoker));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		public override unsafe char Char {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getChar' and count(parameter)=0]"
			get {
				const string __id = "getChar.()C";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractCharMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public override unsafe double Double {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getDouble' and count(parameter)=0]"
			get {
				const string __id = "getDouble.()D";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractDoubleMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public override unsafe float Float {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getFloat' and count(parameter)=0]"
			get {
				const string __id = "getFloat.()F";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractSingleMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public override unsafe int Int {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getInt' and count(parameter)=0]"
			get {
				const string __id = "getInt.()I";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public override unsafe bool IsDirect {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='isDirect' and count(parameter)=0]"
			get {
				const string __id = "isDirect.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public override unsafe long Long {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getLong' and count(parameter)=0]"
			get {
				const string __id = "getLong.()J";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractInt64Method (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public override unsafe short Short {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getShort' and count(parameter)=0]"
			get {
				const string __id = "getShort.()S";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractInt16Method (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asCharBuffer' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("asCharBuffer", "()Ljava/nio/CharBuffer;")]
		public override unsafe global::Java.Nio.CharBuffer? AsCharBuffer ()
		{
			const string __id = "asCharBuffer.()Ljava/nio/CharBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asDoubleBuffer' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("asDoubleBuffer", "()Ljava/nio/DoubleBuffer;")]
		public override unsafe global::Java.Nio.DoubleBuffer? AsDoubleBuffer ()
		{
			const string __id = "asDoubleBuffer.()Ljava/nio/DoubleBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.DoubleBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asFloatBuffer' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("asFloatBuffer", "()Ljava/nio/FloatBuffer;")]
		public override unsafe global::Java.Nio.FloatBuffer? AsFloatBuffer ()
		{
			const string __id = "asFloatBuffer.()Ljava/nio/FloatBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.FloatBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asIntBuffer' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("asIntBuffer", "()Ljava/nio/IntBuffer;")]
		public override unsafe global::Java.Nio.IntBuffer? AsIntBuffer ()
		{
			const string __id = "asIntBuffer.()Ljava/nio/IntBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.IntBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asLongBuffer' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("asLongBuffer", "()Ljava/nio/LongBuffer;")]
		public override unsafe global::Java.Nio.LongBuffer? AsLongBuffer ()
		{
			const string __id = "asLongBuffer.()Ljava/nio/LongBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asReadOnlyBuffer' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("asReadOnlyBuffer", "()Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? AsReadOnlyBuffer ()
		{
			const string __id = "asReadOnlyBuffer.()Ljava/nio/ByteBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asShortBuffer' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("asShortBuffer", "()Ljava/nio/ShortBuffer;")]
		public override unsafe global::Java.Nio.ShortBuffer? AsShortBuffer ()
		{
			const string __id = "asShortBuffer.()Ljava/nio/ShortBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ShortBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='compact' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("compact", "()Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? Compact ()
		{
			const string __id = "compact.()Ljava/nio/ByteBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='duplicate' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("duplicate", "()Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? Duplicate ()
		{
			const string __id = "duplicate.()Ljava/nio/ByteBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='get' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("get", "()B")]
		public override unsafe sbyte Get ()
		{
			const string __id = "get.()B";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractSByteMethod (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='get' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("get", "(I)B")]
		public override unsafe sbyte Get (int p0)
		{
			const string __id = "get.(I)B";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractSByteMethod (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getChar' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("getChar", "(I)C")]
		public override unsafe char GetChar (int p0)
		{
			const string __id = "getChar.(I)C";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractCharMethod (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getDouble' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("getDouble", "(I)D")]
		public override unsafe double GetDouble (int p0)
		{
			const string __id = "getDouble.(I)D";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractDoubleMethod (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getFloat' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("getFloat", "(I)F")]
		public override unsafe float GetFloat (int p0)
		{
			const string __id = "getFloat.(I)F";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractSingleMethod (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getInt' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("getInt", "(I)I")]
		public override unsafe int GetInt (int p0)
		{
			const string __id = "getInt.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getLong' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("getLong", "(I)J")]
		public override unsafe long GetLong (int p0)
		{
			const string __id = "getLong.(I)J";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractInt64Method (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getShort' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("getShort", "(I)S")]
		public override unsafe short GetShort (int p0)
		{
			const string __id = "getShort.(I)S";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractInt16Method (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='put' and count(parameter)=1 and parameter[1][@type='byte']]"
		[global::Java.Interop.JniMethodSignature ("put", "(B)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? Put (sbyte p0)
		{
			const string __id = "put.(B)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='put' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte']]"
		[global::Java.Interop.JniMethodSignature ("put", "(IB)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? Put (int p0, sbyte p1)
		{
			const string __id = "put.(IB)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putChar' and count(parameter)=1 and parameter[1][@type='char']]"
		[global::Java.Interop.JniMethodSignature ("putChar", "(C)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutChar (char p0)
		{
			const string __id = "putChar.(C)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((ushort)p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putChar' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='char']]"
		[global::Java.Interop.JniMethodSignature ("putChar", "(IC)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutChar (int p0, char p1)
		{
			const string __id = "putChar.(IC)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue ((ushort)p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putDouble' and count(parameter)=1 and parameter[1][@type='double']]"
		[global::Java.Interop.JniMethodSignature ("putDouble", "(D)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutDouble (double p0)
		{
			const string __id = "putDouble.(D)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putDouble' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='double']]"
		[global::Java.Interop.JniMethodSignature ("putDouble", "(ID)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutDouble (int p0, double p1)
		{
			const string __id = "putDouble.(ID)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putFloat' and count(parameter)=1 and parameter[1][@type='float']]"
		[global::Java.Interop.JniMethodSignature ("putFloat", "(F)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutFloat (float p0)
		{
			const string __id = "putFloat.(F)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putFloat' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='float']]"
		[global::Java.Interop.JniMethodSignature ("putFloat", "(IF)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutFloat (int p0, float p1)
		{
			const string __id = "putFloat.(IF)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putInt' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("putInt", "(I)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutInt (int p0)
		{
			const string __id = "putInt.(I)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putInt' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("putInt", "(II)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutInt (int p0, int p1)
		{
			const string __id = "putInt.(II)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putLong' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='long']]"
		[global::Java.Interop.JniMethodSignature ("putLong", "(IJ)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutLong (int p0, long p1)
		{
			const string __id = "putLong.(IJ)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putLong' and count(parameter)=1 and parameter[1][@type='long']]"
		[global::Java.Interop.JniMethodSignature ("putLong", "(J)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutLong (long p0)
		{
			const string __id = "putLong.(J)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putShort' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='short']]"
		[global::Java.Interop.JniMethodSignature ("putShort", "(IS)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutShort (int p0, short p1)
		{
			const string __id = "putShort.(IS)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putShort' and count(parameter)=1 and parameter[1][@type='short']]"
		[global::Java.Interop.JniMethodSignature ("putShort", "(S)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutShort (short p0)
		{
			const string __id = "putShort.(S)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='slice' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("slice", "()Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? Slice ()
		{
			const string __id = "slice.()Ljava/nio/ByteBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='slice' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("slice", "(II)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? Slice (int p0, int p1)
		{
			const string __id = "slice.(II)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		public override unsafe bool IsReadOnly {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='isReadOnly' and count(parameter)=0]"
			get {
				const string __id = "isReadOnly.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='array' and count(parameter)=0]"
		//[global::Java.Interop.JniMethodSignature ("array", "()Ljava/lang/Object;")]
		//public override unsafe global::Java.Lang.Object? Array ()
		//{
		//	const string __id = "array.()Ljava/lang/Object;";
		//	try {
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='duplicate' and count(parameter)=0]"
		//[global::Java.Interop.JniMethodSignature ("duplicate", "()Ljava/nio/Buffer;")]
		//public override unsafe global::Java.Nio.Buffer? Duplicate ()
		//{
		//	const string __id = "duplicate.()Ljava/nio/Buffer;";
		//	try {
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='slice' and count(parameter)=0]"
		//[global::Java.Interop.JniMethodSignature ("slice", "()Ljava/nio/Buffer;")]
		//public override unsafe global::Java.Nio.Buffer? Slice ()
		//{
		//	const string __id = "slice.()Ljava/nio/Buffer;";
		//	try {
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='slice' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		//[global::Java.Interop.JniMethodSignature ("slice", "(II)Ljava/nio/Buffer;")]
		//public override unsafe global::Java.Nio.Buffer? Slice (int p0, int p1)
		//{
		//	const string __id = "slice.(II)Ljava/nio/Buffer;";
		//	try {
		//		JniArgumentValue* __args = stackalloc JniArgumentValue [2];
		//		__args [0] = new JniArgumentValue (p0);
		//		__args [1] = new JniArgumentValue (p1);
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

	}
}
