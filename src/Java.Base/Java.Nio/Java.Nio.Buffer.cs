//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Java.Interop;

namespace Java.Nio {

	// Metadata.xml XPath class reference: path="/api/package[@name='java.nio']/class[@name='Buffer']"
	[global::Java.Interop.JniTypeSignature ("java/nio/Buffer", GenerateJavaPeer=false, InvokerType=typeof (BufferInvoker))]
	public abstract partial class Buffer : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new JniPeerMembers ("java/nio/Buffer", typeof (Buffer));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		protected Buffer (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		public virtual bool HasArray {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='hasArray' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("hasArray", "()Z")]
			get; 
		}

		public unsafe bool HasRemaining {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='hasRemaining' and count(parameter)=0]"
			get {
				const string __id = "hasRemaining.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public virtual bool IsDirect {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='isDirect' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("isDirect", "()Z")]
			get; 
		}

		public virtual bool IsReadOnly {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='isReadOnly' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("isReadOnly", "()Z")]
			get; 
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='array' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("array", "()Ljava/lang/Object;")]
		public virtual unsafe global::Java.Lang.Object? Array ()
		{
			const string __id = "array.()Ljava/lang/Object;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='arrayOffset' and count(parameter)=0]"
		public abstract int ArrayOffset ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='capacity' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("capacity", "()I")]
		public unsafe int Capacity ()
		{
			const string __id = "capacity.()I";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='clear' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("clear", "()Ljava/nio/Buffer;")]
		public virtual unsafe global::Java.Nio.Buffer? Clear ()
		{
			const string __id = "clear.()Ljava/nio/Buffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='duplicate' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("duplicate", "()Ljava/nio/Buffer;")]
		public virtual unsafe global::Java.Nio.Buffer? Duplicate ()
		{
			const string __id = "duplicate.()Ljava/nio/Buffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='flip' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("flip", "()Ljava/nio/Buffer;")]
		public unsafe global::Java.Nio.Buffer? Flip ()
		{
			const string __id = "flip.()Ljava/nio/Buffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='limit' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("limit", "()I")]
		public unsafe int Limit ()
		{
			const string __id = "limit.()I";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='limit' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("limit", "(I)Ljava/nio/Buffer;")]
		public virtual unsafe global::Java.Nio.Buffer? Limit (int newLimit)
		{
			const string __id = "limit.(I)Ljava/nio/Buffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (newLimit);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='mark' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("mark", "()Ljava/nio/Buffer;")]
		public virtual unsafe global::Java.Nio.Buffer? Mark ()
		{
			const string __id = "mark.()Ljava/nio/Buffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='position' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("position", "()I")]
		public unsafe int Position ()
		{
			const string __id = "position.()I";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='position' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("position", "(I)Ljava/nio/Buffer;")]
		public virtual unsafe global::Java.Nio.Buffer? Position (int newPosition)
		{
			const string __id = "position.(I)Ljava/nio/Buffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (newPosition);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='remaining' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("remaining", "()I")]
		public unsafe int Remaining ()
		{
			const string __id = "remaining.()I";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='reset' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("reset", "()Ljava/nio/Buffer;")]
		public virtual unsafe global::Java.Nio.Buffer? Reset ()
		{
			const string __id = "reset.()Ljava/nio/Buffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='rewind' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("rewind", "()Ljava/nio/Buffer;")]
		public virtual unsafe global::Java.Nio.Buffer? Rewind ()
		{
			const string __id = "rewind.()Ljava/nio/Buffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='slice' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("slice", "()Ljava/nio/Buffer;")]
		public virtual unsafe global::Java.Nio.Buffer? Slice ()
		{
			const string __id = "slice.()Ljava/nio/Buffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='slice' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("slice", "(II)Ljava/nio/Buffer;")]
		public virtual unsafe global::Java.Nio.Buffer? Slice (int p0, int p1)
		{
			const string __id = "slice.(II)Ljava/nio/Buffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

	}

	[global::Java.Interop.JniTypeSignature ("java/nio/Buffer", GenerateJavaPeer=false)]
	internal partial class BufferInvoker : Buffer {
		public BufferInvoker (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		static readonly JniPeerMembers _members = new JniPeerMembers ("java/nio/Buffer", typeof (BufferInvoker));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		public override unsafe bool HasArray {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='hasArray' and count(parameter)=0]"
			get {
				const string __id = "hasArray.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public override unsafe bool IsDirect {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='isDirect' and count(parameter)=0]"
			get {
				const string __id = "isDirect.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public override unsafe bool IsReadOnly {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='isReadOnly' and count(parameter)=0]"
			get {
				const string __id = "isReadOnly.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='array' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("array", "()Ljava/lang/Object;")]
		public override unsafe global::Java.Lang.Object? Array ()
		{
			const string __id = "array.()Ljava/lang/Object;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='arrayOffset' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("arrayOffset", "()I")]
		public override unsafe int ArrayOffset ()
		{
			const string __id = "arrayOffset.()I";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='duplicate' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("duplicate", "()Ljava/nio/Buffer;")]
		public override unsafe global::Java.Nio.Buffer? Duplicate ()
		{
			const string __id = "duplicate.()Ljava/nio/Buffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='slice' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("slice", "()Ljava/nio/Buffer;")]
		public override unsafe global::Java.Nio.Buffer? Slice ()
		{
			const string __id = "slice.()Ljava/nio/Buffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='slice' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("slice", "(II)Ljava/nio/Buffer;")]
		public override unsafe global::Java.Nio.Buffer? Slice (int p0, int p1)
		{
			const string __id = "slice.(II)Ljava/nio/Buffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

	}
}
