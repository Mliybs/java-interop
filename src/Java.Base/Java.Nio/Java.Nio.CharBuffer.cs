//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Java.Interop;
using Java.Lang;

namespace Java.Nio {

	partial class CharBuffer
	{
		IAppendable? IAppendable.Append (char p0) => Append (p0);

		IAppendable? IAppendable.Append (ICharSequence? p0) => Append (p0);

		IAppendable? IAppendable.Append (ICharSequence? p0, int p1, int p2) => Append (p0, p1, p2);
	}

	// Metadata.xml XPath class reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']"
	[global::Java.Interop.JniTypeSignature ("java/nio/CharBuffer", GenerateJavaPeer=false, InvokerType=typeof (CharBufferInvoker))]
	public abstract partial class CharBuffer : global::Java.Nio.Buffer, global::System.Collections.IEnumerable, global::Java.Lang.IAppendable, global::Java.Lang.ICharSequence, global::Java.Lang.IComparable/*, global::Java.Lang.IReadable*/ {
		static readonly JniPeerMembers _members = new JniPeerMembers ("java/nio/CharBuffer", typeof (CharBuffer));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		protected CharBuffer (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		public override unsafe bool HasArray {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='hasArray' and count(parameter)=0]"
			get {
				const string __id = "hasArray.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		// skipped generating property IsDirect because its Java method declaration is variant that we cannot represent in C#

		public unsafe bool IsEmpty {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='isEmpty' and count(parameter)=0]"
			get {
				const string __id = "isEmpty.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='allocate' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("allocate", "(I)Ljava/nio/CharBuffer;")]
		public static unsafe global::Java.Nio.CharBuffer? Allocate (int capacity)
		{
			const string __id = "allocate.(I)Ljava/nio/CharBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (capacity);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='append' and count(parameter)=1 and parameter[1][@type='char']]"
		[global::Java.Interop.JniMethodSignature ("append", "(C)Ljava/nio/CharBuffer;")]
		public virtual unsafe global::Java.Nio.CharBuffer? Append (char c)
		{
			const string __id = "append.(C)Ljava/nio/CharBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((ushort)c);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='append' and count(parameter)=1 and parameter[1][@type='java.lang.CharSequence']]"
		[global::Java.Interop.JniMethodSignature ("append", "(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;")]
		public virtual unsafe global::Java.Nio.CharBuffer? Append (global::Java.Lang.ICharSequence? csq)
		{
			const string __id = "append.(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (csq);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (csq);
			}
		}

		public global::Java.Nio.CharBuffer? Append (string? csq)
		{
			var jls_csq = csq == null ? null : new global::Java.Lang.String (csq);
			global::Java.Nio.CharBuffer? __result = Append (jls_csq);
			var __rsval = __result;
			jls_csq?.Dispose ();
			return __rsval;
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='append' and count(parameter)=3 and parameter[1][@type='java.lang.CharSequence'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("append", "(Ljava/lang/CharSequence;II)Ljava/nio/CharBuffer;")]
		public virtual unsafe global::Java.Nio.CharBuffer? Append (global::Java.Lang.ICharSequence? csq, int start, int end)
		{
			const string __id = "append.(Ljava/lang/CharSequence;II)Ljava/nio/CharBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (csq);
				__args [1] = new JniArgumentValue (start);
				__args [2] = new JniArgumentValue (end);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (csq);
			}
		}

		public global::Java.Nio.CharBuffer? Append (string? csq, int start, int end)
		{
			var jls_csq = csq == null ? null : new global::Java.Lang.String (csq);
			global::Java.Nio.CharBuffer? __result = Append (jls_csq, start, end);
			var __rsval = __result;
			jls_csq?.Dispose ();
			return __rsval;
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='array' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("array", "()[C")]
		public unsafe global::Java.Interop.JavaCharArray? Array ()
		{
			const string __id = "array.()[C";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Interop.JavaCharArray>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='arrayOffset' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("arrayOffset", "()I")]
		public override sealed unsafe int ArrayOffset ()
		{
			const string __id = "arrayOffset.()I";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='asReadOnlyBuffer' and count(parameter)=0]"
		public abstract global::Java.Nio.CharBuffer? AsReadOnlyBuffer ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='charAt' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("charAt", "(I)C")]
		public unsafe char CharAt (int index)
		{
			const string __id = "charAt.(I)C";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (index);
				var __rm = _members.InstanceMethods.InvokeNonvirtualCharMethod (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='clear' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("clear", "()Ljava/nio/CharBuffer;")]
		public unsafe global::Java.Nio.CharBuffer? Clear ()
		{
			const string __id = "clear.()Ljava/nio/CharBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='compact' and count(parameter)=0]"
		public abstract global::Java.Nio.CharBuffer? Compact ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='compareTo' and count(parameter)=1 and parameter[1][@type='java.nio.CharBuffer']]"
		[global::Java.Interop.JniMethodSignature ("compareTo", "(Ljava/nio/CharBuffer;)I")]
		public virtual unsafe int CompareTo (global::Java.Nio.CharBuffer? that)
		{
			const string __id = "compareTo.(Ljava/nio/CharBuffer;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (that);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (that);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='duplicate' and count(parameter)=0]"
		public abstract global::Java.Nio.CharBuffer? Duplicate ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='flip' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("flip", "()Ljava/nio/CharBuffer;")]
		public unsafe global::Java.Nio.CharBuffer? Flip ()
		{
			const string __id = "flip.()Ljava/nio/CharBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='get' and count(parameter)=0]"
		public abstract char Get ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='get' and count(parameter)=1 and parameter[1][@type='char[]']]"
		[global::Java.Interop.JniMethodSignature ("get", "([C)Ljava/nio/CharBuffer;")]
		public virtual unsafe global::Java.Nio.CharBuffer? Get (global::Java.Interop.JavaCharArray? dst)
		{
			const string __id = "get.([C)Ljava/nio/CharBuffer;";
			var native_dst = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalCharArray (dst);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_dst);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_dst != null) {
					native_dst.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (dst);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='get' and count(parameter)=3 and parameter[1][@type='char[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("get", "([CII)Ljava/nio/CharBuffer;")]
		public virtual unsafe global::Java.Nio.CharBuffer? Get (global::Java.Interop.JavaCharArray? dst, int offset, int length)
		{
			const string __id = "get.([CII)Ljava/nio/CharBuffer;";
			var native_dst = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalCharArray (dst);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_dst);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (length);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_dst != null) {
					native_dst.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (dst);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='get' and count(parameter)=1 and parameter[1][@type='int']]"
		public abstract char Get (int p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='get' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='char[]']]"
		[global::Java.Interop.JniMethodSignature ("get", "(I[C)Ljava/nio/CharBuffer;")]
		public virtual unsafe global::Java.Nio.CharBuffer? Get (int index, global::Java.Interop.JavaCharArray? dst)
		{
			const string __id = "get.(I[C)Ljava/nio/CharBuffer;";
			var native_dst = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalCharArray (dst);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (native_dst);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_dst != null) {
					native_dst.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (dst);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='get' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='char[]'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("get", "(I[CII)Ljava/nio/CharBuffer;")]
		public virtual unsafe global::Java.Nio.CharBuffer? Get (int index, global::Java.Interop.JavaCharArray? dst, int offset, int length)
		{
			const string __id = "get.(I[CII)Ljava/nio/CharBuffer;";
			var native_dst = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalCharArray (dst);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (native_dst);
				__args [2] = new JniArgumentValue (offset);
				__args [3] = new JniArgumentValue (length);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_dst != null) {
					native_dst.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (dst);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='length' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("length", "()I")]
		public unsafe int Length ()
		{
			const string __id = "length.()I";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='limit' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("limit", "(I)Ljava/nio/CharBuffer;")]
		public unsafe global::Java.Nio.CharBuffer? Limit (int newLimit)
		{
			const string __id = "limit.(I)Ljava/nio/CharBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (newLimit);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='mark' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("mark", "()Ljava/nio/CharBuffer;")]
		public unsafe global::Java.Nio.CharBuffer? Mark ()
		{
			const string __id = "mark.()Ljava/nio/CharBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='mismatch' and count(parameter)=1 and parameter[1][@type='java.nio.CharBuffer']]"
		[global::Java.Interop.JniMethodSignature ("mismatch", "(Ljava/nio/CharBuffer;)I")]
		public virtual unsafe int Mismatch (global::Java.Nio.CharBuffer? that)
		{
			const string __id = "mismatch.(Ljava/nio/CharBuffer;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (that);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (that);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='order' and count(parameter)=0]"
		public abstract global::Java.Nio.ByteOrder? Order ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='position' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("position", "(I)Ljava/nio/CharBuffer;")]
		public unsafe global::Java.Nio.CharBuffer? Position (int newPosition)
		{
			const string __id = "position.(I)Ljava/nio/CharBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (newPosition);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='put' and count(parameter)=1 and parameter[1][@type='char']]"
		public abstract global::Java.Nio.CharBuffer? Put (char p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='put' and count(parameter)=1 and parameter[1][@type='char[]']]"
		[global::Java.Interop.JniMethodSignature ("put", "([C)Ljava/nio/CharBuffer;")]
		public unsafe global::Java.Nio.CharBuffer? Put (global::Java.Interop.JavaCharArray? src)
		{
			const string __id = "put.([C)Ljava/nio/CharBuffer;";
			var native_src = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalCharArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_src);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_src != null) {
					native_src.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='put' and count(parameter)=3 and parameter[1][@type='char[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("put", "([CII)Ljava/nio/CharBuffer;")]
		public virtual unsafe global::Java.Nio.CharBuffer? Put (global::Java.Interop.JavaCharArray? src, int offset, int length)
		{
			const string __id = "put.([CII)Ljava/nio/CharBuffer;";
			var native_src = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalCharArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_src);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (length);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_src != null) {
					native_src.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='put' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='char']]"
		public abstract global::Java.Nio.CharBuffer? Put (int p0, char p1);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='put' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='char[]']]"
		[global::Java.Interop.JniMethodSignature ("put", "(I[C)Ljava/nio/CharBuffer;")]
		public virtual unsafe global::Java.Nio.CharBuffer? Put (int index, global::Java.Interop.JavaCharArray? src)
		{
			const string __id = "put.(I[C)Ljava/nio/CharBuffer;";
			var native_src = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalCharArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (native_src);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_src != null) {
					native_src.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='put' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='char[]'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("put", "(I[CII)Ljava/nio/CharBuffer;")]
		public virtual unsafe global::Java.Nio.CharBuffer? Put (int index, global::Java.Interop.JavaCharArray? src, int offset, int length)
		{
			const string __id = "put.(I[CII)Ljava/nio/CharBuffer;";
			var native_src = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalCharArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (native_src);
				__args [2] = new JniArgumentValue (offset);
				__args [3] = new JniArgumentValue (length);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_src != null) {
					native_src.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='put' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='java.nio.CharBuffer'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("put", "(ILjava/nio/CharBuffer;II)Ljava/nio/CharBuffer;")]
		public virtual unsafe global::Java.Nio.CharBuffer? Put (int index, global::Java.Nio.CharBuffer? src, int offset, int length)
		{
			const string __id = "put.(ILjava/nio/CharBuffer;II)Ljava/nio/CharBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (src);
				__args [2] = new JniArgumentValue (offset);
				__args [3] = new JniArgumentValue (length);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='put' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::Java.Interop.JniMethodSignature ("put", "(Ljava/lang/String;)Ljava/nio/CharBuffer;")]
		public unsafe global::Java.Nio.CharBuffer? Put (string? src)
		{
			const string __id = "put.(Ljava/lang/String;)Ljava/nio/CharBuffer;";
			var native_src = global::Java.Interop.JniEnvironment.Strings.NewString (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_src);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='put' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("put", "(Ljava/lang/String;II)Ljava/nio/CharBuffer;")]
		public virtual unsafe global::Java.Nio.CharBuffer? Put (string? src, int start, int end)
		{
			const string __id = "put.(Ljava/lang/String;II)Ljava/nio/CharBuffer;";
			var native_src = global::Java.Interop.JniEnvironment.Strings.NewString (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_src);
				__args [1] = new JniArgumentValue (start);
				__args [2] = new JniArgumentValue (end);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::Java.Interop.JniObjectReference.Dispose (ref native_src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='put' and count(parameter)=1 and parameter[1][@type='java.nio.CharBuffer']]"
		[global::Java.Interop.JniMethodSignature ("put", "(Ljava/nio/CharBuffer;)Ljava/nio/CharBuffer;")]
		public virtual unsafe global::Java.Nio.CharBuffer? Put (global::Java.Nio.CharBuffer? src)
		{
			const string __id = "put.(Ljava/nio/CharBuffer;)Ljava/nio/CharBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (src);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='read' and count(parameter)=1 and parameter[1][@type='java.nio.CharBuffer']]"
		[global::Java.Interop.JniMethodSignature ("read", "(Ljava/nio/CharBuffer;)I")]
		public virtual unsafe int Read (global::Java.Nio.CharBuffer? target)
		{
			const string __id = "read.(Ljava/nio/CharBuffer;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (target);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (target);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='reset' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("reset", "()Ljava/nio/CharBuffer;")]
		public unsafe global::Java.Nio.CharBuffer? Reset ()
		{
			const string __id = "reset.()Ljava/nio/CharBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='rewind' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("rewind", "()Ljava/nio/CharBuffer;")]
		public unsafe global::Java.Nio.CharBuffer? Rewind ()
		{
			const string __id = "rewind.()Ljava/nio/CharBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='slice' and count(parameter)=0]"
		public abstract global::Java.Nio.CharBuffer? Slice ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='slice' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		public abstract global::Java.Nio.CharBuffer? Slice (int p0, int p1);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='subSequence' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		public abstract global::Java.Lang.ICharSequence? SubSequenceFormatted (int p0, int p1);

		public string? SubSequence (int p0, int p1)
		{
			global::Java.Lang.ICharSequence? __result = SubSequenceFormatted (p0, p1);
			var __rsval = __result?.ToString ();
			return __rsval;
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='wrap' and count(parameter)=1 and parameter[1][@type='char[]']]"
		[global::Java.Interop.JniMethodSignature ("wrap", "([C)Ljava/nio/CharBuffer;")]
		public static unsafe global::Java.Nio.CharBuffer? Wrap (global::Java.Interop.JavaCharArray? array)
		{
			const string __id = "wrap.([C)Ljava/nio/CharBuffer;";
			var native_array = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalCharArray (array);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_array);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_array != null) {
					native_array.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (array);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='wrap' and count(parameter)=3 and parameter[1][@type='char[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("wrap", "([CII)Ljava/nio/CharBuffer;")]
		public static unsafe global::Java.Nio.CharBuffer? Wrap (global::Java.Interop.JavaCharArray? array, int offset, int length)
		{
			const string __id = "wrap.([CII)Ljava/nio/CharBuffer;";
			var native_array = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalCharArray (array);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_array);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (length);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_array != null) {
					native_array.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (array);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='wrap' and count(parameter)=1 and parameter[1][@type='java.lang.CharSequence']]"
		[global::Java.Interop.JniMethodSignature ("wrap", "(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;")]
		public static unsafe global::Java.Nio.CharBuffer? Wrap (global::Java.Lang.ICharSequence? csq)
		{
			const string __id = "wrap.(Ljava/lang/CharSequence;)Ljava/nio/CharBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (csq);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (csq);
			}
		}

		public static global::Java.Nio.CharBuffer? Wrap (string? csq)
		{
			var jls_csq = csq == null ? null : new global::Java.Lang.String (csq);
			global::Java.Nio.CharBuffer? __result = Wrap (jls_csq);
			var __rsval = __result;
			jls_csq?.Dispose ();
			return __rsval;
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='wrap' and count(parameter)=3 and parameter[1][@type='java.lang.CharSequence'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("wrap", "(Ljava/lang/CharSequence;II)Ljava/nio/CharBuffer;")]
		public static unsafe global::Java.Nio.CharBuffer? Wrap (global::Java.Lang.ICharSequence? csq, int start, int end)
		{
			const string __id = "wrap.(Ljava/lang/CharSequence;II)Ljava/nio/CharBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (csq);
				__args [1] = new JniArgumentValue (start);
				__args [2] = new JniArgumentValue (end);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (csq);
			}
		}

		public static global::Java.Nio.CharBuffer? Wrap (string? csq, int start, int end)
		{
			var jls_csq = csq == null ? null : new global::Java.Lang.String (csq);
			global::Java.Nio.CharBuffer? __result = Wrap (jls_csq, start, end);
			var __rsval = __result;
			jls_csq?.Dispose ();
			return __rsval;
		}

		// This method is explicitly implemented as a member of an instantiated Java.Lang.IComparable
		int global::Java.Lang.IComparable.CompareTo (global::Java.Lang.Object? p0)
		{
			return CompareTo (global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer>((p0?.PeerReference ?? default).Handle));
		}

		global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator ()
		{
			return GetEnumerator ();
		}

		public global::System.Collections.Generic.IEnumerator<char> GetEnumerator ()
		{
			for (int i = 0; i < Length (); i++)
				yield return CharAt (i);
		}

	}

	[global::Java.Interop.JniTypeSignature ("java/nio/CharBuffer", GenerateJavaPeer=false)]
	internal partial class CharBufferInvoker : CharBuffer, global::Java.Lang.IComparable {
		public CharBufferInvoker (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		static readonly JniPeerMembers _members = new JniPeerMembers ("java/nio/CharBuffer", typeof (CharBufferInvoker));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		public override unsafe bool IsDirect {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='isDirect' and count(parameter)=0]"
			get {
				const string __id = "isDirect.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='asReadOnlyBuffer' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("asReadOnlyBuffer", "()Ljava/nio/CharBuffer;")]
		public override unsafe global::Java.Nio.CharBuffer? AsReadOnlyBuffer ()
		{
			const string __id = "asReadOnlyBuffer.()Ljava/nio/CharBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='compact' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("compact", "()Ljava/nio/CharBuffer;")]
		public override unsafe global::Java.Nio.CharBuffer? Compact ()
		{
			const string __id = "compact.()Ljava/nio/CharBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='duplicate' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("duplicate", "()Ljava/nio/CharBuffer;")]
		public override unsafe global::Java.Nio.CharBuffer? Duplicate ()
		{
			const string __id = "duplicate.()Ljava/nio/CharBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='get' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("get", "()C")]
		public override unsafe char Get ()
		{
			const string __id = "get.()C";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractCharMethod (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='get' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("get", "(I)C")]
		public override unsafe char Get (int p0)
		{
			const string __id = "get.(I)C";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractCharMethod (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='order' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("order", "()Ljava/nio/ByteOrder;")]
		public override unsafe global::Java.Nio.ByteOrder? Order ()
		{
			const string __id = "order.()Ljava/nio/ByteOrder;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteOrder> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='put' and count(parameter)=1 and parameter[1][@type='char']]"
		[global::Java.Interop.JniMethodSignature ("put", "(C)Ljava/nio/CharBuffer;")]
		public override unsafe global::Java.Nio.CharBuffer? Put (char p0)
		{
			const string __id = "put.(C)Ljava/nio/CharBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((ushort)p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='put' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='char']]"
		[global::Java.Interop.JniMethodSignature ("put", "(IC)Ljava/nio/CharBuffer;")]
		public override unsafe global::Java.Nio.CharBuffer? Put (int p0, char p1)
		{
			const string __id = "put.(IC)Ljava/nio/CharBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue ((ushort)p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='slice' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("slice", "()Ljava/nio/CharBuffer;")]
		public override unsafe global::Java.Nio.CharBuffer? Slice ()
		{
			const string __id = "slice.()Ljava/nio/CharBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='slice' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("slice", "(II)Ljava/nio/CharBuffer;")]
		public override unsafe global::Java.Nio.CharBuffer? Slice (int p0, int p1)
		{
			const string __id = "slice.(II)Ljava/nio/CharBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='CharBuffer']/method[@name='subSequence' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[return:global::Android.Runtime.GeneratedEnum]
		[global::Java.Interop.JniMethodSignature ("subSequence", "(II)Ljava/lang/CharSequence;")]
		public override unsafe global::Java.Lang.ICharSequence? SubSequenceFormatted (int p0, int p1)
		{
			const string __id = "subSequence.(II)Ljava/lang/CharSequence;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.ICharSequence> (ref __rm, JniObjectReferenceOptions.Copy);
			} finally {
			}
		}

		public override unsafe bool IsReadOnly {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='isReadOnly' and count(parameter)=0]"
			get {
				const string __id = "isReadOnly.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='array' and count(parameter)=0]"
		//[global::Java.Interop.JniMethodSignature ("array", "()Ljava/lang/Object;")]
		//public override unsafe global::Java.Lang.Object? Array ()
		//{
		//	const string __id = "array.()Ljava/lang/Object;";
		//	try {
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='duplicate' and count(parameter)=0]"
		//[global::Java.Interop.JniMethodSignature ("duplicate", "()Ljava/nio/Buffer;")]
		//public override unsafe global::Java.Nio.Buffer? Duplicate ()
		//{
		//	const string __id = "duplicate.()Ljava/nio/Buffer;";
		//	try {
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='slice' and count(parameter)=0]"
		//[global::Java.Interop.JniMethodSignature ("slice", "()Ljava/nio/Buffer;")]
		//public override unsafe global::Java.Nio.Buffer? Slice ()
		//{
		//	const string __id = "slice.()Ljava/nio/Buffer;";
		//	try {
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='slice' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		//[global::Java.Interop.JniMethodSignature ("slice", "(II)Ljava/nio/Buffer;")]
		//public override unsafe global::Java.Nio.Buffer? Slice (int p0, int p1)
		//{
		//	const string __id = "slice.(II)Ljava/nio/Buffer;";
		//	try {
		//		JniArgumentValue* __args = stackalloc JniArgumentValue [2];
		//		__args [0] = new JniArgumentValue (p0);
		//		__args [1] = new JniArgumentValue (p1);
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

	}
}
