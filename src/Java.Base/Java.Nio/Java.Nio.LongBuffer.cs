//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Java.Interop;

namespace Java.Nio {

	// Metadata.xml XPath class reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']"
	[global::Java.Interop.JniTypeSignature ("java/nio/LongBuffer", GenerateJavaPeer=false, InvokerType=typeof (LongBufferInvoker))]
	public abstract partial class LongBuffer : global::Java.Nio.Buffer, global::Java.Lang.IComparable {
		static readonly JniPeerMembers _members = new JniPeerMembers ("java/nio/LongBuffer", typeof (LongBuffer));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		protected LongBuffer (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		public override unsafe bool HasArray {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='hasArray' and count(parameter)=0]"
			get {
				const string __id = "hasArray.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		// skipped generating property IsDirect because its Java method declaration is variant that we cannot represent in C#

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='allocate' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("allocate", "(I)Ljava/nio/LongBuffer;")]
		public static unsafe global::Java.Nio.LongBuffer? Allocate (int capacity)
		{
			const string __id = "allocate.(I)Ljava/nio/LongBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (capacity);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='array' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("array", "()[J")]
		public unsafe global::Java.Interop.JavaInt64Array? Array ()
		{
			const string __id = "array.()[J";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Interop.JavaInt64Array>(ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='arrayOffset' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("arrayOffset", "()I")]
		public override sealed unsafe int ArrayOffset ()
		{
			const string __id = "arrayOffset.()I";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='asReadOnlyBuffer' and count(parameter)=0]"
		public abstract global::Java.Nio.LongBuffer? AsReadOnlyBuffer ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='clear' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("clear", "()Ljava/nio/LongBuffer;")]
		public unsafe global::Java.Nio.LongBuffer? Clear ()
		{
			const string __id = "clear.()Ljava/nio/LongBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='compact' and count(parameter)=0]"
		public abstract global::Java.Nio.LongBuffer? Compact ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='compareTo' and count(parameter)=1 and parameter[1][@type='java.nio.LongBuffer']]"
		[global::Java.Interop.JniMethodSignature ("compareTo", "(Ljava/nio/LongBuffer;)I")]
		public virtual unsafe int CompareTo (global::Java.Nio.LongBuffer? that)
		{
			const string __id = "compareTo.(Ljava/nio/LongBuffer;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (that);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (that);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='duplicate' and count(parameter)=0]"
		public abstract global::Java.Nio.LongBuffer? Duplicate ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='flip' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("flip", "()Ljava/nio/LongBuffer;")]
		public unsafe global::Java.Nio.LongBuffer? Flip ()
		{
			const string __id = "flip.()Ljava/nio/LongBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='get' and count(parameter)=0]"
		public abstract long Get ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='get' and count(parameter)=1 and parameter[1][@type='int']]"
		public abstract long Get (int p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='get' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='long[]']]"
		[global::Java.Interop.JniMethodSignature ("get", "(I[J)Ljava/nio/LongBuffer;")]
		public virtual unsafe global::Java.Nio.LongBuffer? Get (int index, global::Java.Interop.JavaInt64Array? dst)
		{
			const string __id = "get.(I[J)Ljava/nio/LongBuffer;";
			var native_dst = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalInt64Array (dst);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (native_dst);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_dst != null) {
					native_dst.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (dst);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='get' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='long[]'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("get", "(I[JII)Ljava/nio/LongBuffer;")]
		public virtual unsafe global::Java.Nio.LongBuffer? Get (int index, global::Java.Interop.JavaInt64Array? dst, int offset, int length)
		{
			const string __id = "get.(I[JII)Ljava/nio/LongBuffer;";
			var native_dst = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalInt64Array (dst);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (native_dst);
				__args [2] = new JniArgumentValue (offset);
				__args [3] = new JniArgumentValue (length);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_dst != null) {
					native_dst.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (dst);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='get' and count(parameter)=1 and parameter[1][@type='long[]']]"
		[global::Java.Interop.JniMethodSignature ("get", "([J)Ljava/nio/LongBuffer;")]
		public virtual unsafe global::Java.Nio.LongBuffer? Get (global::Java.Interop.JavaInt64Array? dst)
		{
			const string __id = "get.([J)Ljava/nio/LongBuffer;";
			var native_dst = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalInt64Array (dst);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_dst);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_dst != null) {
					native_dst.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (dst);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='get' and count(parameter)=3 and parameter[1][@type='long[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("get", "([JII)Ljava/nio/LongBuffer;")]
		public virtual unsafe global::Java.Nio.LongBuffer? Get (global::Java.Interop.JavaInt64Array? dst, int offset, int length)
		{
			const string __id = "get.([JII)Ljava/nio/LongBuffer;";
			var native_dst = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalInt64Array (dst);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_dst);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (length);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_dst != null) {
					native_dst.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (dst);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='limit' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("limit", "(I)Ljava/nio/LongBuffer;")]
		public unsafe global::Java.Nio.LongBuffer? Limit (int newLimit)
		{
			const string __id = "limit.(I)Ljava/nio/LongBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (newLimit);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='mark' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("mark", "()Ljava/nio/LongBuffer;")]
		public unsafe global::Java.Nio.LongBuffer? Mark ()
		{
			const string __id = "mark.()Ljava/nio/LongBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='mismatch' and count(parameter)=1 and parameter[1][@type='java.nio.LongBuffer']]"
		[global::Java.Interop.JniMethodSignature ("mismatch", "(Ljava/nio/LongBuffer;)I")]
		public virtual unsafe int Mismatch (global::Java.Nio.LongBuffer? that)
		{
			const string __id = "mismatch.(Ljava/nio/LongBuffer;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (that);
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (that);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='order' and count(parameter)=0]"
		public abstract global::Java.Nio.ByteOrder? Order ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='position' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("position", "(I)Ljava/nio/LongBuffer;")]
		public unsafe global::Java.Nio.LongBuffer? Position (int newPosition)
		{
			const string __id = "position.(I)Ljava/nio/LongBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (newPosition);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='put' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='java.nio.LongBuffer'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("put", "(ILjava/nio/LongBuffer;II)Ljava/nio/LongBuffer;")]
		public virtual unsafe global::Java.Nio.LongBuffer? Put (int index, global::Java.Nio.LongBuffer? src, int offset, int length)
		{
			const string __id = "put.(ILjava/nio/LongBuffer;II)Ljava/nio/LongBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (src);
				__args [2] = new JniArgumentValue (offset);
				__args [3] = new JniArgumentValue (length);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='put' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='long']]"
		public abstract global::Java.Nio.LongBuffer? Put (int p0, long p1);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='put' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='long[]']]"
		[global::Java.Interop.JniMethodSignature ("put", "(I[J)Ljava/nio/LongBuffer;")]
		public virtual unsafe global::Java.Nio.LongBuffer? Put (int index, global::Java.Interop.JavaInt64Array? src)
		{
			const string __id = "put.(I[J)Ljava/nio/LongBuffer;";
			var native_src = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalInt64Array (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (native_src);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_src != null) {
					native_src.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='put' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='long[]'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("put", "(I[JII)Ljava/nio/LongBuffer;")]
		public virtual unsafe global::Java.Nio.LongBuffer? Put (int index, global::Java.Interop.JavaInt64Array? src, int offset, int length)
		{
			const string __id = "put.(I[JII)Ljava/nio/LongBuffer;";
			var native_src = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalInt64Array (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (native_src);
				__args [2] = new JniArgumentValue (offset);
				__args [3] = new JniArgumentValue (length);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_src != null) {
					native_src.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='put' and count(parameter)=1 and parameter[1][@type='java.nio.LongBuffer']]"
		[global::Java.Interop.JniMethodSignature ("put", "(Ljava/nio/LongBuffer;)Ljava/nio/LongBuffer;")]
		public virtual unsafe global::Java.Nio.LongBuffer? Put (global::Java.Nio.LongBuffer? src)
		{
			const string __id = "put.(Ljava/nio/LongBuffer;)Ljava/nio/LongBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (src);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='put' and count(parameter)=1 and parameter[1][@type='long']]"
		public abstract global::Java.Nio.LongBuffer? Put (long p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='put' and count(parameter)=1 and parameter[1][@type='long[]']]"
		[global::Java.Interop.JniMethodSignature ("put", "([J)Ljava/nio/LongBuffer;")]
		public unsafe global::Java.Nio.LongBuffer? Put (global::Java.Interop.JavaInt64Array? src)
		{
			const string __id = "put.([J)Ljava/nio/LongBuffer;";
			var native_src = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalInt64Array (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_src);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_src != null) {
					native_src.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='put' and count(parameter)=3 and parameter[1][@type='long[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("put", "([JII)Ljava/nio/LongBuffer;")]
		public virtual unsafe global::Java.Nio.LongBuffer? Put (global::Java.Interop.JavaInt64Array? src, int offset, int length)
		{
			const string __id = "put.([JII)Ljava/nio/LongBuffer;";
			var native_src = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalInt64Array (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_src);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (length);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_src != null) {
					native_src.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='reset' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("reset", "()Ljava/nio/LongBuffer;")]
		public unsafe global::Java.Nio.LongBuffer? Reset ()
		{
			const string __id = "reset.()Ljava/nio/LongBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='rewind' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("rewind", "()Ljava/nio/LongBuffer;")]
		public unsafe global::Java.Nio.LongBuffer? Rewind ()
		{
			const string __id = "rewind.()Ljava/nio/LongBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='slice' and count(parameter)=0]"
		public abstract global::Java.Nio.LongBuffer? Slice ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='slice' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		public abstract global::Java.Nio.LongBuffer? Slice (int p0, int p1);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='wrap' and count(parameter)=1 and parameter[1][@type='long[]']]"
		[global::Java.Interop.JniMethodSignature ("wrap", "([J)Ljava/nio/LongBuffer;")]
		public static unsafe global::Java.Nio.LongBuffer? Wrap (global::Java.Interop.JavaInt64Array? array)
		{
			const string __id = "wrap.([J)Ljava/nio/LongBuffer;";
			var native_array = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalInt64Array (array);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_array);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_array != null) {
					native_array.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (array);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='wrap' and count(parameter)=3 and parameter[1][@type='long[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("wrap", "([JII)Ljava/nio/LongBuffer;")]
		public static unsafe global::Java.Nio.LongBuffer? Wrap (global::Java.Interop.JavaInt64Array? array, int offset, int length)
		{
			const string __id = "wrap.([JII)Ljava/nio/LongBuffer;";
			var native_array = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalInt64Array (array);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_array);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (length);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				if (native_array != null) {
					native_array.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (array);
			}
		}

		// This method is explicitly implemented as a member of an instantiated Java.Lang.IComparable
		int global::Java.Lang.IComparable.CompareTo (global::Java.Lang.Object? p0)
		{
			return CompareTo (global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer>((p0?.PeerReference ?? default).Handle));
		}

	}

	[global::Java.Interop.JniTypeSignature ("java/nio/LongBuffer", GenerateJavaPeer=false)]
	internal partial class LongBufferInvoker : LongBuffer, global::Java.Lang.IComparable {
		public LongBufferInvoker (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		static readonly JniPeerMembers _members = new JniPeerMembers ("java/nio/LongBuffer", typeof (LongBufferInvoker));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		public override unsafe bool IsDirect {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='isDirect' and count(parameter)=0]"
			get {
				const string __id = "isDirect.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='asReadOnlyBuffer' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("asReadOnlyBuffer", "()Ljava/nio/LongBuffer;")]
		public override unsafe global::Java.Nio.LongBuffer? AsReadOnlyBuffer ()
		{
			const string __id = "asReadOnlyBuffer.()Ljava/nio/LongBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='compact' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("compact", "()Ljava/nio/LongBuffer;")]
		public override unsafe global::Java.Nio.LongBuffer? Compact ()
		{
			const string __id = "compact.()Ljava/nio/LongBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='duplicate' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("duplicate", "()Ljava/nio/LongBuffer;")]
		public override unsafe global::Java.Nio.LongBuffer? Duplicate ()
		{
			const string __id = "duplicate.()Ljava/nio/LongBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='get' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("get", "()J")]
		public override unsafe long Get ()
		{
			const string __id = "get.()J";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractInt64Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='get' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("get", "(I)J")]
		public override unsafe long Get (int p0)
		{
			const string __id = "get.(I)J";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractInt64Method (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='order' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("order", "()Ljava/nio/ByteOrder;")]
		public override unsafe global::Java.Nio.ByteOrder? Order ()
		{
			const string __id = "order.()Ljava/nio/ByteOrder;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteOrder> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='put' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='long']]"
		[global::Java.Interop.JniMethodSignature ("put", "(IJ)Ljava/nio/LongBuffer;")]
		public override unsafe global::Java.Nio.LongBuffer? Put (int p0, long p1)
		{
			const string __id = "put.(IJ)Ljava/nio/LongBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='put' and count(parameter)=1 and parameter[1][@type='long']]"
		[global::Java.Interop.JniMethodSignature ("put", "(J)Ljava/nio/LongBuffer;")]
		public override unsafe global::Java.Nio.LongBuffer? Put (long p0)
		{
			const string __id = "put.(J)Ljava/nio/LongBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='slice' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("slice", "()Ljava/nio/LongBuffer;")]
		public override unsafe global::Java.Nio.LongBuffer? Slice ()
		{
			const string __id = "slice.()Ljava/nio/LongBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='LongBuffer']/method[@name='slice' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("slice", "(II)Ljava/nio/LongBuffer;")]
		public override unsafe global::Java.Nio.LongBuffer? Slice (int p0, int p1)
		{
			const string __id = "slice.(II)Ljava/nio/LongBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		public override unsafe bool IsReadOnly {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='isReadOnly' and count(parameter)=0]"
			get {
				const string __id = "isReadOnly.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='array' and count(parameter)=0]"
		//[global::Java.Interop.JniMethodSignature ("array", "()Ljava/lang/Object;")]
		//public override unsafe global::Java.Lang.Object? Array ()
		//{
		//	const string __id = "array.()Ljava/lang/Object;";
		//	try {
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='duplicate' and count(parameter)=0]"
		//[global::Java.Interop.JniMethodSignature ("duplicate", "()Ljava/nio/Buffer;")]
		//public override unsafe global::Java.Nio.Buffer? Duplicate ()
		//{
		//	const string __id = "duplicate.()Ljava/nio/Buffer;";
		//	try {
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='slice' and count(parameter)=0]"
		//[global::Java.Interop.JniMethodSignature ("slice", "()Ljava/nio/Buffer;")]
		//public override unsafe global::Java.Nio.Buffer? Slice ()
		//{
		//	const string __id = "slice.()Ljava/nio/Buffer;";
		//	try {
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='slice' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		//[global::Java.Interop.JniMethodSignature ("slice", "(II)Ljava/nio/Buffer;")]
		//public override unsafe global::Java.Nio.Buffer? Slice (int p0, int p1)
		//{
		//	const string __id = "slice.(II)Ljava/nio/Buffer;";
		//	try {
		//		JniArgumentValue* __args = stackalloc JniArgumentValue [2];
		//		__args [0] = new JniArgumentValue (p0);
		//		__args [1] = new JniArgumentValue (p1);
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

	}
}
