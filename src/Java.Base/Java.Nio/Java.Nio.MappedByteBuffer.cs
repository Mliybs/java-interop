//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Java.Interop;

namespace Java.Nio {

	// Metadata.xml XPath class reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']"
	[global::Java.Interop.JniTypeSignature ("java/nio/MappedByteBuffer", GenerateJavaPeer=false, InvokerType=typeof (MappedByteBufferInvoker))]
	public abstract partial class MappedByteBuffer : global::Java.Nio.ByteBuffer {
		static readonly JniPeerMembers _members = new JniPeerMembers ("java/nio/MappedByteBuffer", typeof (MappedByteBuffer));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		protected MappedByteBuffer (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		public unsafe bool IsLoaded {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='isLoaded' and count(parameter)=0]"
			get {
				const string __id = "isLoaded.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeNonvirtualBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='clear' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("clear", "()Ljava/nio/MappedByteBuffer;")]
		public unsafe global::Java.Nio.MappedByteBuffer? Clear ()
		{
			const string __id = "clear.()Ljava/nio/MappedByteBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.MappedByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='compact' and count(parameter)=0]"
		//public abstract global::Java.Nio.MappedByteBuffer? Compact ();

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='duplicate' and count(parameter)=0]"
		//public abstract global::Java.Nio.MappedByteBuffer? Duplicate ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='flip' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("flip", "()Ljava/nio/MappedByteBuffer;")]
		public unsafe global::Java.Nio.MappedByteBuffer? Flip ()
		{
			const string __id = "flip.()Ljava/nio/MappedByteBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.MappedByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='force' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("force", "()Ljava/nio/MappedByteBuffer;")]
		public unsafe global::Java.Nio.MappedByteBuffer? Force ()
		{
			const string __id = "force.()Ljava/nio/MappedByteBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.MappedByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='force' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("force", "(II)Ljava/nio/MappedByteBuffer;")]
		public unsafe global::Java.Nio.MappedByteBuffer? Force (int index, int length)
		{
			const string __id = "force.(II)Ljava/nio/MappedByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (length);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.MappedByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='limit' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("limit", "(I)Ljava/nio/MappedByteBuffer;")]
		public unsafe global::Java.Nio.MappedByteBuffer? Limit (int newLimit)
		{
			const string __id = "limit.(I)Ljava/nio/MappedByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (newLimit);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.MappedByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='load' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("load", "()Ljava/nio/MappedByteBuffer;")]
		public unsafe global::Java.Nio.MappedByteBuffer? Load ()
		{
			const string __id = "load.()Ljava/nio/MappedByteBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.MappedByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='mark' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("mark", "()Ljava/nio/MappedByteBuffer;")]
		public unsafe global::Java.Nio.MappedByteBuffer? Mark ()
		{
			const string __id = "mark.()Ljava/nio/MappedByteBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.MappedByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='position' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("position", "(I)Ljava/nio/MappedByteBuffer;")]
		public unsafe global::Java.Nio.MappedByteBuffer? Position (int newPosition)
		{
			const string __id = "position.(I)Ljava/nio/MappedByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (newPosition);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.MappedByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='reset' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("reset", "()Ljava/nio/MappedByteBuffer;")]
		public unsafe global::Java.Nio.MappedByteBuffer? Reset ()
		{
			const string __id = "reset.()Ljava/nio/MappedByteBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.MappedByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='rewind' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("rewind", "()Ljava/nio/MappedByteBuffer;")]
		public unsafe global::Java.Nio.MappedByteBuffer? Rewind ()
		{
			const string __id = "rewind.()Ljava/nio/MappedByteBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.MappedByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='slice' and count(parameter)=0]"
		//public abstract global::Java.Nio.MappedByteBuffer? Slice ();

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='slice' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		//public abstract global::Java.Nio.MappedByteBuffer? Slice (int p0, int p1);

	}

	[global::Java.Interop.JniTypeSignature ("java/nio/MappedByteBuffer", GenerateJavaPeer=false)]
	internal partial class MappedByteBufferInvoker : MappedByteBuffer {
		public MappedByteBufferInvoker (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		static readonly JniPeerMembers _members = new JniPeerMembers ("java/nio/MappedByteBuffer", typeof (MappedByteBufferInvoker));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='compact' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("compact", "()Ljava/nio/MappedByteBuffer;")]
		public override unsafe global::Java.Nio.MappedByteBuffer? Compact ()
		{
			const string __id = "compact.()Ljava/nio/MappedByteBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.MappedByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='duplicate' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("duplicate", "()Ljava/nio/MappedByteBuffer;")]
		public override unsafe global::Java.Nio.MappedByteBuffer? Duplicate ()
		{
			const string __id = "duplicate.()Ljava/nio/MappedByteBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.MappedByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='slice' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("slice", "()Ljava/nio/MappedByteBuffer;")]
		public override unsafe global::Java.Nio.MappedByteBuffer? Slice ()
		{
			const string __id = "slice.()Ljava/nio/MappedByteBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.MappedByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='MappedByteBuffer']/method[@name='slice' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("slice", "(II)Ljava/nio/MappedByteBuffer;")]
		public override unsafe global::Java.Nio.MappedByteBuffer? Slice (int p0, int p1)
		{
			const string __id = "slice.(II)Ljava/nio/MappedByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.MappedByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		public override unsafe char Char {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getChar' and count(parameter)=0]"
			get {
				const string __id = "getChar.()C";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractCharMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public override unsafe double Double {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getDouble' and count(parameter)=0]"
			get {
				const string __id = "getDouble.()D";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractDoubleMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public override unsafe float Float {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getFloat' and count(parameter)=0]"
			get {
				const string __id = "getFloat.()F";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractSingleMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public override unsafe int Int {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getInt' and count(parameter)=0]"
			get {
				const string __id = "getInt.()I";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public override unsafe bool IsDirect {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='isDirect' and count(parameter)=0]"
			get {
				const string __id = "isDirect.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public override unsafe long Long {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getLong' and count(parameter)=0]"
			get {
				const string __id = "getLong.()J";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractInt64Method (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public override unsafe short Short {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getShort' and count(parameter)=0]"
			get {
				const string __id = "getShort.()S";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractInt16Method (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asCharBuffer' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("asCharBuffer", "()Ljava/nio/CharBuffer;")]
		public override unsafe global::Java.Nio.CharBuffer? AsCharBuffer ()
		{
			const string __id = "asCharBuffer.()Ljava/nio/CharBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.CharBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asDoubleBuffer' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("asDoubleBuffer", "()Ljava/nio/DoubleBuffer;")]
		public override unsafe global::Java.Nio.DoubleBuffer? AsDoubleBuffer ()
		{
			const string __id = "asDoubleBuffer.()Ljava/nio/DoubleBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.DoubleBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asFloatBuffer' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("asFloatBuffer", "()Ljava/nio/FloatBuffer;")]
		public override unsafe global::Java.Nio.FloatBuffer? AsFloatBuffer ()
		{
			const string __id = "asFloatBuffer.()Ljava/nio/FloatBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.FloatBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asIntBuffer' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("asIntBuffer", "()Ljava/nio/IntBuffer;")]
		public override unsafe global::Java.Nio.IntBuffer? AsIntBuffer ()
		{
			const string __id = "asIntBuffer.()Ljava/nio/IntBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.IntBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asLongBuffer' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("asLongBuffer", "()Ljava/nio/LongBuffer;")]
		public override unsafe global::Java.Nio.LongBuffer? AsLongBuffer ()
		{
			const string __id = "asLongBuffer.()Ljava/nio/LongBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.LongBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asReadOnlyBuffer' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("asReadOnlyBuffer", "()Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? AsReadOnlyBuffer ()
		{
			const string __id = "asReadOnlyBuffer.()Ljava/nio/ByteBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='asShortBuffer' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("asShortBuffer", "()Ljava/nio/ShortBuffer;")]
		public override unsafe global::Java.Nio.ShortBuffer? AsShortBuffer ()
		{
			const string __id = "asShortBuffer.()Ljava/nio/ShortBuffer;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ShortBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='compact' and count(parameter)=0]"
		//[global::Java.Interop.JniMethodSignature ("compact", "()Ljava/nio/ByteBuffer;")]
		//public override unsafe global::Java.Nio.ByteBuffer? Compact ()
		//{
		//	const string __id = "compact.()Ljava/nio/ByteBuffer;";
		//	try {
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='duplicate' and count(parameter)=0]"
		//[global::Java.Interop.JniMethodSignature ("duplicate", "()Ljava/nio/ByteBuffer;")]
		//public override unsafe global::Java.Nio.ByteBuffer? Duplicate ()
		//{
		//	const string __id = "duplicate.()Ljava/nio/ByteBuffer;";
		//	try {
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='get' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("get", "()B")]
		public override unsafe sbyte Get ()
		{
			const string __id = "get.()B";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractSByteMethod (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='get' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("get", "(I)B")]
		public override unsafe sbyte Get (int p0)
		{
			const string __id = "get.(I)B";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractSByteMethod (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getChar' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("getChar", "(I)C")]
		public override unsafe char GetChar (int p0)
		{
			const string __id = "getChar.(I)C";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractCharMethod (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getDouble' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("getDouble", "(I)D")]
		public override unsafe double GetDouble (int p0)
		{
			const string __id = "getDouble.(I)D";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractDoubleMethod (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getFloat' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("getFloat", "(I)F")]
		public override unsafe float GetFloat (int p0)
		{
			const string __id = "getFloat.(I)F";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractSingleMethod (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getInt' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("getInt", "(I)I")]
		public override unsafe int GetInt (int p0)
		{
			const string __id = "getInt.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getLong' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("getLong", "(I)J")]
		public override unsafe long GetLong (int p0)
		{
			const string __id = "getLong.(I)J";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractInt64Method (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='getShort' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("getShort", "(I)S")]
		public override unsafe short GetShort (int p0)
		{
			const string __id = "getShort.(I)S";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractInt16Method (__id, this, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='put' and count(parameter)=1 and parameter[1][@type='byte']]"
		[global::Java.Interop.JniMethodSignature ("put", "(B)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? Put (sbyte p0)
		{
			const string __id = "put.(B)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='put' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte']]"
		[global::Java.Interop.JniMethodSignature ("put", "(IB)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? Put (int p0, sbyte p1)
		{
			const string __id = "put.(IB)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putChar' and count(parameter)=1 and parameter[1][@type='char']]"
		[global::Java.Interop.JniMethodSignature ("putChar", "(C)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutChar (char p0)
		{
			const string __id = "putChar.(C)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((ushort)p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putChar' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='char']]"
		[global::Java.Interop.JniMethodSignature ("putChar", "(IC)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutChar (int p0, char p1)
		{
			const string __id = "putChar.(IC)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue ((ushort)p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putDouble' and count(parameter)=1 and parameter[1][@type='double']]"
		[global::Java.Interop.JniMethodSignature ("putDouble", "(D)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutDouble (double p0)
		{
			const string __id = "putDouble.(D)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putDouble' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='double']]"
		[global::Java.Interop.JniMethodSignature ("putDouble", "(ID)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutDouble (int p0, double p1)
		{
			const string __id = "putDouble.(ID)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putFloat' and count(parameter)=1 and parameter[1][@type='float']]"
		[global::Java.Interop.JniMethodSignature ("putFloat", "(F)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutFloat (float p0)
		{
			const string __id = "putFloat.(F)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putFloat' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='float']]"
		[global::Java.Interop.JniMethodSignature ("putFloat", "(IF)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutFloat (int p0, float p1)
		{
			const string __id = "putFloat.(IF)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putInt' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("putInt", "(I)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutInt (int p0)
		{
			const string __id = "putInt.(I)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putInt' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("putInt", "(II)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutInt (int p0, int p1)
		{
			const string __id = "putInt.(II)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putLong' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='long']]"
		[global::Java.Interop.JniMethodSignature ("putLong", "(IJ)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutLong (int p0, long p1)
		{
			const string __id = "putLong.(IJ)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putLong' and count(parameter)=1 and parameter[1][@type='long']]"
		[global::Java.Interop.JniMethodSignature ("putLong", "(J)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutLong (long p0)
		{
			const string __id = "putLong.(J)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putShort' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='short']]"
		[global::Java.Interop.JniMethodSignature ("putShort", "(IS)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutShort (int p0, short p1)
		{
			const string __id = "putShort.(IS)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='putShort' and count(parameter)=1 and parameter[1][@type='short']]"
		[global::Java.Interop.JniMethodSignature ("putShort", "(S)Ljava/nio/ByteBuffer;")]
		public override unsafe global::Java.Nio.ByteBuffer? PutShort (short p0)
		{
			const string __id = "putShort.(S)Ljava/nio/ByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='slice' and count(parameter)=0]"
		//[global::Java.Interop.JniMethodSignature ("slice", "()Ljava/nio/ByteBuffer;")]
		//public override unsafe global::Java.Nio.ByteBuffer? Slice ()
		//{
		//	const string __id = "slice.()Ljava/nio/ByteBuffer;";
		//	try {
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='ByteBuffer']/method[@name='slice' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		//[global::Java.Interop.JniMethodSignature ("slice", "(II)Ljava/nio/ByteBuffer;")]
		//public override unsafe global::Java.Nio.ByteBuffer? Slice (int p0, int p1)
		//{
		//	const string __id = "slice.(II)Ljava/nio/ByteBuffer;";
		//	try {
		//		JniArgumentValue* __args = stackalloc JniArgumentValue [2];
		//		__args [0] = new JniArgumentValue (p0);
		//		__args [1] = new JniArgumentValue (p1);
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.ByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

		//public override unsafe bool IsReadOnly {
		//	// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='isReadOnly' and count(parameter)=0]"
		//	get {
		//		const string __id = "isReadOnly.()Z";
		//		try {
		//			var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
		//			return __rm;
		//		} finally {
		//		}
		//	}
		//}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='array' and count(parameter)=0]"
		//[global::Java.Interop.JniMethodSignature ("array", "()Ljava/lang/Object;")]
		//public override unsafe global::Java.Lang.Object? Array ()
		//{
		//	const string __id = "array.()Ljava/lang/Object;";
		//	try {
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='duplicate' and count(parameter)=0]"
		//[global::Java.Interop.JniMethodSignature ("duplicate", "()Ljava/nio/Buffer;")]
		//public override unsafe global::Java.Nio.Buffer? Duplicate ()
		//{
		//	const string __id = "duplicate.()Ljava/nio/Buffer;";
		//	try {
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='slice' and count(parameter)=0]"
		//[global::Java.Interop.JniMethodSignature ("slice", "()Ljava/nio/Buffer;")]
		//public override unsafe global::Java.Nio.Buffer? Slice ()
		//{
		//	const string __id = "slice.()Ljava/nio/Buffer;";
		//	try {
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

		//// Metadata.xml XPath method reference: path="/api/package[@name='java.nio']/class[@name='Buffer']/method[@name='slice' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		//[global::Java.Interop.JniMethodSignature ("slice", "(II)Ljava/nio/Buffer;")]
		//public override unsafe global::Java.Nio.Buffer? Slice (int p0, int p1)
		//{
		//	const string __id = "slice.(II)Ljava/nio/Buffer;";
		//	try {
		//		JniArgumentValue* __args = stackalloc JniArgumentValue [2];
		//		__args [0] = new JniArgumentValue (p0);
		//		__args [1] = new JniArgumentValue (p1);
		//		var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
		//		return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Buffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
		//	} finally {
		//	}
		//}

	}
}
