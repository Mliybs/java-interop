//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Java.Interop;

namespace Java.Nio.Channels {

	partial class FileChannel
	{
		ISeekableByteChannel? ISeekableByteChannel.Position (long p0) => Position (p0);

		ISeekableByteChannel? ISeekableByteChannel.Truncate (long p0) => Truncate (p0);
	}

	// Metadata.xml XPath class reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']"
	[global::Java.Interop.JniTypeSignature ("java/nio/channels/FileChannel", GenerateJavaPeer=false, InvokerType=typeof (FileChannelInvoker))]
	public abstract partial class FileChannel : global::Java.Nio.Channels.Spi.AbstractInterruptibleChannel, global::Java.Nio.Channels.IGatheringByteChannel, global::Java.Nio.Channels.IScatteringByteChannel, global::Java.Nio.Channels.ISeekableByteChannel {
		// Metadata.xml XPath class reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel.MapMode']"
		[global::Java.Interop.JniTypeSignature ("java/nio/channels/FileChannel$MapMode", GenerateJavaPeer=false)]
		public partial class MapMode : global::Java.Lang.Object {

			// Metadata.xml XPath field reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel.MapMode']/field[@name='PRIVATE']"
			public static global::Java.Nio.Channels.FileChannel.MapMode? Private {
				get {
					const string __id = "PRIVATE.Ljava/nio/channels/FileChannel$MapMode;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.FileChannel.MapMode? >(ref __v, JniObjectReferenceOptions.Copy);
				}
			}


			// Metadata.xml XPath field reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel.MapMode']/field[@name='READ_ONLY']"
			public static global::Java.Nio.Channels.FileChannel.MapMode? ReadOnly {
				get {
					const string __id = "READ_ONLY.Ljava/nio/channels/FileChannel$MapMode;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.FileChannel.MapMode? >(ref __v, JniObjectReferenceOptions.Copy);
				}
			}


			// Metadata.xml XPath field reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel.MapMode']/field[@name='READ_WRITE']"
			public static global::Java.Nio.Channels.FileChannel.MapMode? ReadWrite {
				get {
					const string __id = "READ_WRITE.Ljava/nio/channels/FileChannel$MapMode;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.FileChannel.MapMode? >(ref __v, JniObjectReferenceOptions.Copy);
				}
			}

			static readonly JniPeerMembers _members = new JniPeerMembers ("java/nio/channels/FileChannel$MapMode", typeof (MapMode));

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			protected MapMode (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
			{
			}

		}

		static readonly JniPeerMembers _members = new JniPeerMembers ("java/nio/channels/FileChannel", typeof (FileChannel));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		protected FileChannel (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/constructor[@name='FileChannel' and count(parameter)=0]"
		[global::Java.Interop.JniConstructorSignature ("()V")]
		protected unsafe FileChannel () : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "()V";

			if (PeerReference.IsValid)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='force' and count(parameter)=1 and parameter[1][@type='boolean']]"
		public abstract void Force (bool p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='lock' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("lock", "()Ljava/nio/channels/FileLock;")]
		public unsafe global::Java.Nio.Channels.FileLock? Lock ()
		{
			const string __id = "lock.()Ljava/nio/channels/FileLock;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.FileLock> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='lock' and count(parameter)=3 and parameter[1][@type='long'] and parameter[2][@type='long'] and parameter[3][@type='boolean']]"
		public abstract global::Java.Nio.Channels.FileLock? Lock (long p0, long p1, bool p2);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='map' and count(parameter)=3 and parameter[1][@type='java.nio.channels.FileChannel.MapMode'] and parameter[2][@type='long'] and parameter[3][@type='long']]"
		public abstract global::Java.Nio.MappedByteBuffer? Map (global::Java.Nio.Channels.FileChannel.MapMode? p0, long p1, long p2);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='position' and count(parameter)=0]"
		public abstract long Position ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='position' and count(parameter)=1 and parameter[1][@type='long']]"
		public abstract global::Java.Nio.Channels.FileChannel? Position (long p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='read' and count(parameter)=1 and parameter[1][@type='java.nio.ByteBuffer']]"
		public abstract int Read (global::Java.Nio.ByteBuffer? p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='read' and count(parameter)=2 and parameter[1][@type='java.nio.ByteBuffer'] and parameter[2][@type='long']]"
		public abstract int Read (global::Java.Nio.ByteBuffer? p0, long p1);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='read' and count(parameter)=1 and parameter[1][@type='java.nio.ByteBuffer[]']]"
		[global::Java.Interop.JniMethodSignature ("read", "([Ljava/nio/ByteBuffer;)J")]
		public unsafe long Read (global::Java.Interop.JavaObjectArray<global::Java.Nio.ByteBuffer>? dsts)
		{
			const string __id = "read.([Ljava/nio/ByteBuffer;)J";
			var native_dsts = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalObjectArray<global::Java.Nio.ByteBuffer> (dsts);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_dsts);
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt64Method (__id, this, __args);
				return __rm;
			} finally {
				if (native_dsts != null) {
					native_dsts.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (dsts);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='read' and count(parameter)=3 and parameter[1][@type='java.nio.ByteBuffer[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		public abstract long Read (global::Java.Interop.JavaObjectArray<global::Java.Nio.ByteBuffer>? p0, int p1, int p2);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='size' and count(parameter)=0]"
		public abstract long Size ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='transferFrom' and count(parameter)=3 and parameter[1][@type='java.nio.channels.ReadableByteChannel'] and parameter[2][@type='long'] and parameter[3][@type='long']]"
		public abstract long TransferFrom (global::Java.Nio.Channels.IReadableByteChannel? p0, long p1, long p2);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='transferTo' and count(parameter)=3 and parameter[1][@type='long'] and parameter[2][@type='long'] and parameter[3][@type='java.nio.channels.WritableByteChannel']]"
		public abstract long TransferTo (long p0, long p1, global::Java.Nio.Channels.IWritableByteChannel? p2);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='truncate' and count(parameter)=1 and parameter[1][@type='long']]"
		public abstract global::Java.Nio.Channels.FileChannel? Truncate (long p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='tryLock' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("tryLock", "()Ljava/nio/channels/FileLock;")]
		public unsafe global::Java.Nio.Channels.FileLock? TryLock ()
		{
			const string __id = "tryLock.()Ljava/nio/channels/FileLock;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.FileLock> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='tryLock' and count(parameter)=3 and parameter[1][@type='long'] and parameter[2][@type='long'] and parameter[3][@type='boolean']]"
		public abstract global::Java.Nio.Channels.FileLock? TryLock (long p0, long p1, bool p2);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='write' and count(parameter)=1 and parameter[1][@type='java.nio.ByteBuffer']]"
		public abstract int Write (global::Java.Nio.ByteBuffer? p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='write' and count(parameter)=2 and parameter[1][@type='java.nio.ByteBuffer'] and parameter[2][@type='long']]"
		public abstract int Write (global::Java.Nio.ByteBuffer? p0, long p1);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='write' and count(parameter)=1 and parameter[1][@type='java.nio.ByteBuffer[]']]"
		[global::Java.Interop.JniMethodSignature ("write", "([Ljava/nio/ByteBuffer;)J")]
		public unsafe long Write (global::Java.Interop.JavaObjectArray<global::Java.Nio.ByteBuffer>? srcs)
		{
			const string __id = "write.([Ljava/nio/ByteBuffer;)J";
			var native_srcs = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalObjectArray<global::Java.Nio.ByteBuffer> (srcs);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_srcs);
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt64Method (__id, this, __args);
				return __rm;
			} finally {
				if (native_srcs != null) {
					native_srcs.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (srcs);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='write' and count(parameter)=3 and parameter[1][@type='java.nio.ByteBuffer[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		public abstract long Write (global::Java.Interop.JavaObjectArray<global::Java.Nio.ByteBuffer>? p0, int p1, int p2);

	}

	[global::Java.Interop.JniTypeSignature ("java/nio/channels/FileChannel", GenerateJavaPeer=false)]
	internal partial class FileChannelInvoker : FileChannel {
		public FileChannelInvoker (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		static readonly JniPeerMembers _members = new JniPeerMembers ("java/nio/channels/FileChannel", typeof (FileChannelInvoker));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='force' and count(parameter)=1 and parameter[1][@type='boolean']]"
		[global::Java.Interop.JniMethodSignature ("force", "(Z)V")]
		public override unsafe void Force (bool p0)
		{
			const string __id = "force.(Z)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0 ? (sbyte)1 : (sbyte)0);
				_members.InstanceMethods.InvokeAbstractVoidMethod (__id, this, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='lock' and count(parameter)=3 and parameter[1][@type='long'] and parameter[2][@type='long'] and parameter[3][@type='boolean']]"
		[global::Java.Interop.JniMethodSignature ("lock", "(JJZ)Ljava/nio/channels/FileLock;")]
		public override unsafe global::Java.Nio.Channels.FileLock? Lock (long p0, long p1, bool p2)
		{
			const string __id = "lock.(JJZ)Ljava/nio/channels/FileLock;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				__args [2] = new JniArgumentValue (p2 ? (sbyte)1 : (sbyte)0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.FileLock> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='map' and count(parameter)=3 and parameter[1][@type='java.nio.channels.FileChannel.MapMode'] and parameter[2][@type='long'] and parameter[3][@type='long']]"
		[global::Java.Interop.JniMethodSignature ("map", "(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;")]
		public override unsafe global::Java.Nio.MappedByteBuffer? Map (global::Java.Nio.Channels.FileChannel.MapMode? p0, long p1, long p2)
		{
			const string __id = "map.(Ljava/nio/channels/FileChannel$MapMode;JJ)Ljava/nio/MappedByteBuffer;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				__args [2] = new JniArgumentValue (p2);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.MappedByteBuffer> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='position' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("position", "()J")]
		public override unsafe long Position ()
		{
			const string __id = "position.()J";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractInt64Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='position' and count(parameter)=1 and parameter[1][@type='long']]"
		[global::Java.Interop.JniMethodSignature ("position", "(J)Ljava/nio/channels/FileChannel;")]
		public override unsafe global::Java.Nio.Channels.FileChannel? Position (long p0)
		{
			const string __id = "position.(J)Ljava/nio/channels/FileChannel;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.FileChannel> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='read' and count(parameter)=1 and parameter[1][@type='java.nio.ByteBuffer']]"
		[global::Java.Interop.JniMethodSignature ("read", "(Ljava/nio/ByteBuffer;)I")]
		public override unsafe int Read (global::Java.Nio.ByteBuffer? p0)
		{
			const string __id = "read.(Ljava/nio/ByteBuffer;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='read' and count(parameter)=2 and parameter[1][@type='java.nio.ByteBuffer'] and parameter[2][@type='long']]"
		[global::Java.Interop.JniMethodSignature ("read", "(Ljava/nio/ByteBuffer;J)I")]
		public override unsafe int Read (global::Java.Nio.ByteBuffer? p0, long p1)
		{
			const string __id = "read.(Ljava/nio/ByteBuffer;J)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='read' and count(parameter)=3 and parameter[1][@type='java.nio.ByteBuffer[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("read", "([Ljava/nio/ByteBuffer;II)J")]
		public override unsafe long Read (global::Java.Interop.JavaObjectArray<global::Java.Nio.ByteBuffer>? p0, int p1, int p2)
		{
			const string __id = "read.([Ljava/nio/ByteBuffer;II)J";
			var native_p0 = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalObjectArray<global::Java.Nio.ByteBuffer> (p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_p0);
				__args [1] = new JniArgumentValue (p1);
				__args [2] = new JniArgumentValue (p2);
				var __rm = _members.InstanceMethods.InvokeAbstractInt64Method (__id, this, __args);
				return __rm;
			} finally {
				if (native_p0 != null) {
					native_p0.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='size' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("size", "()J")]
		public override unsafe long Size ()
		{
			const string __id = "size.()J";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractInt64Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='transferFrom' and count(parameter)=3 and parameter[1][@type='java.nio.channels.ReadableByteChannel'] and parameter[2][@type='long'] and parameter[3][@type='long']]"
		[global::Java.Interop.JniMethodSignature ("transferFrom", "(Ljava/nio/channels/ReadableByteChannel;JJ)J")]
		public override unsafe long TransferFrom (global::Java.Nio.Channels.IReadableByteChannel? p0, long p1, long p2)
		{
			const string __id = "transferFrom.(Ljava/nio/channels/ReadableByteChannel;JJ)J";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				__args [2] = new JniArgumentValue (p2);
				var __rm = _members.InstanceMethods.InvokeAbstractInt64Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='transferTo' and count(parameter)=3 and parameter[1][@type='long'] and parameter[2][@type='long'] and parameter[3][@type='java.nio.channels.WritableByteChannel']]"
		[global::Java.Interop.JniMethodSignature ("transferTo", "(JJLjava/nio/channels/WritableByteChannel;)J")]
		public override unsafe long TransferTo (long p0, long p1, global::Java.Nio.Channels.IWritableByteChannel? p2)
		{
			const string __id = "transferTo.(JJLjava/nio/channels/WritableByteChannel;)J";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				__args [2] = new JniArgumentValue (p2);
				var __rm = _members.InstanceMethods.InvokeAbstractInt64Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (p2);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='truncate' and count(parameter)=1 and parameter[1][@type='long']]"
		[global::Java.Interop.JniMethodSignature ("truncate", "(J)Ljava/nio/channels/FileChannel;")]
		public override unsafe global::Java.Nio.Channels.FileChannel? Truncate (long p0)
		{
			const string __id = "truncate.(J)Ljava/nio/channels/FileChannel;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.FileChannel> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='tryLock' and count(parameter)=3 and parameter[1][@type='long'] and parameter[2][@type='long'] and parameter[3][@type='boolean']]"
		[global::Java.Interop.JniMethodSignature ("tryLock", "(JJZ)Ljava/nio/channels/FileLock;")]
		public override unsafe global::Java.Nio.Channels.FileLock? TryLock (long p0, long p1, bool p2)
		{
			const string __id = "tryLock.(JJZ)Ljava/nio/channels/FileLock;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				__args [2] = new JniArgumentValue (p2 ? (sbyte)1 : (sbyte)0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.FileLock> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='write' and count(parameter)=1 and parameter[1][@type='java.nio.ByteBuffer']]"
		[global::Java.Interop.JniMethodSignature ("write", "(Ljava/nio/ByteBuffer;)I")]
		public override unsafe int Write (global::Java.Nio.ByteBuffer? p0)
		{
			const string __id = "write.(Ljava/nio/ByteBuffer;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='write' and count(parameter)=2 and parameter[1][@type='java.nio.ByteBuffer'] and parameter[2][@type='long']]"
		[global::Java.Interop.JniMethodSignature ("write", "(Ljava/nio/ByteBuffer;J)I")]
		public override unsafe int Write (global::Java.Nio.ByteBuffer? p0, long p1)
		{
			const string __id = "write.(Ljava/nio/ByteBuffer;J)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='FileChannel']/method[@name='write' and count(parameter)=3 and parameter[1][@type='java.nio.ByteBuffer[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("write", "([Ljava/nio/ByteBuffer;II)J")]
		public override unsafe long Write (global::Java.Interop.JavaObjectArray<global::Java.Nio.ByteBuffer>? p0, int p1, int p2)
		{
			const string __id = "write.([Ljava/nio/ByteBuffer;II)J";
			var native_p0 = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalObjectArray<global::Java.Nio.ByteBuffer> (p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_p0);
				__args [1] = new JniArgumentValue (p1);
				__args [2] = new JniArgumentValue (p2);
				var __rm = _members.InstanceMethods.InvokeAbstractInt64Method (__id, this, __args);
				return __rm;
			} finally {
				if (native_p0 != null) {
					native_p0.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels.spi']/class[@name='AbstractInterruptibleChannel']/method[@name='implCloseChannel' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("implCloseChannel", "()V")]
		protected override unsafe void ImplCloseChannel ()
		{
			const string __id = "implCloseChannel.()V";
			try {
				_members.InstanceMethods.InvokeAbstractVoidMethod (__id, this, null);
			} finally {
			}
		}

	}
}
