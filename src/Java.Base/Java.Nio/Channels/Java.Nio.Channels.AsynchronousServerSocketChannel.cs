//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Java.Interop;
using Java.Net;

namespace Java.Nio.Channels {

	partial class AsynchronousServerSocketChannel
	{
		INetworkChannel? INetworkChannel.Bind (SocketAddress? p0) => Bind (p0);

		public unsafe global::Java.Lang.Object? GetOption (global::Java.Net.ISocketOption? p0)
		{
			const string __id = "getOption.(Ljava/net/SocketOption;)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		INetworkChannel? INetworkChannel.SetOption (ISocketOption? p0, Lang.Object? p1) => SetOption (p0, p1);
	}

	// Metadata.xml XPath class reference: path="/api/package[@name='java.nio.channels']/class[@name='AsynchronousServerSocketChannel']"
	[global::Java.Interop.JniTypeSignature ("java/nio/channels/AsynchronousServerSocketChannel", GenerateJavaPeer=false, InvokerType=typeof (AsynchronousServerSocketChannelInvoker))]
	public abstract partial class AsynchronousServerSocketChannel : global::Java.Lang.Object, global::Java.Nio.Channels.IAsynchronousChannel, global::Java.Nio.Channels.INetworkChannel {
		static readonly JniPeerMembers _members = new JniPeerMembers ("java/nio/channels/AsynchronousServerSocketChannel", typeof (AsynchronousServerSocketChannel));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		protected AsynchronousServerSocketChannel (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.nio.channels']/class[@name='AsynchronousServerSocketChannel']/constructor[@name='AsynchronousServerSocketChannel' and count(parameter)=1 and parameter[1][@type='java.nio.channels.spi.AsynchronousChannelProvider']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/nio/channels/spi/AsynchronousChannelProvider;)V")]
		protected unsafe AsynchronousServerSocketChannel (global::Java.Nio.Channels.Spi.AsynchronousChannelProvider? provider) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/nio/channels/spi/AsynchronousChannelProvider;)V";

			if (PeerReference.IsValid)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (provider);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (provider);
			}
		}

		public abstract global::Java.Net.SocketAddress? LocalAddress {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='AsynchronousServerSocketChannel']/method[@name='getLocalAddress' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("getLocalAddress", "()Ljava/net/SocketAddress;")]
			get; 
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='AsynchronousServerSocketChannel']/method[@name='accept' and count(parameter)=2 and parameter[1][@type='A'] and parameter[2][@type='java.nio.channels.CompletionHandler&lt;java.nio.channels.AsynchronousSocketChannel, ? super A&gt;']]"
		[global::Java.Interop.JavaTypeParameters (new string [] {"A"})]
		public abstract void Accept (global::Java.Lang.Object? p0, global::Java.Nio.Channels.ICompletionHandler? p1);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='AsynchronousServerSocketChannel']/method[@name='bind' and count(parameter)=1 and parameter[1][@type='java.net.SocketAddress']]"
		[global::Java.Interop.JniMethodSignature ("bind", "(Ljava/net/SocketAddress;)Ljava/nio/channels/AsynchronousServerSocketChannel;")]
		public unsafe global::Java.Nio.Channels.AsynchronousServerSocketChannel? Bind (global::Java.Net.SocketAddress? local)
		{
			const string __id = "bind.(Ljava/net/SocketAddress;)Ljava/nio/channels/AsynchronousServerSocketChannel;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (local);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.AsynchronousServerSocketChannel> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (local);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='AsynchronousServerSocketChannel']/method[@name='bind' and count(parameter)=2 and parameter[1][@type='java.net.SocketAddress'] and parameter[2][@type='int']]"
		public abstract global::Java.Nio.Channels.AsynchronousServerSocketChannel? Bind (global::Java.Net.SocketAddress? p0, int p1);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='AsynchronousServerSocketChannel']/method[@name='open' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("open", "()Ljava/nio/channels/AsynchronousServerSocketChannel;")]
		public static unsafe global::Java.Nio.Channels.AsynchronousServerSocketChannel? Open ()
		{
			const string __id = "open.()Ljava/nio/channels/AsynchronousServerSocketChannel;";
			try {
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.AsynchronousServerSocketChannel> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='AsynchronousServerSocketChannel']/method[@name='open' and count(parameter)=1 and parameter[1][@type='java.nio.channels.AsynchronousChannelGroup']]"
		[global::Java.Interop.JniMethodSignature ("open", "(Ljava/nio/channels/AsynchronousChannelGroup;)Ljava/nio/channels/AsynchronousServerSocketChannel;")]
		public static unsafe global::Java.Nio.Channels.AsynchronousServerSocketChannel? Open (global::Java.Nio.Channels.AsynchronousChannelGroup? group)
		{
			const string __id = "open.(Ljava/nio/channels/AsynchronousChannelGroup;)Ljava/nio/channels/AsynchronousServerSocketChannel;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (group);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.AsynchronousServerSocketChannel> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (group);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='AsynchronousServerSocketChannel']/method[@name='provider' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("provider", "()Ljava/nio/channels/spi/AsynchronousChannelProvider;")]
		public unsafe global::Java.Nio.Channels.Spi.AsynchronousChannelProvider? Provider ()
		{
			const string __id = "provider.()Ljava/nio/channels/spi/AsynchronousChannelProvider;";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.Spi.AsynchronousChannelProvider> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='AsynchronousServerSocketChannel']/method[@name='setOption' and count(parameter)=2 and parameter[1][@type='java.net.SocketOption&lt;T&gt;'] and parameter[2][@type='T']]"
		[global::Java.Interop.JavaTypeParameters (new string [] {"T"})]
		public abstract global::Java.Nio.Channels.AsynchronousServerSocketChannel? SetOption (global::Java.Net.ISocketOption? p0, global::Java.Lang.Object? p1);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/interface[@name='AsynchronousChannel']/method[@name='close' and count(parameter)=0]"
		public abstract void Close ();

		public abstract bool IsOpen {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='AsynchronousServerSocketChannel']/method[@name='isOpen' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("isOpen", "()Z")]
			get; 
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/interface[@name='NetworkChannel']/method[@name='supportedOptions' and count(parameter)=0]"
		public abstract global::Java.Util.ISet? SupportedOptions ();

	}

	[global::Java.Interop.JniTypeSignature ("java/nio/channels/AsynchronousServerSocketChannel", GenerateJavaPeer=false)]
	internal partial class AsynchronousServerSocketChannelInvoker : AsynchronousServerSocketChannel {
		public AsynchronousServerSocketChannelInvoker (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		static readonly JniPeerMembers _members = new JniPeerMembers ("java/nio/channels/AsynchronousServerSocketChannel", typeof (AsynchronousServerSocketChannelInvoker));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		public override unsafe global::Java.Net.SocketAddress? LocalAddress {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='AsynchronousServerSocketChannel']/method[@name='getLocalAddress' and count(parameter)=0]"
			get {
				const string __id = "getLocalAddress.()Ljava/net/SocketAddress;";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Net.SocketAddress> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='AsynchronousServerSocketChannel']/method[@name='accept' and count(parameter)=2 and parameter[1][@type='A'] and parameter[2][@type='java.nio.channels.CompletionHandler&lt;java.nio.channels.AsynchronousSocketChannel, ? super A&gt;']]"
		[global::Java.Interop.JniMethodSignature ("accept", "(Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"A"})]
		public override unsafe void Accept (global::Java.Lang.Object? p0, global::Java.Nio.Channels.ICompletionHandler? p1)
		{
			const string __id = "accept.(Ljava/lang/Object;Ljava/nio/channels/CompletionHandler;)V";
			var native_p0 = (p0?.PeerReference ?? default);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_p0);
				__args [1] = new JniArgumentValue (p1);
				_members.InstanceMethods.InvokeAbstractVoidMethod (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (p0);
				global::System.GC.KeepAlive (p1);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='AsynchronousServerSocketChannel']/method[@name='bind' and count(parameter)=2 and parameter[1][@type='java.net.SocketAddress'] and parameter[2][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("bind", "(Ljava/net/SocketAddress;I)Ljava/nio/channels/AsynchronousServerSocketChannel;")]
		public override unsafe global::Java.Nio.Channels.AsynchronousServerSocketChannel? Bind (global::Java.Net.SocketAddress? p0, int p1)
		{
			const string __id = "bind.(Ljava/net/SocketAddress;I)Ljava/nio/channels/AsynchronousServerSocketChannel;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.AsynchronousServerSocketChannel> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='AsynchronousServerSocketChannel']/method[@name='setOption' and count(parameter)=2 and parameter[1][@type='java.net.SocketOption&lt;T&gt;'] and parameter[2][@type='T']]"
		[global::Java.Interop.JniMethodSignature ("setOption", "(Ljava/net/SocketOption;Ljava/lang/Object;)Ljava/nio/channels/AsynchronousServerSocketChannel;")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"T"})]
		public override unsafe global::Java.Nio.Channels.AsynchronousServerSocketChannel? SetOption (global::Java.Net.ISocketOption? p0, global::Java.Lang.Object? p1)
		{
			const string __id = "setOption.(Ljava/net/SocketOption;Ljava/lang/Object;)Ljava/nio/channels/AsynchronousServerSocketChannel;";
			var native_p1 = (p1?.PeerReference ?? default);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (native_p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.AsynchronousServerSocketChannel> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (p0);
				global::System.GC.KeepAlive (p1);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/interface[@name='AsynchronousChannel']/method[@name='close' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("close", "()V")]
		public override unsafe void Close ()
		{
			const string __id = "close.()V";
			try {
				_members.InstanceMethods.InvokeAbstractVoidMethod (__id, this, null);
			} finally {
			}
		}

		public override unsafe bool IsOpen {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='AsynchronousServerSocketChannel']/method[@name='isOpen' and count(parameter)=0]"
			get {
				const string __id = "isOpen.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/interface[@name='NetworkChannel']/method[@name='supportedOptions' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("supportedOptions", "()Ljava/util/Set;")]
		public override unsafe global::Java.Util.ISet? SupportedOptions ()
		{
			const string __id = "supportedOptions.()Ljava/util/Set;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.ISet> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

	}
}
