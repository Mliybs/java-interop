//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Java.Interop;
using Java.Net;

namespace Java.Nio.Channels {

	partial class SocketChannel
	{
		INetworkChannel? INetworkChannel.Bind (SocketAddress? p0) => Bind (p0);

		public unsafe global::Java.Lang.Object? GetOption (global::Java.Net.ISocketOption? p0)
		{
			const string __id = "getOption.(Ljava/net/SocketOption;)Ljava/lang/Object;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeNonvirtualObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Lang.Object> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		INetworkChannel? INetworkChannel.SetOption (ISocketOption? p0, Lang.Object? p1) => SetOption (p0, p1);
	}

	// Metadata.xml XPath class reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']"
	[global::Java.Interop.JniTypeSignature ("java/nio/channels/SocketChannel", GenerateJavaPeer=false, InvokerType=typeof (SocketChannelInvoker))]
	public abstract partial class SocketChannel : global::Java.Nio.Channels.Spi.AbstractSelectableChannel, global::Java.Nio.Channels.IByteChannel, global::Java.Nio.Channels.IGatheringByteChannel, global::Java.Nio.Channels.INetworkChannel, global::Java.Nio.Channels.IScatteringByteChannel {
		static readonly JniPeerMembers _members = new JniPeerMembers ("java/nio/channels/SocketChannel", typeof (SocketChannel));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		protected SocketChannel (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/constructor[@name='SocketChannel' and count(parameter)=1 and parameter[1][@type='java.nio.channels.spi.SelectorProvider']]"
		[global::Java.Interop.JniConstructorSignature ("(Ljava/nio/channels/spi/SelectorProvider;)V")]
		protected unsafe SocketChannel (global::Java.Nio.Channels.Spi.SelectorProvider? provider) : base (ref *InvalidJniObjectReference, JniObjectReferenceOptions.None)
		{
			const string __id = "(Ljava/nio/channels/spi/SelectorProvider;)V";

			if (PeerReference.IsValid)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (provider);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				Construct (ref __r, JniObjectReferenceOptions.CopyAndDispose);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (provider);
			}
		}

		public abstract bool IsConnected {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='isConnected' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("isConnected", "()Z")]
			get; 
		}

		public abstract bool IsConnectionPending {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='isConnectionPending' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("isConnectionPending", "()Z")]
			get; 
		}

		public abstract global::Java.Net.SocketAddress? LocalAddress {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='getLocalAddress' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("getLocalAddress", "()Ljava/net/SocketAddress;")]
			get; 
		}

		public abstract global::Java.Net.SocketAddress? RemoteAddress {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='getRemoteAddress' and count(parameter)=0]"
			[global::Java.Interop.JniMethodSignature ("getRemoteAddress", "()Ljava/net/SocketAddress;")]
			get; 
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='bind' and count(parameter)=1 and parameter[1][@type='java.net.SocketAddress']]"
		public abstract global::Java.Nio.Channels.SocketChannel? Bind (global::Java.Net.SocketAddress? p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='connect' and count(parameter)=1 and parameter[1][@type='java.net.SocketAddress']]"
		public abstract bool Connect (global::Java.Net.SocketAddress? p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='finishConnect' and count(parameter)=0]"
		public abstract bool FinishConnect ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='open' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("open", "()Ljava/nio/channels/SocketChannel;")]
		public static unsafe global::Java.Nio.Channels.SocketChannel? Open ()
		{
			const string __id = "open.()Ljava/nio/channels/SocketChannel;";
			try {
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.SocketChannel> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='open' and count(parameter)=1 and parameter[1][@type='java.net.ProtocolFamily']]"
		[global::Java.Interop.JniMethodSignature ("open", "(Ljava/net/ProtocolFamily;)Ljava/nio/channels/SocketChannel;")]
		public static unsafe global::Java.Nio.Channels.SocketChannel? Open (global::Java.Net.IProtocolFamily? family)
		{
			const string __id = "open.(Ljava/net/ProtocolFamily;)Ljava/nio/channels/SocketChannel;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (family);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.SocketChannel> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (family);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='open' and count(parameter)=1 and parameter[1][@type='java.net.SocketAddress']]"
		[global::Java.Interop.JniMethodSignature ("open", "(Ljava/net/SocketAddress;)Ljava/nio/channels/SocketChannel;")]
		public static unsafe global::Java.Nio.Channels.SocketChannel? Open (global::Java.Net.SocketAddress? remote)
		{
			const string __id = "open.(Ljava/net/SocketAddress;)Ljava/nio/channels/SocketChannel;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (remote);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.SocketChannel> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (remote);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='read' and count(parameter)=1 and parameter[1][@type='java.nio.ByteBuffer']]"
		public abstract int Read (global::Java.Nio.ByteBuffer? p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='read' and count(parameter)=1 and parameter[1][@type='java.nio.ByteBuffer[]']]"
		[global::Java.Interop.JniMethodSignature ("read", "([Ljava/nio/ByteBuffer;)J")]
		public unsafe long Read (global::Java.Interop.JavaObjectArray<global::Java.Nio.ByteBuffer>? dsts)
		{
			const string __id = "read.([Ljava/nio/ByteBuffer;)J";
			var native_dsts = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalObjectArray<global::Java.Nio.ByteBuffer> (dsts);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_dsts);
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt64Method (__id, this, __args);
				return __rm;
			} finally {
				if (native_dsts != null) {
					native_dsts.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (dsts);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='read' and count(parameter)=3 and parameter[1][@type='java.nio.ByteBuffer[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		public abstract long Read (global::Java.Interop.JavaObjectArray<global::Java.Nio.ByteBuffer>? p0, int p1, int p2);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='setOption' and count(parameter)=2 and parameter[1][@type='java.net.SocketOption&lt;T&gt;'] and parameter[2][@type='T']]"
		[global::Java.Interop.JavaTypeParameters (new string [] {"T"})]
		public abstract global::Java.Nio.Channels.SocketChannel? SetOption (global::Java.Net.ISocketOption? p0, global::Java.Lang.Object? p1);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='shutdownInput' and count(parameter)=0]"
		public abstract global::Java.Nio.Channels.SocketChannel? ShutdownInput ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='shutdownOutput' and count(parameter)=0]"
		public abstract global::Java.Nio.Channels.SocketChannel? ShutdownOutput ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='socket' and count(parameter)=0]"
		public abstract global::Java.Net.Socket? Socket ();

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='validOps' and count(parameter)=0]"
		[return:global::Android.Runtime.GeneratedEnum]
		[global::Java.Interop.JniMethodSignature ("validOps", "()I")]
		public override sealed unsafe global::Java.Nio.Channels.Operations ValidOps ()
		{
			const string __id = "validOps.()I";
			try {
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt32Method (__id, this, null);
				return (global::Java.Nio.Channels.Operations) __rm!;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='write' and count(parameter)=1 and parameter[1][@type='java.nio.ByteBuffer']]"
		public abstract int Write (global::Java.Nio.ByteBuffer? p0);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='write' and count(parameter)=1 and parameter[1][@type='java.nio.ByteBuffer[]']]"
		[global::Java.Interop.JniMethodSignature ("write", "([Ljava/nio/ByteBuffer;)J")]
		public unsafe long Write (global::Java.Interop.JavaObjectArray<global::Java.Nio.ByteBuffer>? srcs)
		{
			const string __id = "write.([Ljava/nio/ByteBuffer;)J";
			var native_srcs = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalObjectArray<global::Java.Nio.ByteBuffer> (srcs);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_srcs);
				var __rm = _members.InstanceMethods.InvokeNonvirtualInt64Method (__id, this, __args);
				return __rm;
			} finally {
				if (native_srcs != null) {
					native_srcs.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (srcs);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='write' and count(parameter)=3 and parameter[1][@type='java.nio.ByteBuffer[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		public abstract long Write (global::Java.Interop.JavaObjectArray<global::Java.Nio.ByteBuffer>? p0, int p1, int p2);

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/interface[@name='NetworkChannel']/method[@name='supportedOptions' and count(parameter)=0]"
		public abstract global::Java.Util.ISet? SupportedOptions ();

	}

	[global::Java.Interop.JniTypeSignature ("java/nio/channels/SocketChannel", GenerateJavaPeer=false)]
	internal partial class SocketChannelInvoker : SocketChannel {
		public SocketChannelInvoker (ref JniObjectReference reference, JniObjectReferenceOptions options) : base (ref reference, options)
		{
		}

		static readonly JniPeerMembers _members = new JniPeerMembers ("java/nio/channels/SocketChannel", typeof (SocketChannelInvoker));

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		public override unsafe bool IsConnected {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='isConnected' and count(parameter)=0]"
			get {
				const string __id = "isConnected.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public override unsafe bool IsConnectionPending {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='isConnectionPending' and count(parameter)=0]"
			get {
				const string __id = "isConnectionPending.()Z";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
		}

		public override unsafe global::Java.Net.SocketAddress? LocalAddress {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='getLocalAddress' and count(parameter)=0]"
			get {
				const string __id = "getLocalAddress.()Ljava/net/SocketAddress;";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Net.SocketAddress> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
				}
			}
		}

		public override unsafe global::Java.Net.SocketAddress? RemoteAddress {
			// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='getRemoteAddress' and count(parameter)=0]"
			get {
				const string __id = "getRemoteAddress.()Ljava/net/SocketAddress;";
				try {
					var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
					return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Net.SocketAddress> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='bind' and count(parameter)=1 and parameter[1][@type='java.net.SocketAddress']]"
		[global::Java.Interop.JniMethodSignature ("bind", "(Ljava/net/SocketAddress;)Ljava/nio/channels/SocketChannel;")]
		public override unsafe global::Java.Nio.Channels.SocketChannel? Bind (global::Java.Net.SocketAddress? p0)
		{
			const string __id = "bind.(Ljava/net/SocketAddress;)Ljava/nio/channels/SocketChannel;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.SocketChannel> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='connect' and count(parameter)=1 and parameter[1][@type='java.net.SocketAddress']]"
		[global::Java.Interop.JniMethodSignature ("connect", "(Ljava/net/SocketAddress;)Z")]
		public override unsafe bool Connect (global::Java.Net.SocketAddress? p0)
		{
			const string __id = "connect.(Ljava/net/SocketAddress;)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='finishConnect' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("finishConnect", "()Z")]
		public override unsafe bool FinishConnect ()
		{
			const string __id = "finishConnect.()Z";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractBooleanMethod (__id, this, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='read' and count(parameter)=1 and parameter[1][@type='java.nio.ByteBuffer']]"
		[global::Java.Interop.JniMethodSignature ("read", "(Ljava/nio/ByteBuffer;)I")]
		public override unsafe int Read (global::Java.Nio.ByteBuffer? p0)
		{
			const string __id = "read.(Ljava/nio/ByteBuffer;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='read' and count(parameter)=3 and parameter[1][@type='java.nio.ByteBuffer[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("read", "([Ljava/nio/ByteBuffer;II)J")]
		public override unsafe long Read (global::Java.Interop.JavaObjectArray<global::Java.Nio.ByteBuffer>? p0, int p1, int p2)
		{
			const string __id = "read.([Ljava/nio/ByteBuffer;II)J";
			var native_p0 = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalObjectArray<global::Java.Nio.ByteBuffer> (p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_p0);
				__args [1] = new JniArgumentValue (p1);
				__args [2] = new JniArgumentValue (p2);
				var __rm = _members.InstanceMethods.InvokeAbstractInt64Method (__id, this, __args);
				return __rm;
			} finally {
				if (native_p0 != null) {
					native_p0.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='setOption' and count(parameter)=2 and parameter[1][@type='java.net.SocketOption&lt;T&gt;'] and parameter[2][@type='T']]"
		[global::Java.Interop.JniMethodSignature ("setOption", "(Ljava/net/SocketOption;Ljava/lang/Object;)Ljava/nio/channels/SocketChannel;")]
		[global::Java.Interop.JavaTypeParameters (new string [] {"T"})]
		public override unsafe global::Java.Nio.Channels.SocketChannel? SetOption (global::Java.Net.ISocketOption? p0, global::Java.Lang.Object? p1)
		{
			const string __id = "setOption.(Ljava/net/SocketOption;Ljava/lang/Object;)Ljava/nio/channels/SocketChannel;";
			var native_p1 = (p1?.PeerReference ?? default);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (p0);
				__args [1] = new JniArgumentValue (native_p1);
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, __args);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.SocketChannel> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
				global::System.GC.KeepAlive (p0);
				global::System.GC.KeepAlive (p1);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='shutdownInput' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("shutdownInput", "()Ljava/nio/channels/SocketChannel;")]
		public override unsafe global::Java.Nio.Channels.SocketChannel? ShutdownInput ()
		{
			const string __id = "shutdownInput.()Ljava/nio/channels/SocketChannel;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.SocketChannel> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='shutdownOutput' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("shutdownOutput", "()Ljava/nio/channels/SocketChannel;")]
		public override unsafe global::Java.Nio.Channels.SocketChannel? ShutdownOutput ()
		{
			const string __id = "shutdownOutput.()Ljava/nio/channels/SocketChannel;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Nio.Channels.SocketChannel> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='socket' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("socket", "()Ljava/net/Socket;")]
		public override unsafe global::Java.Net.Socket? Socket ()
		{
			const string __id = "socket.()Ljava/net/Socket;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Net.Socket> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='write' and count(parameter)=1 and parameter[1][@type='java.nio.ByteBuffer']]"
		[global::Java.Interop.JniMethodSignature ("write", "(Ljava/nio/ByteBuffer;)I")]
		public override unsafe int Write (global::Java.Nio.ByteBuffer? p0)
		{
			const string __id = "write.(Ljava/nio/ByteBuffer;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0);
				var __rm = _members.InstanceMethods.InvokeAbstractInt32Method (__id, this, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/class[@name='SocketChannel']/method[@name='write' and count(parameter)=3 and parameter[1][@type='java.nio.ByteBuffer[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[global::Java.Interop.JniMethodSignature ("write", "([Ljava/nio/ByteBuffer;II)J")]
		public override unsafe long Write (global::Java.Interop.JavaObjectArray<global::Java.Nio.ByteBuffer>? p0, int p1, int p2)
		{
			const string __id = "write.([Ljava/nio/ByteBuffer;II)J";
			var native_p0 = global::Java.Interop.JniEnvironment.Arrays.CreateMarshalObjectArray<global::Java.Nio.ByteBuffer> (p0);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_p0);
				__args [1] = new JniArgumentValue (p1);
				__args [2] = new JniArgumentValue (p2);
				var __rm = _members.InstanceMethods.InvokeAbstractInt64Method (__id, this, __args);
				return __rm;
			} finally {
				if (native_p0 != null) {
					native_p0.DisposeUnlessReferenced ();
				}
				global::System.GC.KeepAlive (p0);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels']/interface[@name='NetworkChannel']/method[@name='supportedOptions' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("supportedOptions", "()Ljava/util/Set;")]
		public override unsafe global::Java.Util.ISet? SupportedOptions ()
		{
			const string __id = "supportedOptions.()Ljava/util/Set;";
			try {
				var __rm = _members.InstanceMethods.InvokeAbstractObjectMethod (__id, this, null);
				return global::Java.Interop.JniEnvironment.Runtime.ValueManager.GetValue<global::Java.Util.ISet> (ref __rm, JniObjectReferenceOptions.CopyAndDispose);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels.spi']/class[@name='AbstractSelectableChannel']/method[@name='implCloseSelectableChannel' and count(parameter)=0]"
		[global::Java.Interop.JniMethodSignature ("implCloseSelectableChannel", "()V")]
		protected override unsafe void ImplCloseSelectableChannel ()
		{
			const string __id = "implCloseSelectableChannel.()V";
			try {
				_members.InstanceMethods.InvokeAbstractVoidMethod (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='java.nio.channels.spi']/class[@name='AbstractSelectableChannel']/method[@name='implConfigureBlocking' and count(parameter)=1 and parameter[1][@type='boolean']]"
		[global::Java.Interop.JniMethodSignature ("implConfigureBlocking", "(Z)V")]
		protected override unsafe void ImplConfigureBlocking (bool p0)
		{
			const string __id = "implConfigureBlocking.(Z)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (p0 ? (sbyte)1 : (sbyte)0);
				_members.InstanceMethods.InvokeAbstractVoidMethod (__id, this, __args);
			} finally {
			}
		}

	}
}
