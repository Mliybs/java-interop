<metadata>
  <!-- For now, just bind a few packages  -->
  <!--<remove-node path="//api/package[
      not(
        starts-with(@name, 'java.lang')
        or starts-with(@name, 'java.io')
        or starts-with(@name, 'java.util')
      )]" />-->
  <!--<remove-node path="//api/package[
               starts-with(@name, 'java.util.concurrent')
               or starts-with(@name, 'java.util.jar')
               or starts-with(@name, 'java.util.zip')
               or starts-with(@name, 'java.time')
               or starts-with(@name, 'java.security')
               or starts-with(@name, 'javax')
               or starts-with(@name, 'jdk')
               or starts-with(@name, 'com')
               or starts-with(@name, 'sun')
               ]"/>-->
    <!--那我缺的这个ends-with这一块谁给我补啊-->
  <!--<remove-node path="//api/package[@name='java.util']/class[substring(@name, string-length(@name) - string-length('ResourceBundle') + 1 = 'ResourceBundle')]"/>
  <remove-node path="//api/package[@name='java.text']/class[substring(@name, string-length(@name) - string-length('Format') + 1 = 'Format')]"/>
  <remove-node path="//api/package[@name='java.util']/class[@name='AbstractQueue']"/>
  <remove-node path="//api/package[@name='java.nio']/class[@name='Buffer']"/>
  <remove-node path="//api/package[@name='java.nio']/class[@name='ByteBuffer']"/>
  <remove-node path="//api/package[@name='java.nio']/class[@name='CharBuffer']"/>
  <remove-node path="//api/package[@name='java.nio']/class[@name='DoubleBuffer']"/>
  <remove-node path="//api/package[@name='java.nio']/class[@name='FloatBuffer']"/>
  <remove-node path="//api/package[@name='java.nio']/class[@name='IntBuffer']"/>
  <remove-node path="//api/package[@name='java.nio']/class[@name='LongBuffer']"/>
  <remove-node path="//api/package[@name='java.nio']/class[@name='MappedByteBuffer']"/>
  <remove-node path="//api/package[@name='java.nio']/class[@name='ShortBuffer']"/>
  <remove-node path="//api/package[@name='java.nio.channels']/class[@name='AsynchronousServerSocketChannel']"/>
  <remove-node path="//api/package[@name='java.nio.channels']/class[@name='AsynchronousSocketChannel']"/>
  <remove-node path="//api/package[@name='java.nio.channels']/class[@name='DatagramChannel']"/>
  <remove-node path="//api/package[@name='java.nio.channels']/class[@name='FileChannel']"/>
  <remove-node path="//api/package[@name='java.nio.channels']/class[@name='ServerSocketChannel']"/>
  <remove-node path="//api/package[@name='java.nio.channels']/class[@name='SocketChannel']"/>
  <remove-node path="//api/package[@name='java.util']/interface[@name='EventListener']"/>
  <remove-node path="//api/package[@name='java.util']/interface[@name='PrimitiveIterator']"/>-->

  <attr path="/api/package[@name='java.time.chrono']/class[@name='IsoChronology']/method[@name='dateYearDay' and count(parameter)!=3]" name="managedOverride">override</attr>
  <attr path="/api/package[@name='java.time.chrono']/class[@name='IsoChronology']/method[@name='dateEpochDay']" name="managedOverride">override</attr>
  <attr path="/api/package[@name='java.time.chrono']/class[@name='IsoChronology']/method[@name='epochSecond']" name="managedOverride">none</attr>
  <attr path="/api/package[@name='java.time.chrono']/class[@name='IsoChronology']/method[@name='date' and count(parameter) = 3 and parameter[1][@type='int']]" name="managedOverride">override</attr>
  <attr path="/api/package[@name='java.time.chrono']/class[@name='IsoChronology']/method[@name='date' and count(parameter) = 1]" name="managedOverride">override</attr>
  <attr path="/api/package[@name='java.time.chrono']/class[@name='IsoChronology']/method[@name='eraOf']" name="managedOverride">override</attr>

  <attr path="/api/package[@name='java.text']/class[@name='NumberFormat']/method[@name='format' and count(parameter)=3 and parameter[1][@type='java.lang.Object'] and parameter[2][@type='java.lang.StringBuffer'] and parameter[3][@type='java.text.FieldPosition']]" name="managedOverride">virtual</attr>

  <!-- Type / Namespace conflicts -->
  <ns-replace source="java.lang.module" replacement="Java.Lang.Modules" />
  <ns-replace source="java.lang.runtime" replacement="Java.Lang.Runtimes" />
  <ns-replace source="java.lang.constant" replacement="Java.Lang.Constants" />
  <ns-replace source="java.util.random" replacement="Java.Util.Randoms" />

  <!-- Bind `Object.finalize()` as `Object.JavaFinalize()` -->
  <attr path="/api/package[@name='java.lang']//method[@name='finalize' and count(parameter)=0]" name="managedName">JavaFinalize</attr>
  <!-- warning CS0672: Member 'Enum.JavaFinalize()' overrides obsolete member 'Object.JavaFinalize()'. Add the Obsolete attribute to 'Enum.JavaFinalize()'. -->
  <attr path="/api/package[@name='java.lang']/class[@name='Enum']/method[@name='finalize' and count(parameter)=0]" name="deprecated">deprecated</attr>

  <!-- warning CS0108: 'MEMBER' hides inherited member 'MEMBER'. Use the new keyword if hiding was intended. -->
  <attr path="/api/package[@name='java.io']/class[
        @name='ByteArrayInputStream'
      ]/field[@name='mark']"
      name="managedName">MarkedPosition</attr>
  <attr path="/api/package[@name='java.lang.reflect']/interface[
        @name='AnnotatedArrayType'
        or @name='AnnotatedParameterizedType'
        or @name='AnnotatedTypeVariable'
        or @name='AnnotatedWildcardType'
      ]/method[@name='getAnnotatedOwnerType' and count(parameter)=0]"
      name="managedOverride">reabstract</attr>
  <attr path="/api/package[@name='java.lang.reflect']/interface[
        @name='AnnotatedArrayType'
        or @name='AnnotatedParameterizedType'
        or @name='AnnotatedTypeVariable'
        or @name='AnnotatedWildcardType'
      ]/method[@name='getAnnotatedOwnerType' and count(parameter)=0]"
      name="explicitInterface">IAnnotatedType</attr>
  <attr path="/api/package[@name='java.io']/interface[
        @name='Closeable'
        or @name='ObjectInput'
        or @name='ObjectOutput'
      ]/method[@name='close' and count(parameter)=0]"
      name="managedOverride">reabstract</attr>
  <attr path="/api/package[@name='java.io']/interface[
        @name='Closeable'
        or @name='ObjectInput'
        or @name='ObjectOutput'
      ]/method[@name='close' and count(parameter)=0]"
      name="explicitInterface">Java.Lang.IAutoCloseable</attr>
  <attr path="/api/package[@name='java.io']/interface[
        @name='ObjectOutput'
      ]/method[@name='write']"
      name="managedOverride">reabstract</attr>
  <attr path="/api/package[@name='java.io']/interface[
        @name='ObjectOutput'
      ]/method[@name='write']"
      name="explicitInterface">IDataOutput</attr>

  <!-- CS0108 but for *static* members; TODO: how do we fix? -->
  <remove-node path="/api/package[@name='java.util.function']/interface[@name='UnaryOperator']/method[@name='identity' and count(parameter)=0]" />

  <!-- AbstractStringBuilder is package-private; fixity fix -->
  <remove-node path="//api/package[@name='java.lang']/class[@name='AbstractStringBuilder']" />

  <attr path="/api/package[@name='java.lang']/class[@name='StringBuilder']" name="extends">java.lang.Object</attr>
  <remove-node path="//api/package[@name='java.lang']/class[@name='StringBuilder']/method[@jni-return='Ljava/lang/AbstractStringBuilder;']" />
  <remove-node path="//api/package[@name='java.lang']/class[@name='StringBuilder']/method[@jni-return='Ljava/lang/Appendable;']" />

  <attr path="/api/package[@name='java.lang']/class[@name='StringBuffer']" name="extends">java.lang.Object</attr>
  <remove-node path="//api/package[@name='java.lang']/class[@name='StringBuffer']/method[@jni-return='Ljava/lang/AbstractStringBuilder;']" />
  <remove-node path="//api/package[@name='java.lang']/class[@name='StringBuffer']/method[@jni-return='Ljava/lang/Appendable;']" />

  <!-- JDK 17? -->
  <!--<remove-node path="/api/package[@name='java.lang.invoke']/interface[@name='TypeDescriptor']" />-->
  <attr path="/api/package[@name='java.lang']/class[@name='Record']/method[@name='equals' and count(parameter)=1 and parameter[1][@type='java.lang.Object']]"
      name="managedOverride">override</attr>
  <attr path="/api/package[@name='java.lang.reflect']/interface[@name='AnnotatedType']/method[@name='getAnnotation' and count(parameter)=1 and parameter[1][@type='java.lang.Class&lt;T&gt;']]"
      name="managedOverride">reabstract</attr>
  <attr path="/api/package[@name='java.lang.reflect']/interface[@name='AnnotatedType']/method[@name='getAnnotation' and count(parameter)=1 and parameter[1][@type='java.lang.Class&lt;T&gt;']]"
      name="explicitInterface">IAnnotatedElement</attr>
  <attr path="/api/package[@name='java.lang.reflect']/interface[@name='AnnotatedType']/method[@name='getAnnotations' and count(parameter)=0]"
      name="managedOverride">reabstract</attr>
  <attr path="/api/package[@name='java.lang.reflect']/interface[@name='AnnotatedType']/method[@name='getAnnotations' and count(parameter)=0]"
      name="explicitInterface">IAnnotatedElement</attr>
  <attr path="/api/package[@name='java.lang.reflect']/interface[@name='AnnotatedType']/method[@name='getDeclaredAnnotations' and count(parameter)=0]"
      name="managedOverride">reabstract</attr>
  <attr path="/api/package[@name='java.lang.reflect']/interface[@name='AnnotatedType']/method[@name='getDeclaredAnnotations' and count(parameter)=0]"
      name="explicitInterface">IAnnotatedElement</attr>

  <attr path="/api/package[@name='java.util.concurrent']/interface[@name='RunnableFuture']/method[@name='run' and count(parameter)=0]"
      name="managedOverride">reabstract</attr>
  <attr path="/api/package[@name='java.util.concurrent']/interface[@name='RunnableFuture']/method[@name='run' and count(parameter)=0]"
      name="explicitInterface">global::Java.Lang.IRunnable</attr>
  <attr path="/api/package[@name='java.util.concurrent']/class[@name='CompletableFuture']/method[@name='applyToEither'
          or @name='applyToEitherAsync'
          or @name='acceptEither'
          or @name='acceptEitherAsync'
          or @name='exceptionally'
          or @name='handle'
          or @name='handleAsync'
          or @name='runAfterBoth'
          or @name='runAfterBothAsync'
          or @name='runAfterEither'
          or @name='runAfterEitherAsync'
          or @name='thenAccept'
          or @name='thenAcceptAsync'
          or @name='thenAcceptBoth'
          or @name='thenAcceptBothAsync'
          or @name='thenApply'
          or @name='thenApplyAsync'
          or @name='thenCombine'
          or @name='thenCombineAsync'
          or @name='thenCompose'
          or @name='thenComposeAsync'
          or @name='thenRun'
          or @name='thenRunAsync'
          or @name='whenComplete'
          or @name='whenCompleteAsync'
      ]"
      name="managedReturn">Java.Util.Concurrent.ICompletionStage</attr>
</metadata>
